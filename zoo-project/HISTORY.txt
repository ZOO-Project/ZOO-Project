Version 2.0.0
  * Update the beta Part 3: Workflow & chaining support
  * Add Configuration option to force stderr in the console rather 
  than a dedicated file.
  * Update relation type to monitor for the status location.
  * Add support for the conformance class remote processes from the
  OGC API - Processes - Part 3: Workflow & chaining. Execution of
  remote processes is automatically run asyncrhonously in case the
  root process was invoked asyncrhonously.
  * Parse the Location header from ulinet and the cookie if any.
  * Add schemas to the components and support description store in file.
  * Add a trivial DeployOnHpc service for automating the installation
  and the deployment of a singularity container using the image
  parameter provided in the executionUnit used when deploying the
  process.
  * Set the key json_response_object with the JSON response that the
  ZOO-Kernel produced for the request, it can be updated from a
  filter_out process.
  * Update filter_in to support returning a response directly by
  adding a reponse key in the lenv section (binary is supported for
  this response)
  * Provide an initial Dockefile dedicated to the DRU support with
  remote HPC execution support
  * Add a USE_HPC_NESTEDOUTPUTS build option to activate the nested
  inputs and outputs addition (not supported with OGC API - Processes
  - Part 1: Core)
  * Update C-API errorException and printExceptionResponse* signatures
  to handle properly the main configuration maps memory  
  *  Build Docker image with DRU supporting OpenEO UDP encoding 
  * Add support for deploying and executing OpenEO User Defined
  Processes by using an OpenEO graph for the executionUnit
  * Add support for schema type string for request body, providing a
  way to include CWL example files in the published OpenAPI
  * Integrate the OGC API - Processes - Part 2: Deploy, Replace,
  Undeploy optional support.
  * Build Docker image based on MDL4EO/OTBTF and the onnx runtime for
  models sharing
  * Integrate the TeamEngine and ETS for OGC API - Processes
  * Add JWT parser in security_service.py as filter_in to allocate
  resources per authenticated user
  * Integrate the work done during GSoC 2022 to support Node.js
  ZOO-Services (cf. updated documentation for NodeJS)
  * Update support to filter the jobs list using the user_id
  * Add support for nested processes n OGC API - Processes - Part 3: 
  Workflows & Chaining
  * Add filter_in and filter_out service array to be invoked previously
  of andd after the service run
  * Add trivial support for OpenAPI security, basicAuth / openId, add
  sample services implementation
  * Add support for MapServer 8.0 (actually 7.7-dev) including
  returning result as OGC API -Features
  * Integrate downloading MapServer 8.0 and building from the
  dedicated Dockerfile-MS8
  * Include basicAuth build instructions in the Dockefile
  * Add basicAuth service illustrating how to secure access to OGC API
  - Processes using Basic Authentication
  * Use the osecurity section to detect secured path, request method
  from the published OpenAPI
  * Update the printHeaders function to allow Status definition at runtime
  * Add a [osecurity] section to secure access to path,method couple
  from the published OpenAPI
  * Update the database connexion handling to make it independent from
  instantiation order
  * Use the RabbitMQ also for OGC API - Processes
  * Pass the subscriber if any is passed from the original request
  * Make C OGR base-vect-ops compatible with memory=protect
  * Add volumes to be shared by the ZOO-Kernel and the ZOO-FPM
  * Add a RabbitMQ and, a ZOO-FPM container to docker-compose
  * Add documentation for RabbitMQ support and ZOO Fast Process
  Manager (ZOO-FPM)
  * Optional use of ZOO-Kernel Fast Process Manager backends to handle
  asynchronous execution  
  * Partial integration of the code from the
  Publicamundi_David_integration01-devel branch

Version 1.9.0
  * Update ZOO-Kernel internal messages natural languages po files
  * Fix issue with synchronous execution from the HTML UI when
  requesting something else than raw data output.
  * Add support for natural languages to be available within the
  docker-compose setup.
  * Add support for automatic natural languages support.
  * Add getValueFromMaps function the C-API to be used from C services
  requiring to be functional in every memory management mode (load or
  protected)
  * Add support for datetime parameter for jobs filtering as defined in
  OGC API - Processes.
  * Add support for type parameter for jobs filtering as defined in
  OGC API - Processes.
  * Add support for minDuration and maxDuration parameters for jobs
  filtering as defined in OGC API - Processes.
  * Change the table structure for storing ongoing execution status
  informations to add required field for outputing correct
  statusInfo.
  * Addition in the C-API: function addToMapA, in case there is already a
  value, then the value is appended to the string and values are coma
  separated (reason of the change: support for filtering using
  processId and status in OGC API - Processes).
  * Add support for filtering using array of string the jobs list from
  OGC API - Processes using processId or status parameter
  * Change docker-compose to use binary docker image published from
  GitHub action.
  * Minor updates in docker-compose to target the right arch and
  potentially cross compile in case you run from another arch
  * Get back the MapServer automatic publication of outputs/results
  through OGC Web Services (WMS, WFS, and WCS)
  * Update the Basic HTML UI to use the Prefer header in case the
  execution scenario requires to run the execute request
  asyncrhonously
  * Support the Prefer header for choosing between execution mode
  scenarios which can be sync/async and raw/document
  * Add support for multiple output requested as Raw for OGC API -
  Processes (why not backport this in WPS?)
  * Automatically add the old format of metadata informations to
  the inputs and outputs to not require a single modification within
  your existing services
  * Update the Basic HTML UI to try to conform to version 1.0-draft.6
  * Modify both the request parser and response printer functions
  from the C-API to conform to version 1.0-draft.6
  * Support both the old array of inputs / outputs syntax and the one
  defined in the draft 1.0-draft.6 (array of inputs for the new syntax
  may not work as expected)
  * Move jobs to root and use /processes/{processID} as execute endpopint
  * Make all demos running within docker (including SAGA and OTB)
  * Deploy demo HTML UI from github from the Dockerfile
  * Add demo ZOO-Services build in the Dockerfile

Version 1.8.0
  * Support raw response in OGC API - Processes
  * Add a ZOO-API section to the howtos documentation
  * OGC API - Processes support:
  https://github.com/gfenoy/wps-rest-binding/tree/change-request/95
  * Support two inputs/outputs syntaxes discussed (using json object
  or array of json object) for ZOO-Kernel and the HTML client
  * Fix issue in kvParseInput when memory!=load and handle session
  from the OGC API - Processes
  * Update OGC API - Processes documentation
  * Add open-api directory in utils services containing a reddis
  subscription example, the HTML UI and the display service using
  Cheetah templating system
  * Update the oas.cfg file to reflect new api definition
  * Include basic microdata in the HTML home page 
  * Add HTML support for basic interractions with OGC API - Processes
  including execution of service from the service-desc link
  * OGC API - Processes added support for syncrhonous Execute requests
  * Reuse service_callback in OGC API - Processes when subscriber
  object is provided in the JSON request
  * OGC API - Processes implementation as available on 2020-10-19
  * Produce value string only when memory=load for Python support.
  * Make local files uris usable when cache is used
  * Make GDAL/profile service usable in case memory=protect 
  * Add Dockerfile and docker-compose environment with pgbouncer, see #177
  * Add documentation on how to use asyncrhonous execution using the Javascript
  ZOO-API
  * Start simplification of the runRequest function
  * Integrate optional support for OGC API - Processing implementation
  * Add the optional handleText parameter to provide pure text for
  complex data node with mimetype="text/*"
  * Fix issue in case JavaScript support is activated
  * Fix issue with GDAL profile service
  * Fix #172 for https support

Version 1.7.0
  * Fix issue with UOM definitions in zcfg2sql
  * Make callback and HPC support independent from each other
  * Update SAGA-GIS support to version 7.2.0
  * Add support for custom MapServer style definition for raster output
  * Fix returned bbox definition #170 
  * Store semaphore status in lenv section for future deletion 
  * Update Windows support to newer compiler
  * Fix issue with UpdateStatus function from the Mono ZOO-API
  * Add logging functionality and other utility functions to the C-API
  * Return an exception for every output for which nb_pixel or
  nb_features is 0 
  * Add a shared key to the security section to differentiate the
  referenced data 
  * Add MapServer output style definition depending on the geometry
  type 
  * Add ogr.tindex service
  * Add support for literaldata input arrays and to call services
  asyncrhonously from the JavaScript ZOO-API   
  * Expose a sleep function to the JavaScript ZOO-API
  * Provide FinalizeHPC and FinalizeHPC1 services using scontrol and
  sacct respectively  
  * Store md5sum of the cached file (so, local to the WPS server) to
  compare before uploading (if different md5sum) on the HPC server 
  * Add support for R language
  * Add support for using "file://"  for referenced data input
  * Add an optional ecookie key for returning third-party cookies
  * Fix issue when parsing BoundingBox input #163 
  * Add memory key to the main section to force the ZOO-Kernel to load
  data into memory or use local file 
  * Add the dialect input to the ogr2ogr service
  * Store the list of generated mapfiles in a file (cf DeleteData service)
  * Define the correct MS_IMAGEMODE in the generated mapfile 
  * Option to use MapServer support to publish heatmap
  * Add status_code key to the lenv for setting Status HTTP response header 
  * Add the Creation Option inputs to the Gdal_Dem service
  * Add prohibited key in the callback section to define a list of
  services not requiring any invocation
  * Produce zcfg for OTB applications using the correct default pixel type
  * Add asynchronous callback invocation to send information about
  the ongoing services to a third-party software
  * Add mapsToJson, mapsToJson, and elementsToJson to the API 
  * Provide a zcfg2sql tool to convert a zcfg metadata file to SQL script
  * Add support to store service metadata information into a database
  * Add HPC Support for remote execution of SBATCH scripts through Slurm
  * Add cookie reference to _HINTERNET
  * Support headers for GET requests from the js ZOO-API 
  * Pass all headers listed in the attributes parameter from the
  [security] section to the hosts listed in the hosts parameter of the
  same section (ticket #139)

Version 1.6.0
  * Add the C# as a supported programming language for Services 
  * Add nested inputs and outputs support (WPS 2.0.0)
  * Add servicePath special key to specify the service location
  * Add the PHP version 7 support
  * Add --with-etc-dir option to specify the location of the main.cfg file
  * Support GDAL version 2.1.0.
  * Add the MapServer 7.0.1 internal support.
  * Support for exotic location of openssl.
  * Add ZOO-Client API documentation reference in the official documentation.
  * Add CORS support.
  * Fix issue when dealing with Array in JavaScript support.
  * Update the Centos installation procedure.
  * Small fixes in java support.
  * Fix issue when XML request contains empty nodes for inputs
  * Add status update for contour lines computation
  * Fix FASTCGI location using the --with-fastcgi option.
  * Redefined the API function addToMapWithSize to fix problem with Python/PHP support.

Version 1.5.0
  * Complete rewrite of the documentation to use modern style
  * Fix asynchronous POST request on WIN32 platforms
  * Add utils/registry service
  * Initial support for WPS 2.0.0 including the Dismiss extension
  * Fix concurrency access to status information
  * Use simple file rather than shared memory for storing status information
  * Add support for db backend to store status information
  * Add the lib_zoo_service shared library to be linked against C services
  * Add ZOO-API for the PHP language (with documentation)
  * Add doxygen comments in source code
  * Add support for multiple Exception nodes
  * Add a length key when creating MapArray
  * Add OTB support for applications as a service
  * Add the otb2zcfg utility to produce zcfg for otb applications
  * Add OTB Application Observer to have progress status updates
  * Fix maxOccurs handling
  * Fix gesture of downloaded inputs when multiple values are given
  * Add detection of generated_file key in outputs to read the file
  generated by a service
  * Add a minimal parsing API 
  * Run validateRequest (download, default settings and decoding)
  after fork if any
  * Add SAGA-GIS support for modules as a service
  * Add saga2zcfg utility to generate zcfg for SAGA-GIS modules
  * Add SAGA-GIS Observer to have ongoing status updates

Version 1.4.0
  * Small fix for mimeType of results for CGAL services

Version 1.4.0-rc1
  * Binary support for PHP language
  * ZOO-API for the Java language
  * ZOO-Client Javascript API
  * FastCGI fixes
  * JavaScript ZOO-API enhancements (COOKIE use and Output in
  generated XML)
  * Add debian files
  * Inputs passed by reference downloaded in parallel
  * Conform behavior for DescribeProcess when the Identifier was not
  found
  * Add support of maximumMegabytes keywords for ComplexData Inputs
  * Add the optional YAML ZCFG support #4 and the zcfg2yaml converter
  * Return error messages that enable the service provider to quickly
  identify the root cause of errors due to configuration file syntax
  (ticket #90)
  * Fix logic in addMapToMap (ticket #91)
  * Enable AllowedValue and multiple Range definitions using default
  and supported blocks
  * Add the lastest revision number in version.h (available in Python
  ZOO-API)
  * Add the optional Ruby Language Support to the ZOO-Kernel with an
  API similar to the Python ZOO-API
  * Small rewrite of Python support
  * Inputs can be requested over https protocol (ticket #86)
  * Add capability to define both percentage of execution and a
  message (ticket #87). 
  * Add usid in lenv section used to generate an unique identifier
  based on time and the process identifier.
  * Add gdal_contour service
  * Add dynamic definition of serverAddress from the main section

Version 1.3.0-rc2
  * Fix POST Request issue (ticket #34)
  * Fix COOKIE gesture (ticket #79)
  * Remove verbose messages when using MapServer W*S (ticket #80)
  * Add COMMITTERS  and LICENSE files

Version 1.3.0-rc1
  * Updating ZOO.Class object with the OpenLayers.Class Updating
    ZOO.Class with the (ticket #64)
  * Correct the content of proj4js (ticket #63)
  * Enhance the COOKIE gesture (ticket #68)
  * Support for dataInputs URLEncoded and xlink:href (ticket #62)
  * Use the same object structure for JavaScript arguments than for
    Python
  * Add the Normalized Difference Vegetation Index service
  * Add importScripts function to JavaScript support (ticket #66)
  * Add multiple inputs values for the same identifier (ticket #72)
  * Add Python ZOO-API to access ZOO-Kernel internel functions
  * Add a [headers] section in main.cfg file to add specifics to
    header returned
  * Add support for multiple outputs for both GET and POST requests
  * Add Content-Length to the headers if the result is sized
  * Add Content-Disposition to the headers if the result contains a
    filename
  * Add support for sending headers through JS ZOO-api
  * Add support for multi-valued inputs in JS ZOO-api
  * Fixing issue about invalid status document #73
  * Add Python-3.3.0 support
  * Update documentation
  * Add MapServer W*S Support documentation #34

Version 1.2.0-rc3
  * add basic SOAP Envelope support (ticket #49)
  * support request when Content-Length header is not set by the
  * client (ticket #57)
  * fix issue when POST request is empty (ticket #45)
  * add minimalist cache system (ticket #51)
  * fix Python support (ticket #29)

Version 1.2.0-rc2
  * fix for process to run in background
  * add support for ALL identifier for !DescribeProcess
  * add a small test suite in the testing directory to test ogr base-vect-ops
  * big fix for storage of Session maps on disk
  * support for {{{<Default />}}} node in ZCFG files
  * fastcgi version now support both !GetCapabilities and !DescribeProcess requests

Version 1.2.0-rc1
  * add WIN32 support
  * add GRASS support through wps-grass-bridge
  * add languages support using libintl 
  * binary support for inputs and outputs for both JAVA and Python
  * automatic loading of ZOO-API and proj4js files (if present in the 
  ZOO-Kernel directory) when loading JS Service Provider
  * numerous memory leaks removed
  * add PERL support
  * enhance speed for JAVA support
  * enhance POST request support
  * add !BoundingBoxData support
  * Python support is now optional as other languages
  * add lenv section before running the service to store information runtime specific
  * add COOKIE support and {{{senv}}} section to store information session specific
  * add {{{USE_GDB}}} compilation flag to remove signal handling for debuging purpose
  * enhance base64 support when included in and XML POST request
  * return !ExceptionReport when no protocol was specified for xlink:href value

