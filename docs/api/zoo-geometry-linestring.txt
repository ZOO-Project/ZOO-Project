.. _api-zoo-geometry-linestring:

ZOO.Geometry.LineString
=======================

A LineString is a Curve which, once two points have been added to it, can never be less than two points long.

Inherits from

- :ref:`ZOO.Geometry.Curve <api-zoo-geometry-curve>`

Functions	
---------

.. list-table::
   :widths: 15 50
   :header-rows: 1

   * - NAME
     - DESCRIPTION   
   * - :ref:`ZOO.Geometry.LineString <ZOO.Geometry.LineString>`
     - Create a new LineString geometry
   * - :ref:`removeComponent <removeComponent>`
     - Only allows removal of a point if there are three or more points in the linestring.  
   * - :ref:`intersects <intersects>`
     - Test for instersection between two geometries.
   * - :ref:`getSortedSegments <getSortedSegments>`
     - {Array} An array of segment objects.  
   * - :ref:`splitWithSegment <splitWithSegment>`
     - Split this geometry with the given segment.
   * - :ref:`split <split>`
     - Use this geometry (the source) to attempt to split a target geometry. 
   * - :ref:`splitWith <splitWith>`
     - Split this geometry (the target) with the given geometry (the source).
   * - :ref:`getVertices <getVertices>`
     - Return a list of all points in this geometry.       
     
.. _ZOO.Geometry.LineString: 

ZOO.Geometry.LineString	
  Create a new LineString geometry

  *Parameters*
  
  ``points`` {Array(:ref:`ZOO.Geometry.Point <api-zoo-geometry-point>`)} An array of points used to generate the linestring  

.. _removeComponent:  
  
removeComponent	
  ::
  
    removeComponent: function(point)

  Only allows removal of a point if there are three or more points in the linestring. (otherwise 
  the result would be just a single point)

  *Parameters*
  
  ``point`` :ref:`{ZOO.Geometry.Point} <api-zoo-geometry-point>` The point to be removed  
  
.. _intersects:  
  
intersects	
  ::
  
    intersects: function(geometry)

  Test for instersection between two geometries.  This is a cheapo implementation of the 
  Bently-Ottmann algorigithm.  It doesn't really keep track of a sweep line data structure.  
  It is closer to the brute force method, except that segments are sorted and potential intersections 
  are only calculated when bounding boxes intersect.
  
  *Parameters*
  
  ``geometry`` :ref:`{ZOO.Geometry} <api-zoo-geometry>`
  
  *Returns*

  ``{Boolean}`` The input geometry intersects this geometry.  
  
.. _getSortedSegments:    
  
getSortedSegments	
  ::
  
    getSortedSegments: function()

  *Returns*

  ``{Array}`` An array of segment objects.  Segment objects have properties x1, y1, x2, and y2.  
  The start point is represented by x1 and y1.  The end point is represented by x2 and y2.  
  Start and end are ordered so that x1 < x2.  
  
.. _splitWithSegment:      
  
splitWithSegment	
  ::
  
    splitWithSegment: function(seg,options)

  Split this geometry with the given segment.
  
  *Parameters*
  
  | ``seg {Object}`` An object with x1, y1, x2, and y2 properties referencing segment endpoint coordinates.
  | ``options {Object}`` Properties of this object will be used to determine how the split is conducted.

  *Valid options*
  
  | ``edge {Boolean}`` Allow splitting when only edges intersect.  Default is true.  If false, a vertex on the source segment must be within the tolerance distance of the intersection to be considered a split.
  | ``tolerance	{Number}`` If a non-null value is provided, intersections within the tolerance distance of one of the source segment's endpoints will be assumed to occur at the endpoint.

  *Returns*

  ``{Object}`` An object with lines and points properties.  If the given segment intersects this linestring, the lines array will reference geometries that result from the split.  The points array will contain all intersection points.  Intersection points are sorted along the segment (in order from x1,y1 to x2,y2).  

.. _split:        
  
split	
  ::
  
    split: function(target,options)

  Use this geometry (the source) to attempt to split a target geometry.
  
  *Parameters*
  
  | ``target`` :ref:`{ZOO.Geometry} <api-zoo-geometry>` The target geometry.
  | ``options {Object}`` Properties of this object will be used to determine how the split is conducted.

  *Valid options*
  
  | ``mutual {Boolean}`` Split the source geometry in addition to the target geometry.  Default is false.
  | ``edge {Boolean}`` Allow splitting when only edges intersect.  Default is true.  If false, a vertex on the source must be within the tolerance distance of the intersection to be considered a split.
  | ``tolerance	{Number}`` If a non-null value is provided, intersections within the tolerance distance of an existing vertex on the source will be assumed to occur at the vertex.

  *Returns*

  ``{Array}`` A list of geometries (of this same type as the target) that result from splitting the target with the source geometry.  The source and target geometry will remain unmodified.  If no split results, null will be returned.  If mutual is true and a split results, return will be an array of two arrays - the first will be all geometries that result from splitting the source geometry and the second will be all geometries that result from splitting the target geometry.  

.. _splitWith:          
  
splitWith	
  ::
  
    splitWith: function(geometry,options)

  Split this geometry (the target) with the given geometry (the source).
  
  *Parameters*
  
  | ``geometry`` :ref:`{ZOO.Geometry} <api-zoo-geometry>` A geometry used to split this geometry (the source).
  | ``options {Object}`` Properties of this object will be used to determine how the split is conducted.

  *Valid options*
  
  | ``mutual {Boolean}`` Split the source geometry in addition to the target geometry.  Default is false.
  | ``edge {Boolean}`` Allow splitting when only edges intersect.  Default is true.  If false, a vertex on the source must be within the tolerance distance of the intersection to be considered a split.
  | ``tolerance {Number}`` If a non-null value is provided, intersections within the tolerance distance of an existing vertex on the source will be assumed to occur at the vertex.

  *Returns*

  ``{Array}`` A list of geometries (of this same type as the target) that result from splitting the target with the source geometry.  The source and target geometry will remain unmodified.  If no split results, null will be returned.  If mutual is true and a split results, return will be an array of two arrays - the first will be all geometries that result from splitting the source geometry and the second will be all geometries that result from splitting the target geometry.  

.. _getVertices:            
  
getVertices	
  ::
  
    getVertices: function(nodes)

  Return a list of all points in this geometry.
  
  *Parameters*
  
  ``nodes {Boolean}`` For lines, only return vertices that are endpoints.  If false, for lines, only vertices that are not endpoints will be returned.  If not provided, all vertices will be returned.

  *Returns*

  ``{Array}`` A list of all vertices in the geometry.