.. _api-classes:

Classes
=======

.. raw:: html

	<div id=Content><div class="CClass"><div class=CTopic id=MainTopic><h1 class=CTitle><a name="ZOO"></a>ZOO</h1><div class=CBody><!--START_ND_SUMMARY--><div class=Summary><div class=STitle>Summary</div><div class=SBorder><table border=0 cellspacing=0 cellpadding=0 class=STable><tr class="SMain"><td class=SEntry><a href="#ZOO" >ZOO</a></td><td class=SDescription></td></tr><tr class="SGroup SIndent1"><td class=SEntry><a href="#ZOO.Constants" >Constants</a></td><td class=SDescription></td></tr><tr class="SConstant SIndent2 SMarked"><td class=SEntry><a href="#ZOO.SERVICE_ACCEPTED" >SERVICE_ACCEPTED</a></td><td class=SDescription>{Integer} used for</td></tr><tr class="SConstant SIndent2"><td class=SEntry><a href="#ZOO.SERVICE_STARTED" >SERVICE_STARTED</a></td><td class=SDescription>{Integer} used for</td></tr><tr class="SConstant SIndent2 SMarked"><td class=SEntry><a href="#ZOO.SERVICE_PAUSED" >SERVICE_PAUSED</a></td><td class=SDescription>{Integer} used for</td></tr><tr class="SConstant SIndent2"><td class=SEntry><a href="#ZOO.SERVICE_SUCCEEDED" >SERVICE_SUCCEEDED</a></td><td class=SDescription>{Integer} used for</td></tr><tr class="SConstant SIndent2 SMarked"><td class=SEntry><a href="#ZOO.SERVICE_FAILED" >SERVICE_FAILED</a></td><td class=SDescription>{Integer} used for</td></tr><tr class="SGroup SIndent1"><td class=SEntry><a href="#ZOO.Functions" >Functions</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.removeItem" id=link1 onMouseOver="ShowTip(event, 'tt1', 'link1')" onMouseOut="HideTip('tt1')">removeItem</a></td><td class=SDescription>Remove an object from an array. </td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.indexOf" id=link2 onMouseOver="ShowTip(event, 'tt2', 'link2')" onMouseOut="HideTip('tt2')">indexOf</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.extend" id=link3 onMouseOver="ShowTip(event, 'tt3', 'link3')" onMouseOut="HideTip('tt3')">extend</a></td><td class=SDescription>Copy all properties of a source object to a destination object. </td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.rad" id=link4 onMouseOver="ShowTip(event, 'tt4', 'link4')" onMouseOut="HideTip('tt4')">rad</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.distVincenty" id=link5 onMouseOver="ShowTip(event, 'tt5', 'link5')" onMouseOut="HideTip('tt5')">distVincenty</a></td><td class=SDescription>Given two objects representing points with geographic coordinates, this calculates the distance between those points on the surface of an ellipsoid.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Class" id=link6 onMouseOver="ShowTip(event, 'tt6', 'link6')" onMouseOut="HideTip('tt6')">Class</a></td><td class=SDescription>Method used to create ZOO classes. </td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.UpdateStatus" id=link7 onMouseOver="ShowTip(event, 'tt7', 'link7')" onMouseOut="HideTip('tt7')">UpdateStatus</a></td><td class=SDescription>Method used to update the status of the process</td></tr><tr class="SClass"><td class=SEntry><a href="#ZOO.String" >ZOO.<wbr>String</a></td><td class=SDescription>Contains convenience methods for string manipulation</td></tr><tr class="SGroup SIndent1"><td class=SEntry><a href="#ZOO.String.Functions_and_Properties" >Functions and Properties</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.String.startsWith" id=link8 onMouseOver="ShowTip(event, 'tt8', 'link8')" onMouseOut="HideTip('tt8')">startsWith</a></td><td class=SDescription>Test whether a string starts with another string.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.String.contains" id=link9 onMouseOver="ShowTip(event, 'tt9', 'link9')" onMouseOut="HideTip('tt9')">contains</a></td><td class=SDescription>Test whether a string contains another string.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.String.trim" id=link10 onMouseOver="ShowTip(event, 'tt10', 'link10')" onMouseOut="HideTip('tt10')">trim</a></td><td class=SDescription>Removes leading and trailing whitespace characters from a string.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.String.camelize" id=link11 onMouseOver="ShowTip(event, 'tt11', 'link11')" onMouseOut="HideTip('tt11')">camelize</a></td><td class=SDescription>Camel-case a hyphenated string. </td></tr><tr class="SProperty SIndent2 SMarked"><td class=SEntry><a href="#ZOO.String.tokenRegEx" >tokenRegEx</a></td><td class=SDescription>Used to find tokens in a string. </td></tr><tr class="SProperty SIndent2"><td class=SEntry><a href="#ZOO.String.numberRegEx" >numberRegEx</a></td><td class=SDescription>Used to test strings as numbers.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.String.isNumeric" id=link12 onMouseOver="ShowTip(event, 'tt12', 'link12')" onMouseOut="HideTip('tt12')">isNumeric</a></td><td class=SDescription>Determine whether a string contains only a numeric value.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.String.numericIf" id=link13 onMouseOver="ShowTip(event, 'tt13', 'link13')" onMouseOut="HideTip('tt13')">numericIf</a></td><td class=SDescription>Converts a string that appears to be a numeric value into a number.</td></tr><tr class="SClass"><td class=SEntry><a href="#ZOO.Request" >ZOO.<wbr>Request</a></td><td class=SDescription>Contains convenience methods for working with ZOORequest which replace XMLHttpRequest. </td></tr><tr class="SGroup SIndent1"><td class=SEntry><a href="#ZOO.Request.Functions" >Functions</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Request.GET" >GET</a></td><td class=SDescription>Send an HTTP GET request.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Request.POST" >POST</a></td><td class=SDescription>Send an HTTP POST request.</td></tr><tr class="SClass"><td class=SEntry><a href="#ZOO.Bounds" >ZOO.<wbr>Bounds</a></td><td class=SDescription>Instances of this class represent bounding boxes. </td></tr><tr class="SGroup SIndent1"><td class=SEntry><a href="#ZOO.Bounds.Properties" >Properties</a></td><td class=SDescription></td></tr><tr class="SProperty SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Bounds.left" >left</a></td><td class=SDescription>{Number} Minimum horizontal coordinate.</td></tr><tr class="SProperty SIndent2"><td class=SEntry><a href="#ZOO.Bounds.bottom" >bottom</a></td><td class=SDescription>{Number} Minimum vertical coordinate.</td></tr><tr class="SProperty SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Bounds.right" >right</a></td><td class=SDescription>{Number} Maximum horizontal coordinate.</td></tr><tr class="SProperty SIndent2"><td class=SEntry><a href="#ZOO.Bounds.top" >top</a></td><td class=SDescription>{Number} Maximum vertical coordinate.</td></tr><tr class="SGroup SIndent1"><td class=SEntry><a href="#ZOO.Bounds.Functions" >Functions</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Bounds.ZOO.Bounds" >ZOO.<wbr>Bounds</a></td><td class=SDescription>Construct a new bounds object.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Bounds.clone" id=link14 onMouseOver="ShowTip(event, 'tt14', 'link14')" onMouseOut="HideTip('tt14')">clone</a></td><td class=SDescription>Create a cloned instance of this bounds.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Bounds.equals" id=link15 onMouseOver="ShowTip(event, 'tt15', 'link15')" onMouseOut="HideTip('tt15')">equals</a></td><td class=SDescription>Test a two bounds for equivalence.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Bounds.toString" id=link16 onMouseOver="ShowTip(event, 'tt16', 'link16')" onMouseOut="HideTip('tt16')">toString</a></td><td class=SDescription>{String} String representation of bounds object. </td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Bounds.toBBOX" id=link17 onMouseOver="ShowTip(event, 'tt17', 'link17')" onMouseOut="HideTip('tt17')">toBBOX</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Bounds.toGeometry" id=link18 onMouseOver="ShowTip(event, 'tt18', 'link18')" onMouseOut="HideTip('tt18')">toGeometry</a></td><td class=SDescription>Create a new polygon geometry based on this bounds.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Bounds.getWidth" id=link19 onMouseOver="ShowTip(event, 'tt19', 'link19')" onMouseOut="HideTip('tt19')">getWidth</a></td><td class=SDescription>{Float} The width of the bounds</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Bounds.getHeight" id=link20 onMouseOver="ShowTip(event, 'tt20', 'link20')" onMouseOut="HideTip('tt20')">getHeight</a></td><td class=SDescription>{Float} The height of the bounds (top minus bottom).</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Bounds.add" id=link21 onMouseOver="ShowTip(event, 'tt21', 'link21')" onMouseOut="HideTip('tt21')">add</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Bounds.extend" id=link22 onMouseOver="ShowTip(event, 'tt22', 'link22')" onMouseOut="HideTip('tt22')">extend</a></td><td class=SDescription>Extend the bounds to include the point, lonlat, or bounds specified. </td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Bounds.intersectsBounds" id=link23 onMouseOver="ShowTip(event, 'tt23', 'link23')" onMouseOut="HideTip('tt23')">intersectsBounds</a></td><td class=SDescription>Determine whether the target bounds intersects this bounds. </td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Bounds.containsBounds" id=link24 onMouseOver="ShowTip(event, 'tt24', 'link24')" onMouseOut="HideTip('tt24')">containsBounds</a></td><td class=SDescription>Determine whether the target bounds is contained within this bounds.</td></tr><tr class="SClass"><td class=SEntry><a href="#ZOO.Projection" >ZOO.<wbr>Projection</a></td><td class=SDescription>Class for coordinate transforms between coordinate systems. </td></tr><tr class="SGroup SIndent1"><td class=SEntry><a href="#ZOO.Projection.Properties" >Properties</a></td><td class=SDescription></td></tr><tr class="SProperty SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Projection.proj" >proj</a></td><td class=SDescription>{Object} Proj4js.Proj instance.</td></tr><tr class="SProperty SIndent2"><td class=SEntry><a href="#ZOO.Projection.projCode" >projCode</a></td><td class=SDescription>{String}</td></tr><tr class="SGroup SIndent1"><td class=SEntry><a href="#ZOO.Projection.Functions" >Functions</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Projection.ZOO.Projection" >ZOO.<wbr>Projection</a></td><td class=SDescription>This class offers several methods for interacting with a wrapped zoo-pro4js projection object.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Projection.getCode" id=link25 onMouseOver="ShowTip(event, 'tt25', 'link25')" onMouseOut="HideTip('tt25')">getCode</a></td><td class=SDescription>Get the string SRS code.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Projection.getUnits" id=link26 onMouseOver="ShowTip(event, 'tt26', 'link26')" onMouseOut="HideTip('tt26')">getUnits</a></td><td class=SDescription>Get the units string for the projection -- returns null if zoo-proj4js is not available.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Projection.toString" id=link27 onMouseOver="ShowTip(event, 'tt27', 'link27')" onMouseOut="HideTip('tt27')">toString</a></td><td class=SDescription>Convert projection to string (getCode wrapper).</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Projection.equals" id=link28 onMouseOver="ShowTip(event, 'tt28', 'link28')" onMouseOut="HideTip('tt28')">equals</a></td><td class=SDescription>Test equality of two projection instances. </td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Projection.destroy" id=link29 onMouseOver="ShowTip(event, 'tt29', 'link29')" onMouseOut="HideTip('tt29')">destroy</a></td><td class=SDescription>Destroy projection object.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Projection.transform" id=link30 onMouseOver="ShowTip(event, 'tt30', 'link30')" onMouseOut="HideTip('tt30')">transform</a></td><td class=SDescription>Transform a point coordinate from one projection to another. </td></tr><tr class="SClass"><td class=SEntry><a href="#ZOO.Format" >ZOO.<wbr>Format</a></td><td class=SDescription>Base class for format reading/writing a variety of formats. </td></tr><tr class="SGroup SIndent1"><td class=SEntry><a href="#ZOO.Format.Properties" >Properties</a></td><td class=SDescription></td></tr><tr class="SProperty SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.options" >options</a></td><td class=SDescription>{Object} A reference to options passed to the constructor.</td></tr><tr class="SProperty SIndent2"><td class=SEntry><a href="#ZOO.Format.externalProjection" >externalProjection</a></td><td class=SDescription>{<a href="#ZOO.Projection" class=LClass id=link31 onMouseOver="ShowTip(event, 'tt31', 'link31')" onMouseOut="HideTip('tt31')">ZOO.Projection</a>} When passed a externalProjection and internalProjection, the format will reproject the geometries it reads or writes. </td></tr><tr class="SProperty SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.internalProjection" >internalProjection</a></td><td class=SDescription>{<a href="#ZOO.Projection" class=LClass id=link32 onMouseOver="ShowTip(event, 'tt31', 'link32')" onMouseOut="HideTip('tt31')">ZOO.Projection</a>} When passed a externalProjection and internalProjection, the format will reproject the geometries it reads or writes. </td></tr><tr class="SProperty SIndent2"><td class=SEntry><a href="#ZOO.Format.data" >data</a></td><td class=SDescription>{Object} When <a href="#ZOO.Format.keepData" class=LProperty id=link33 onMouseOver="ShowTip(event, 'tt32', 'link33')" onMouseOut="HideTip('tt32')">keepData</a> is true, this is the parsed string sent to <a href="#ZOO.Format.read" class=LFunction id=link34 onMouseOver="ShowTip(event, 'tt33', 'link34')" onMouseOut="HideTip('tt33')">read</a>.</td></tr><tr class="SProperty SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.keepData" >keepData</a></td><td class=SDescription>{Object} Maintain a reference (<a href="#ZOO.Format.data" class=LProperty id=link35 onMouseOver="ShowTip(event, 'tt34', 'link35')" onMouseOut="HideTip('tt34')">data</a>) to the most recently read data. </td></tr><tr class="SGroup SIndent1"><td class=SEntry><a href="#ZOO.Format.Functions" >Functions</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.ZOO.Format" >ZOO.<wbr>Format</a></td><td class=SDescription>Instances of this class are not useful. </td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.destroy" id=link36 onMouseOver="ShowTip(event, 'tt35', 'link36')" onMouseOut="HideTip('tt35')">destroy</a></td><td class=SDescription>Clean up.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.read" id=link37 onMouseOver="ShowTip(event, 'tt33', 'link37')" onMouseOut="HideTip('tt33')">read</a></td><td class=SDescription>Read data from a string, and return an object whose type depends on the subclass.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.write" id=link38 onMouseOver="ShowTip(event, 'tt36', 'link38')" onMouseOut="HideTip('tt36')">write</a></td><td class=SDescription>Accept an object, and return a string.</td></tr><tr class="SClass"><td class=SEntry><a href="#ZOO.Format.WKT" >ZOO.<wbr>Format.WKT</a></td><td class=SDescription>Class for reading and writing Well-Known Text. </td></tr><tr class="SGroup SIndent1"><td class=SEntry><a href="#ZOO.Format.WKT.Functions_and_Properties" >Functions and Properties</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.WKT.ZOO.Format.WKT" >ZOO.<wbr>Format.WKT</a></td><td class=SDescription>Create a new parser for WKT</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.WKT.read" id=link39 onMouseOver="ShowTip(event, 'tt37', 'link39')" onMouseOut="HideTip('tt37')">read</a></td><td class=SDescription>Deserialize a WKT string and return a vector feature or an array of vector features. </td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.WKT.write" id=link40 onMouseOver="ShowTip(event, 'tt38', 'link40')" onMouseOut="HideTip('tt38')">write</a></td><td class=SDescription>Serialize a feature or array of features into a WKT string.</td></tr><tr class="SProperty SIndent2"><td class=SEntry><a href="#ZOO.Format.WKT.extract" >extract</a></td><td class=SDescription>Object with properties corresponding to the geometry types. </td></tr><tr class="SProperty SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.WKT.parse" >parse</a></td><td class=SDescription>Object with properties corresponding to the geometry types. </td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.WKT.parse.point" >parse.<wbr>point</a></td><td class=SDescription>Return point feature given a point WKT fragment.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.WKT.parse.multipoint" >parse.<wbr>multipoint</a></td><td class=SDescription>Return a multipoint feature given a multipoint WKT fragment.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.WKT.parse.linestring" >parse.<wbr>linestring</a></td><td class=SDescription>Return a linestring feature given a linestring WKT fragment.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.WKT.parse.multilinestring" >parse.<wbr>multilinestring</a></td><td class=SDescription>Return a multilinestring feature given a multilinestring WKT fragment.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.WKT.parse.polygon" >parse.<wbr>polygon</a></td><td class=SDescription>Return a polygon feature given a polygon WKT fragment.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.WKT.parse.multipolygon" >parse.<wbr>multipolygon</a></td><td class=SDescription>Return a multipolygon feature given a multipolygon WKT fragment.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.WKT.parse.geometrycollection" >parse.<wbr>geometrycollection</a></td><td class=SDescription>Return an array of features given a geometrycollection WKT fragment.</td></tr><tr class="SClass"><td class=SEntry><a href="#ZOO.Format.JSON" >ZOO.<wbr>Format.JSON</a></td><td class=SDescription>A parser to read/write JSON safely. </td></tr><tr class="SGroup SIndent1"><td class=SEntry><a href="#ZOO.Format.JSON.Properties" >Properties</a></td><td class=SDescription></td></tr><tr class="SProperty SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.JSON.indent" >indent</a></td><td class=SDescription>{String} For &ldquo;pretty&rdquo; printing, the indent string will be used once for each indentation level.</td></tr><tr class="SProperty SIndent2"><td class=SEntry><a href="#ZOO.Format.JSON.space" >space</a></td><td class=SDescription>{String} For &ldquo;pretty&rdquo; printing, the space string will be used after the &ldquo;:&rdquo; separating a name/value pair.</td></tr><tr class="SProperty SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.JSON.newline" >newline</a></td><td class=SDescription>{String} For &ldquo;pretty&rdquo; printing, the newline string will be used at the end of each name/value pair or array item.</td></tr><tr class="SProperty SIndent2"><td class=SEntry><a href="#ZOO.Format.JSON.level" >level</a></td><td class=SDescription>{Integer} For &ldquo;pretty&rdquo; printing, this is incremented/decremented during serialization.</td></tr><tr class="SProperty SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.JSON.pretty" >pretty</a></td><td class=SDescription>{Boolean} Serialize with extra whitespace for structure. </td></tr><tr class="SGroup SIndent1"><td class=SEntry><a href="#ZOO.Format.JSON.Functions" >Functions</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.JSON.ZOO.Format.JSON" >ZOO.<wbr>Format.JSON</a></td><td class=SDescription>Create a new parser for JSON.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.JSON.read" id=link41 onMouseOver="ShowTip(event, 'tt39', 'link41')" onMouseOut="HideTip('tt39')">read</a></td><td class=SDescription>Deserialize a json string.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.JSON.write" id=link42 onMouseOver="ShowTip(event, 'tt40', 'link42')" onMouseOut="HideTip('tt40')">write</a></td><td class=SDescription>Serialize an object into a JSON string.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.JSON.writeIndent" id=link43 onMouseOver="ShowTip(event, 'tt41', 'link43')" onMouseOut="HideTip('tt41')">writeIndent</a></td><td class=SDescription>Output an indentation string depending on the indentation level.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.JSON.writeNewline" id=link44 onMouseOver="ShowTip(event, 'tt42', 'link44')" onMouseOut="HideTip('tt42')">writeNewline</a></td><td class=SDescription>Output a string representing a newline if in pretty printing mode.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.JSON.writeSpace" id=link45 onMouseOver="ShowTip(event, 'tt43', 'link45')" onMouseOut="HideTip('tt43')">writeSpace</a></td><td class=SDescription>Output a string representing a space if in pretty printing mode.</td></tr><tr class="SGroup SIndent1"><td class=SEntry><a href="#ZOO.Format.JSON.Properties" >Properties</a></td><td class=SDescription></td></tr><tr class="SProperty SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.JSON.serialize" >serialize</a></td><td class=SDescription>Object with properties corresponding to the serializable data types. </td></tr><tr class="SGroup SIndent1"><td class=SEntry><a href="#ZOO.Format.JSON.Functions" >Functions</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.JSON.serialize.object" >serialize.<wbr>object</a></td><td class=SDescription>Transform an object into a JSON string.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.JSON.serialize.array" >serialize.<wbr>array</a></td><td class=SDescription>Transform an array into a JSON string.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.JSON.serialize.string" >serialize.<wbr>string</a></td><td class=SDescription>Transform a string into a JSON string.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.JSON.serialize.number" >serialize.<wbr>number</a></td><td class=SDescription>Transform a number into a JSON string.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.JSON.serialize.boolean" >serialize.<wbr>boolean</a></td><td class=SDescription>Transform a boolean into a JSON string.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.JSON.serialize.date" >serialize.date</a></td><td class=SDescription>Transform a date into a JSON string.</td></tr><tr class="SClass"><td class=SEntry><a href="#ZOO.Format.GeoJSON" >ZOO.<wbr>Format.<wbr>GeoJSON</a></td><td class=SDescription>Read and write GeoJSON. </td></tr><tr class="SGroup SIndent1"><td class=SEntry><a href="#ZOO.Format.GeoJSON.Functions" >Functions</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.GeoJSON.ZOO.Format.GeoJSON" >ZOO.<wbr>Format.<wbr>GeoJSON</a></td><td class=SDescription>Create a new parser for GeoJSON.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.GeoJSON.read" id=link46 onMouseOver="ShowTip(event, 'tt44', 'link46')" onMouseOut="HideTip('tt44')">read</a></td><td class=SDescription>Deserialize a GeoJSON string.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.GeoJSON.isValidType" id=link47 onMouseOver="ShowTip(event, 'tt45', 'link47')" onMouseOut="HideTip('tt45')">isValidType</a></td><td class=SDescription>Check if a GeoJSON object is a valid representative of the given type.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.GeoJSON.parseFeature" id=link48 onMouseOver="ShowTip(event, 'tt46', 'link48')" onMouseOut="HideTip('tt46')">parseFeature</a></td><td class=SDescription>Convert a feature object from GeoJSON into an <a href="#ZOO.Feature" class=LClass id=link49 onMouseOver="ShowTip(event, 'tt47', 'link49')" onMouseOut="HideTip('tt47')">ZOO.Feature</a>.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.GeoJSON.parseGeometry" id=link50 onMouseOver="ShowTip(event, 'tt48', 'link50')" onMouseOut="HideTip('tt48')">parseGeometry</a></td><td class=SDescription>Convert a geometry object from GeoJSON into an <a href="#ZOO.Geometry" class=LClass id=link51 onMouseOver="ShowTip(event, 'tt49', 'link51')" onMouseOut="HideTip('tt49')">ZOO.Geometry</a>.</td></tr><tr class="SGroup SIndent1"><td class=SEntry><a href="#ZOO.Format.GeoJSON.Properties" >Properties</a></td><td class=SDescription></td></tr><tr class="SProperty SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.GeoJSON.parseCoords" >parseCoords</a></td><td class=SDescription>Object with properties corresponding to the GeoJSON geometry types. </td></tr><tr class="SGroup SIndent1"><td class=SEntry><a href="#ZOO.Format.GeoJSON.Functions" >Functions</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.GeoJSON.parseCoords.point" >parseCoords.<wbr>point</a></td><td class=SDescription>Convert a coordinate array from GeoJSON into an <a href="#ZOO.Geometry.Point" class=LClass id=link52 onMouseOver="ShowTip(event, 'tt50', 'link52')" onMouseOut="HideTip('tt50')">ZOO.Geometry.Point</a>.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.GeoJSON.parseCoords.multipoint" >parseCoords.<wbr>multipoint</a></td><td class=SDescription>Convert a coordinate array from GeoJSON into an <a href="#ZOO.Geometry.MultiPoint" class=LClass id=link53 onMouseOver="ShowTip(event, 'tt51', 'link53')" onMouseOut="HideTip('tt51')">ZOO.Geometry.MultiPoint</a>.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.GeoJSON.parseCoords.linestring" >parseCoords.<wbr>linestring</a></td><td class=SDescription>Convert a coordinate array from GeoJSON into an <a href="#ZOO.Geometry.LineString" class=LClass id=link54 onMouseOver="ShowTip(event, 'tt52', 'link54')" onMouseOut="HideTip('tt52')">ZOO.Geometry.LineString</a>.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.GeoJSON.parseCoords.multilinestring" >parseCoords.<wbr>multilinestring</a></td><td class=SDescription>Convert a coordinate array from GeoJSON into an <a href="#ZOO.Geometry.MultiLineString" class=LClass id=link55 onMouseOver="ShowTip(event, 'tt53', 'link55')" onMouseOut="HideTip('tt53')">ZOO.Geometry.MultiLineString</a>.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.GeoJSON.parseCoords.polygon" >parseCoords.<wbr>polygon</a></td><td class=SDescription>Convert a coordinate array from GeoJSON into an <a href="#ZOO.Geometry.Polygon" class=LClass id=link56 onMouseOver="ShowTip(event, 'tt54', 'link56')" onMouseOut="HideTip('tt54')">ZOO.Geometry.Polygon</a>.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.GeoJSON.parseCoords.multipolygon" >parseCoords.<wbr>multipolygon</a></td><td class=SDescription>Convert a coordinate array from GeoJSON into an <a href="#ZOO.Geometry.MultiPolygon" class=LClass id=link57 onMouseOver="ShowTip(event, 'tt55', 'link57')" onMouseOut="HideTip('tt55')">ZOO.Geometry.MultiPolygon</a>.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.GeoJSON.parseCoords.box" >parseCoords.box</a></td><td class=SDescription>Convert a coordinate array from GeoJSON into an <a href="#ZOO.Geometry.Polygon" class=LClass id=link58 onMouseOver="ShowTip(event, 'tt54', 'link58')" onMouseOut="HideTip('tt54')">ZOO.Geometry.Polygon</a>.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.GeoJSON.write" id=link59 onMouseOver="ShowTip(event, 'tt56', 'link59')" onMouseOut="HideTip('tt56')">write</a></td><td class=SDescription>Serialize a feature, geometry, array of features into a GeoJSON string.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.GeoJSON.createCRSObject" id=link60 onMouseOver="ShowTip(event, 'tt57', 'link60')" onMouseOut="HideTip('tt57')">createCRSObject</a></td><td class=SDescription>Create the CRS object for an object.</td></tr><tr class="SGroup SIndent1"><td class=SEntry><a href="#ZOO.Format.GeoJSON.Properties" >Properties</a></td><td class=SDescription></td></tr><tr class="SProperty SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.GeoJSON.extract" >extract</a></td><td class=SDescription>Object with properties corresponding to the GeoJSON types. </td></tr><tr class="SGroup SIndent1"><td class=SEntry><a href="#ZOO.Format.GeoJSON.Functions" >Functions</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.GeoJSON.extract.feature" >extract.<wbr>feature</a></td><td class=SDescription>Return a partial GeoJSON object representing a single feature.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.GeoJSON.extract.geometry" >extract.<wbr>geometry</a></td><td class=SDescription>Return a GeoJSON object representing a single geometry.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.GeoJSON.extract.point" >extract.<wbr>point</a></td><td class=SDescription>Return an array of coordinates from a point.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.GeoJSON.extract.multipoint" >extract.<wbr>multipoint</a></td><td class=SDescription>Return an array of coordinates from a multipoint.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.GeoJSON.extract.linestring" >extract.<wbr>linestring</a></td><td class=SDescription>Return an array of coordinate arrays from a linestring.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.GeoJSON.extract.multilinestring" >extract.<wbr>multilinestring</a></td><td class=SDescription>Return an array of linestring arrays from a linestring.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.GeoJSON.extract.polygon" >extract.<wbr>polygon</a></td><td class=SDescription>Return an array of linear ring arrays from a polygon.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.GeoJSON.extract.multipolygon" >extract.<wbr>multipolygon</a></td><td class=SDescription>Return an array of polygon arrays from a multipolygon.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.GeoJSON.extract.collection" >extract.<wbr>collection</a></td><td class=SDescription>Return an array of geometries from a geometry collection.</td></tr><tr class="SClass"><td class=SEntry><a href="#ZOO.Format.KML" >ZOO.<wbr>Format.KML</a></td><td class=SDescription>Read/Write KML. </td></tr><tr class="SGroup SIndent1"><td class=SEntry><a href="#ZOO.Format.KML.Properties_and_Functions" >Properties and Functions</a></td><td class=SDescription></td></tr><tr class="SProperty SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.KML.kmlns" >kmlns</a></td><td class=SDescription>{String} KML Namespace to use. </td></tr><tr class="SProperty SIndent2"><td class=SEntry><a href="#ZOO.Format.KML.foldersName" >foldersName</a></td><td class=SDescription>{String} Name of the folders. </td></tr><tr class="SProperty SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.KML.foldersDesc" >foldersDesc</a></td><td class=SDescription>{String} Description of the folders. </td></tr><tr class="SProperty SIndent2"><td class=SEntry><a href="#ZOO.Format.KML.placemarksDesc" >placemarksDesc</a></td><td class=SDescription>{String} Name of the placemarks. </td></tr><tr class="SProperty SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.KML.extractAttributes" >extractAttributes</a></td><td class=SDescription>{Boolean} Extract attributes from KML. </td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.KML.ZOO.Format.KML" >ZOO.<wbr>Format.KML</a></td><td class=SDescription>Create a new parser for KML.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.KML.parseFeatures" id=link61 onMouseOver="ShowTip(event, 'tt58', 'link61')" onMouseOut="HideTip('tt58')">parseFeatures</a></td><td class=SDescription>Loop through all Placemark nodes and parse them. </td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.KML.parseFeature" id=link62 onMouseOver="ShowTip(event, 'tt59', 'link62')" onMouseOut="HideTip('tt59')">parseFeature</a></td><td class=SDescription>This function is the core of the KML parsing code in ZOO. </td></tr><tr class="SProperty SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.KML.parseGeometry" >parseGeometry</a></td><td class=SDescription>Properties of this object are the functions that parse geometries based on their type.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.KML.parseGeometry.point" >parseGeometry.<wbr>point</a></td><td class=SDescription>Given a KML node representing a point geometry, create a ZOO point geometry.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.KML.parseGeometry.linestring" >parseGeometry.<wbr>linestring</a></td><td class=SDescription>Given a KML node representing a linestring geometry, create a ZOO linestring geometry.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.KML.parseGeometry.polygon" >parseGeometry.<wbr>polygon</a></td><td class=SDescription>Given a KML node representing a polygon geometry, create a ZOO polygon geometry.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.KML.parseGeometry.multigeometry" >parseGeometry.<wbr>multigeometry</a></td><td class=SDescription>Given a KML node representing a multigeometry, create a ZOO geometry collection.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.KML.parseAttributes" id=link63 onMouseOver="ShowTip(event, 'tt60', 'link63')" onMouseOut="HideTip('tt60')">parseAttributes</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.KML.parseExtendedData" id=link64 onMouseOver="ShowTip(event, 'tt61', 'link64')" onMouseOut="HideTip('tt61')">parseExtendedData</a></td><td class=SDescription>Parse ExtendedData from KML. </td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.KML.write" id=link65 onMouseOver="ShowTip(event, 'tt62', 'link65')" onMouseOut="HideTip('tt62')">write</a></td><td class=SDescription>Accept Feature Collection, and return a string.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.KML.createPlacemark" id=link66 onMouseOver="ShowTip(event, 'tt63', 'link66')" onMouseOut="HideTip('tt63')">createPlacemark</a></td><td class=SDescription>Creates and returns a KML placemark node representing the given feature.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.KML.buildGeometryNode" id=link67 onMouseOver="ShowTip(event, 'tt64', 'link67')" onMouseOut="HideTip('tt64')">buildGeometryNode</a></td><td class=SDescription>Builds and returns a KML geometry node with the given geometry.</td></tr><tr class="SProperty SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.KML.buildGeometry" >buildGeometry</a></td><td class=SDescription>Object containing methods to do the actual geometry node building based on geometry type.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.KML.buildGeometry.point" >buildGeometry.<wbr>point</a></td><td class=SDescription>Given a ZOO point geometry, create a KML point.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.KML.buildGeometry.multipoint" >buildGeometry.<wbr>multipoint</a></td><td class=SDescription>Given a ZOO multipoint geometry, create a KML GeometryCollection.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.KML.buildGeometry.linestring" >buildGeometry.<wbr>linestring</a></td><td class=SDescription>Given a ZOO linestring geometry, create a KML linestring.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.KML.buildGeometry.multilinestring" >buildGeometry.<wbr>multilinestring</a></td><td class=SDescription>Given a ZOO multilinestring geometry, create a KML GeometryCollection.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.KML.buildGeometry.linearring" >buildGeometry.<wbr>linearring</a></td><td class=SDescription>Given a ZOO linearring geometry, create a KML linearring.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.KML.buildGeometry.polygon" >buildGeometry.<wbr>polygon</a></td><td class=SDescription>Given a ZOO polygon geometry, create a KML polygon.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.KML.buildGeometry.multipolygon" >buildGeometry.<wbr>multipolygon</a></td><td class=SDescription>Given a ZOO multipolygon geometry, create a KML GeometryCollection.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.KML.buildGeometry.collection" >buildGeometry.<wbr>collection</a></td><td class=SDescription>Given a ZOO geometry collection, create a KML MultiGeometry.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.KML.buildCoordinatesNode" id=link68 onMouseOver="ShowTip(event, 'tt65', 'link68')" onMouseOut="HideTip('tt65')">buildCoordinatesNode</a></td><td class=SDescription>Builds and returns the KML coordinates node with the given geometry &lt;coordinates&gt;...&lt;/coordinates&gt;</td></tr><tr class="SClass"><td class=SEntry><a href="#ZOO.Format.GML" >ZOO.<wbr>Format.GML</a></td><td class=SDescription>Read/Write GML. </td></tr><tr class="SGroup SIndent1"><td class=SEntry><a href="#ZOO.Format.GML.Properties_and_Functions" >Properties and Functions</a></td><td class=SDescription></td></tr><tr class="SProperty SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.GML.schemaLocation" >schemaLocation</a></td><td class=SDescription>{String} Schema location for a particular minor version.</td></tr><tr class="SProperty SIndent2"><td class=SEntry><a href="#ZOO.Format.GML.namespaces" >namespaces</a></td><td class=SDescription>{Object} Mapping of namespace aliases to namespace URIs.</td></tr><tr class="SProperty SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.GML.defaultPrefix" >defaultPrefix</a></td><td class=SDescription></td></tr><tr class="SProperty SIndent2"><td class=SEntry><a href="#ZOO.Format.GML.collectionName" >collectionName</a></td><td class=SDescription>{String} Name of featureCollection element.</td></tr><tr class="SProperty SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.GML.featureName" >featureName</a></td><td class=SDescription>{String} Element name for features. </td></tr><tr class="SProperty SIndent2"><td class=SEntry><a href="#ZOO.Format.GML.geometryName" >geometryName</a></td><td class=SDescription>{String} Name of geometry element. </td></tr><tr class="SProperty SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.GML.xy" >xy</a></td><td class=SDescription>{Boolean} Order of the GML coordinate true:(x,y) or false:(y,x) Changing is not recommended, a new Format should be instantiated.</td></tr><tr class="SProperty SIndent2"><td class=SEntry><a href="#ZOO.Format.GML.extractAttributes" >extractAttributes</a></td><td class=SDescription>{Boolean} Could we extract attributes</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.GML.ZOO.Format.GML" >ZOO.<wbr>Format.GML</a></td><td class=SDescription>Create a new parser for GML.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.GML.read" id=link69 onMouseOver="ShowTip(event, 'tt66', 'link69')" onMouseOut="HideTip('tt66')">read</a></td><td class=SDescription>Read data from a string, and return a list of features.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.GML.parseFeature" id=link70 onMouseOver="ShowTip(event, 'tt67', 'link70')" onMouseOut="HideTip('tt67')">parseFeature</a></td><td class=SDescription>This function is the core of the GML parsing code in ZOO. </td></tr><tr class="SProperty SIndent2"><td class=SEntry><a href="#ZOO.Format.GML.parseGeometry" >parseGeometry</a></td><td class=SDescription>Properties of this object are the functions that parse geometries based on their type.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.GML.parseGeometry.point" >parseGeometry.<wbr>point</a></td><td class=SDescription>Given a GML node representing a point geometry, create a ZOO point geometry.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.GML.parseGeometry.multipoint" >parseGeometry.<wbr>multipoint</a></td><td class=SDescription>Given a GML node representing a multipoint geometry, create a ZOO multipoint geometry.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.GML.parseGeometry.linestring" >parseGeometry.<wbr>linestring</a></td><td class=SDescription>Given a GML node representing a linestring geometry, create a ZOO linestring geometry.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.GML.parseGeometry.multilinestring" >parseGeometry.<wbr>multilinestring</a></td><td class=SDescription>Given a GML node representing a multilinestring geometry, create a ZOO multilinestring geometry.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.GML.parseGeometry.polygon" >parseGeometry.<wbr>polygon</a></td><td class=SDescription>Given a GML node representing a polygon geometry, create a ZOO polygon geometry.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.GML.parseGeometry.multipolygon" >parseGeometry.<wbr>multipolygon</a></td><td class=SDescription>Given a GML node representing a multipolygon geometry, create a ZOO multipolygon geometry.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.GML.parseGeometry.polygon" >parseGeometry.<wbr>polygon</a></td><td class=SDescription>Given a GML node representing an envelope, create a ZOO polygon geometry.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.GML.parseAttributes" id=link71 onMouseOver="ShowTip(event, 'tt68', 'link71')" onMouseOut="HideTip('tt68')">parseAttributes</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.GML.write" id=link72 onMouseOver="ShowTip(event, 'tt69', 'link72')" onMouseOut="HideTip('tt69')">write</a></td><td class=SDescription>Generate a GML document string given a list of features.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.GML.createFeature" id=link73 onMouseOver="ShowTip(event, 'tt70', 'link73')" onMouseOut="HideTip('tt70')">createFeature</a></td><td class=SDescription>Accept an ZOO.Feature, and build a GML node for it.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.GML.buildGeometryNode" id=link74 onMouseOver="ShowTip(event, 'tt71', 'link74')" onMouseOut="HideTip('tt71')">buildGeometryNode</a></td><td class=SDescription></td></tr><tr class="SProperty SIndent2"><td class=SEntry><a href="#ZOO.Format.GML.buildGeometry" >buildGeometry</a></td><td class=SDescription>Object containing methods to do the actual geometry node building based on geometry type.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.GML.buildGeometry.point" >buildGeometry.<wbr>point</a></td><td class=SDescription>Given a ZOO point geometry, create a GML point.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.GML.buildGeometry.multipoint" >buildGeometry.<wbr>multipoint</a></td><td class=SDescription>Given a ZOO multipoint geometry, create a GML multipoint.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.GML.buildGeometry.linestring" >buildGeometry.<wbr>linestring</a></td><td class=SDescription>Given a ZOO linestring geometry, create a GML linestring.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.GML.buildGeometry.multilinestring" >buildGeometry.<wbr>multilinestring</a></td><td class=SDescription>Given a ZOO multilinestring geometry, create a GML multilinestring.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.GML.buildGeometry.linearring" >buildGeometry.<wbr>linearring</a></td><td class=SDescription>Given a ZOO linearring geometry, create a GML linearring.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.GML.buildGeometry.polygon" >buildGeometry.<wbr>polygon</a></td><td class=SDescription>Given an ZOO polygon geometry, create a GML polygon.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.GML.buildGeometry.multipolygon" >buildGeometry.<wbr>multipolygon</a></td><td class=SDescription>Given a ZOO multipolygon geometry, create a GML multipolygon.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.GML.buildCoordinatesNode" id=link75 onMouseOver="ShowTip(event, 'tt72', 'link75')" onMouseOut="HideTip('tt72')">buildCoordinatesNode</a></td><td class=SDescription>builds the coordinates XmlNode</td></tr><tr class="SClass"><td class=SEntry><a href="#ZOO.Format.WPS" >ZOO.<wbr>Format.WPS</a></td><td class=SDescription>Read/Write WPS. </td></tr><tr class="SGroup SIndent1"><td class=SEntry><a href="#ZOO.Format.WPS.Properties_and_Functions" >Properties and Functions</a></td><td class=SDescription></td></tr><tr class="SProperty SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.WPS.schemaLocation" >schemaLocation</a></td><td class=SDescription>{String} Schema location for a particular minor version.</td></tr><tr class="SProperty SIndent2"><td class=SEntry><a href="#ZOO.Format.WPS.namespaces" >namespaces</a></td><td class=SDescription>{Object} Mapping of namespace aliases to namespace URIs.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.WPS.read" id=link76 onMouseOver="ShowTip(event, 'tt73', 'link76')" onMouseOut="HideTip('tt73')">read</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.WPS.parseExecuteResponse" id=link77 onMouseOver="ShowTip(event, 'tt74', 'link77')" onMouseOut="HideTip('tt74')">parseExecuteResponse</a></td><td class=SDescription></td></tr><tr class="SProperty SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.WPS.parseData" >parseData</a></td><td class=SDescription>Object containing methods to analyse data response.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.WPS.parseData.complexdata" >parseData.<wbr>complexdata</a></td><td class=SDescription>Given an Object representing the WPS complex data response.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Format.WPS.parseData.literaldata" >parseData.<wbr>literaldata</a></td><td class=SDescription>Given an Object representing the WPS literal data response.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Format.WPS.parseData.reference" >parseData.<wbr>reference</a></td><td class=SDescription>Given an Object representing the WPS reference response.</td></tr><tr class="SClass"><td class=SEntry><a href="#ZOO.Feature" >ZOO.<wbr>Feature</a></td><td class=SDescription>Vector features use the ZOO.Geometry classes as geometry description. </td></tr><tr class="SGroup SIndent1"><td class=SEntry><a href="#ZOO.Feature.Properties" >Properties</a></td><td class=SDescription></td></tr><tr class="SProperty SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Feature.fid" >fid</a></td><td class=SDescription>{String}</td></tr><tr class="SProperty SIndent2"><td class=SEntry><a href="#ZOO.Feature.geometry" >geometry</a></td><td class=SDescription>{<a href="#ZOO.Geometry" class=LClass id=link78 onMouseOver="ShowTip(event, 'tt49', 'link78')" onMouseOut="HideTip('tt49')">ZOO.Geometry</a>}</td></tr><tr class="SProperty SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Feature.attributes" >attributes</a></td><td class=SDescription>{Object} This object holds arbitrary properties that describe the feature.</td></tr><tr class="SProperty SIndent2"><td class=SEntry><a href="#ZOO.Feature.bounds" >bounds</a></td><td class=SDescription>{<a href="#ZOO.Bounds" class=LClass id=link79 onMouseOver="ShowTip(event, 'tt75', 'link79')" onMouseOut="HideTip('tt75')">ZOO.Bounds</a>} The box bounding that feature&rsquo;s geometry, that property can be set by an <a href="#ZOO.Format" class=LClass id=link80 onMouseOver="ShowTip(event, 'tt76', 'link80')" onMouseOut="HideTip('tt76')">ZOO.Format</a> object when deserializing the feature, so in most cases it represents an information set by the server.</td></tr><tr class="SGroup SIndent1"><td class=SEntry><a href="#ZOO.Feature.Functions" >Functions</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Feature.ZOO.Feature" >ZOO.<wbr>Feature</a></td><td class=SDescription>Create a vector feature.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Feature.destroy" id=link81 onMouseOver="ShowTip(event, 'tt77', 'link81')" onMouseOut="HideTip('tt77')">destroy</a></td><td class=SDescription>nullify references to prevent circular references and memory leaks</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Feature.clone" id=link82 onMouseOver="ShowTip(event, 'tt78', 'link82')" onMouseOut="HideTip('tt78')">clone</a></td><td class=SDescription>Create a clone of this vector feature. </td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Feature.move" id=link83 onMouseOver="ShowTip(event, 'tt79', 'link83')" onMouseOut="HideTip('tt79')">move</a></td><td class=SDescription>Moves the feature and redraws it at its new location</td></tr><tr class="SClass"><td class=SEntry><a href="#ZOO.Geometry" >ZOO.<wbr>Geometry</a></td><td class=SDescription>A Geometry is a description of a geographic object. </td></tr><tr class="SGroup SIndent1"><td class=SEntry><a href="#ZOO.Geometry.Properties" >Properties</a></td><td class=SDescription></td></tr><tr class="SProperty SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Geometry.id" >id</a></td><td class=SDescription>{String} A unique identifier for this geometry.</td></tr><tr class="SProperty SIndent2"><td class=SEntry><a href="#ZOO.Geometry.parent" >parent</a></td><td class=SDescription>{<a href="#ZOO.Geometry.ZOO.Geometry" class=LFunction id=link84 onMouseOver="ShowTip(event, 'tt80', 'link84')" onMouseOut="HideTip('tt80')">ZOO.Geometry</a>}This is set when a Geometry is added as component of another geometry</td></tr><tr class="SProperty SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Geometry.bounds" >bounds</a></td><td class=SDescription>{<a href="#ZOO.Bounds" class=LClass id=link85 onMouseOver="ShowTip(event, 'tt75', 'link85')" onMouseOut="HideTip('tt75')">ZOO.Bounds</a>} The bounds of this geometry</td></tr><tr class="SGroup SIndent1"><td class=SEntry><a href="#ZOO.Geometry.Functions" >Functions</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Geometry.ZOO.Geometry" >ZOO.<wbr>Geometry</a></td><td class=SDescription>Creates a geometry object.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Geometry.destroy" id=link86 onMouseOver="ShowTip(event, 'tt81', 'link86')" onMouseOut="HideTip('tt81')">destroy</a></td><td class=SDescription>Destroy this geometry.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Geometry.clone" id=link87 onMouseOver="ShowTip(event, 'tt82', 'link87')" onMouseOut="HideTip('tt82')">clone</a></td><td class=SDescription>Create a clone of this geometry. </td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Geometry.extendBounds" id=link88 onMouseOver="ShowTip(event, 'tt83', 'link88')" onMouseOut="HideTip('tt83')">extendBounds</a></td><td class=SDescription>Extend the existing bounds to include the new bounds. </td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Geometry.clearBounds" id=link89 onMouseOver="ShowTip(event, 'tt84', 'link89')" onMouseOut="HideTip('tt84')">clearBounds</a></td><td class=SDescription>Nullify this components bounds and that of its parent as well.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Geometry.getBounds" id=link90 onMouseOver="ShowTip(event, 'tt85', 'link90')" onMouseOut="HideTip('tt85')">getBounds</a></td><td class=SDescription>Get the bounds for this Geometry. </td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Geometry.calculateBounds" id=link91 onMouseOver="ShowTip(event, 'tt86', 'link91')" onMouseOut="HideTip('tt86')">calculateBounds</a></td><td class=SDescription>Recalculate the bounds for the geometry.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Geometry.toString" id=link92 onMouseOver="ShowTip(event, 'tt87', 'link92')" onMouseOut="HideTip('tt87')">toString</a></td><td class=SDescription>Returns the Well-Known Text representation of a geometry</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Geometry.ZOO.Geometry.fromWKT" id=link93 onMouseOver="ShowTip(event, 'tt88', 'link93')" onMouseOut="HideTip('tt88')">ZOO.<wbr>Geometry.<wbr>fromWKT</a></td><td class=SDescription>Generate a geometry given a Well-Known Text string.</td></tr><tr class="SClass"><td class=SEntry><a href="#ZOO.Geometry.Collection" >ZOO.<wbr>Geometry.<wbr>Collection</a></td><td class=SDescription>A Collection is exactly what it sounds like: A collection of different Geometries. </td></tr><tr class="SGroup SIndent1"><td class=SEntry><a href="#ZOO.Geometry.Collection.Properties" >Properties</a></td><td class=SDescription></td></tr><tr class="SProperty SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Geometry.Collection.components" >components</a></td><td class=SDescription>{Array(<a href="#ZOO.Geometry" class=LClass id=link94 onMouseOver="ShowTip(event, 'tt49', 'link94')" onMouseOut="HideTip('tt49')">ZOO.Geometry</a>)} The component parts of this geometry</td></tr><tr class="SProperty SIndent2"><td class=SEntry><a href="#ZOO.Geometry.Collection.componentTypes" >componentTypes</a></td><td class=SDescription>{Array(String)} An array of class names representing the types of components that the collection can include. </td></tr><tr class="SGroup SIndent1"><td class=SEntry><a href="#ZOO.Geometry.Collection.Functions" >Functions</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Geometry.Collection.ZOO.Geometry.Collection" >ZOO.<wbr>Geometry.<wbr>Collection</a></td><td class=SDescription>Creates a Geometry Collection -- a list of geoms.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Geometry.Collection.destroy" id=link95 onMouseOver="ShowTip(event, 'tt89', 'link95')" onMouseOut="HideTip('tt89')">destroy</a></td><td class=SDescription>Destroy this geometry.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Geometry.Collection.clone" id=link96 onMouseOver="ShowTip(event, 'tt90', 'link96')" onMouseOut="HideTip('tt90')">clone</a></td><td class=SDescription>Clone this geometry.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Geometry.Collection.getComponentsString" id=link97 onMouseOver="ShowTip(event, 'tt91', 'link97')" onMouseOut="HideTip('tt91')">getComponentsString</a></td><td class=SDescription>Get a string representing the components for this collection</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Geometry.Collection.calculateBounds" id=link98 onMouseOver="ShowTip(event, 'tt92', 'link98')" onMouseOut="HideTip('tt92')">calculateBounds</a></td><td class=SDescription>Recalculate the bounds by iterating through the components and calling calling extendBounds() on each item.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Geometry.Collection.addComponent" id=link99 onMouseOver="ShowTip(event, 'tt93', 'link99')" onMouseOut="HideTip('tt93')">addComponent</a></td><td class=SDescription>Add a new component (geometry) to the collection. </td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Geometry.Collection.removeComponents" id=link100 onMouseOver="ShowTip(event, 'tt94', 'link100')" onMouseOut="HideTip('tt94')">removeComponents</a></td><td class=SDescription>Remove components from this geometry.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Geometry.Collection.removeComponent" id=link101 onMouseOver="ShowTip(event, 'tt95', 'link101')" onMouseOut="HideTip('tt95')">removeComponent</a></td><td class=SDescription>Remove a component from this geometry.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Geometry.Collection.getLength" id=link102 onMouseOver="ShowTip(event, 'tt96', 'link102')" onMouseOut="HideTip('tt96')">getLength</a></td><td class=SDescription>Calculate the length of this geometry</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Geometry.Collection.getCentroid" id=link103 onMouseOver="ShowTip(event, 'tt97', 'link103')" onMouseOut="HideTip('tt97')">getCentroid</a></td><td class=SDescription>{<a href="#ZOO.Geometry.Point" class=LClass id=link104 onMouseOver="ShowTip(event, 'tt50', 'link104')" onMouseOut="HideTip('tt50')">ZOO.Geometry.Point</a>} The centroid of the collection</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Geometry.Collection.getGeodesicLength" id=link105 onMouseOver="ShowTip(event, 'tt98', 'link105')" onMouseOut="HideTip('tt98')">getGeodesicLength</a></td><td class=SDescription>Calculate the approximate length of the geometry were it projected onto the earth.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Geometry.Collection.move" id=link106 onMouseOver="ShowTip(event, 'tt99', 'link106')" onMouseOut="HideTip('tt99')">move</a></td><td class=SDescription>Moves a geometry by the given displacement along positive x and y axes. </td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Geometry.Collection.rotate" id=link107 onMouseOver="ShowTip(event, 'tt100', 'link107')" onMouseOut="HideTip('tt100')">rotate</a></td><td class=SDescription>Rotate a geometry around some origin</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Geometry.Collection.resize" id=link108 onMouseOver="ShowTip(event, 'tt101', 'link108')" onMouseOut="HideTip('tt101')">resize</a></td><td class=SDescription>Resize a geometry relative to some origin. </td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Geometry.Collection.equals" id=link109 onMouseOver="ShowTip(event, 'tt102', 'link109')" onMouseOut="HideTip('tt102')">equals</a></td><td class=SDescription>Determine whether another geometry is equivalent to this one. </td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Geometry.Collection.transform" id=link110 onMouseOver="ShowTip(event, 'tt103', 'link110')" onMouseOut="HideTip('tt103')">transform</a></td><td class=SDescription>Reproject the components geometry from source to dest.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Geometry.Collection.intersects" id=link111 onMouseOver="ShowTip(event, 'tt104', 'link111')" onMouseOut="HideTip('tt104')">intersects</a></td><td class=SDescription>Determine if the input geometry intersects this one.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Geometry.Collection.getVertices" id=link112 onMouseOver="ShowTip(event, 'tt105', 'link112')" onMouseOut="HideTip('tt105')">getVertices</a></td><td class=SDescription>Return a list of all points in this geometry.</td></tr><tr class="SClass"><td class=SEntry><a href="#ZOO.Geometry.Point" >ZOO.<wbr>Geometry.<wbr>Point</a></td><td class=SDescription>Point geometry class.</td></tr><tr class="SGroup SIndent1"><td class=SEntry><a href="#ZOO.Geometry.Point.Properties" >Properties</a></td><td class=SDescription></td></tr><tr class="SProperty SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Geometry.Point.x" >x</a></td><td class=SDescription>{float}</td></tr><tr class="SProperty SIndent2"><td class=SEntry><a href="#ZOO.Geometry.Point.y" >y</a></td><td class=SDescription>{float}</td></tr><tr class="SGroup SIndent1"><td class=SEntry><a href="#ZOO.Geometry.Point.Functions" >Functions</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Geometry.Point.ZOO.Geometry.Point" >ZOO.<wbr>Geometry.<wbr>Point</a></td><td class=SDescription>Construct a point geometry.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Geometry.Point.clone" id=link113 onMouseOver="ShowTip(event, 'tt106', 'link113')" onMouseOut="HideTip('tt106')">clone</a></td><td class=SDescription>{<a href="#ZOO.Geometry.Point.ZOO.Geometry.Point" class=LFunction id=link114 onMouseOver="ShowTip(event, 'tt107', 'link114')" onMouseOut="HideTip('tt107')">ZOO.Geometry.Point</a>} An exact clone of this ZOO.Geometry.Point</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Geometry.Point.calculateBounds" id=link115 onMouseOver="ShowTip(event, 'tt108', 'link115')" onMouseOut="HideTip('tt108')">calculateBounds</a></td><td class=SDescription>Create a new Bounds based on the x/y</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Geometry.Point.equals" id=link116 onMouseOver="ShowTip(event, 'tt109', 'link116')" onMouseOut="HideTip('tt109')">equals</a></td><td class=SDescription>Determine whether another geometry is equivalent to this one. </td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Geometry.Point.toShortString" id=link117 onMouseOver="ShowTip(event, 'tt110', 'link117')" onMouseOut="HideTip('tt110')">toShortString</a></td><td class=SDescription>{String} Shortened String representation of Point object. </td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Geometry.Point.move" id=link118 onMouseOver="ShowTip(event, 'tt111', 'link118')" onMouseOut="HideTip('tt111')">move</a></td><td class=SDescription>Moves a geometry by the given displacement along positive x and y axes. </td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Geometry.Point.rotate" id=link119 onMouseOver="ShowTip(event, 'tt112', 'link119')" onMouseOut="HideTip('tt112')">rotate</a></td><td class=SDescription>Rotate a point around another.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Geometry.Point.getCentroid" id=link120 onMouseOver="ShowTip(event, 'tt113', 'link120')" onMouseOut="HideTip('tt113')">getCentroid</a></td><td class=SDescription>{<a href="#ZOO.Geometry.Point.ZOO.Geometry.Point" class=LFunction id=link121 onMouseOver="ShowTip(event, 'tt107', 'link121')" onMouseOut="HideTip('tt107')">ZOO.Geometry.Point</a>} The centroid of the collection</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Geometry.Point.resize" id=link122 onMouseOver="ShowTip(event, 'tt114', 'link122')" onMouseOut="HideTip('tt114')">resize</a></td><td class=SDescription>Resize a point relative to some origin. </td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Geometry.Point.intersects" id=link123 onMouseOver="ShowTip(event, 'tt115', 'link123')" onMouseOut="HideTip('tt115')">intersects</a></td><td class=SDescription>Determine if the input geometry intersects this one.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Geometry.Point.transform" id=link124 onMouseOver="ShowTip(event, 'tt116', 'link124')" onMouseOut="HideTip('tt116')">transform</a></td><td class=SDescription>Translate the x,y properties of the point from source to dest.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Geometry.Point.getVertices" id=link125 onMouseOver="ShowTip(event, 'tt117', 'link125')" onMouseOut="HideTip('tt117')">getVertices</a></td><td class=SDescription>Return a list of all points in this geometry.</td></tr><tr class="SClass"><td class=SEntry><a href="#ZOO.Geometry.Surface" >ZOO.<wbr>Geometry.<wbr>Surface</a></td><td class=SDescription>Surface geometry class.</td></tr><tr class="SClass"><td class=SEntry><a href="#ZOO.Geometry.MultiPoint" >ZOO.<wbr>Geometry.<wbr>MultiPoint</a></td><td class=SDescription>MultiPoint is a collection of Points. </td></tr><tr class="SGroup SIndent1"><td class=SEntry><a href="#ZOO.Geometry.MultiPoint.Properties" >Properties</a></td><td class=SDescription></td></tr><tr class="SProperty SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Geometry.MultiPoint.componentTypes" >componentTypes</a></td><td class=SDescription>{Array(String)} An array of class names representing the types of components that the collection can include. </td></tr><tr class="SGroup SIndent1"><td class=SEntry><a href="#ZOO.Geometry.MultiPoint.Functions" >Functions</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Geometry.MultiPoint.ZOO.Geometry.MultiPoint" >ZOO.<wbr>Geometry.<wbr>MultiPoint</a></td><td class=SDescription>Create a new MultiPoint Geometry</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Geometry.MultiPoint.addPoint" id=link126 onMouseOver="ShowTip(event, 'tt118', 'link126')" onMouseOut="HideTip('tt118')">addPoint</a></td><td class=SDescription>Wrapper for <a href="#ZOO.Geometry.Collection.addComponent" class=LFunction id=link127 onMouseOver="ShowTip(event, 'tt93', 'link127')" onMouseOut="HideTip('tt93')">ZOO.Geometry.Collection.addComponent</a></td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Geometry.MultiPoint.removePoint" id=link128 onMouseOver="ShowTip(event, 'tt119', 'link128')" onMouseOut="HideTip('tt119')">removePoint</a></td><td class=SDescription>Wrapper for <a href="#ZOO.Geometry.Collection.removeComponent" class=LFunction id=link129 onMouseOver="ShowTip(event, 'tt95', 'link129')" onMouseOut="HideTip('tt95')">ZOO.Geometry.Collection.removeComponent</a></td></tr><tr class="SClass"><td class=SEntry><a href="#ZOO.Geometry.Curve" >ZOO.<wbr>Geometry.<wbr>Curve</a></td><td class=SDescription>A Curve is a MultiPoint, whose points are assumed to be connected. </td></tr><tr class="SGroup SIndent1"><td class=SEntry><a href="#ZOO.Geometry.Curve.Properties" >Properties</a></td><td class=SDescription></td></tr><tr class="SProperty SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Geometry.Curve.componentTypes" >componentTypes</a></td><td class=SDescription>{Array(String)} An array of class names representing the types of components that the collection can include. </td></tr><tr class="SGroup SIndent1"><td class=SEntry><a href="#ZOO.Geometry.Curve.Functions" >Functions</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Geometry.Curve.ZOO.Geometry.Curve" >ZOO.<wbr>Geometry.<wbr>Curve</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Geometry.Curve.getLength" id=link130 onMouseOver="ShowTip(event, 'tt120', 'link130')" onMouseOut="HideTip('tt120')">getLength</a></td><td class=SDescription>{Float} The length of the curve</td></tr><tr class="SClass"><td class=SEntry><a href="#ZOO.Geometry.LineString" >ZOO.<wbr>Geometry.<wbr>LineString</a></td><td class=SDescription>A LineString is a Curve which, once two points have been added to it, can never be less than two points long.</td></tr><tr class="SGroup SIndent1"><td class=SEntry><a href="#ZOO.Geometry.LineString.Functions" >Functions</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Geometry.LineString.ZOO.Geometry.LineString" >ZOO.<wbr>Geometry.<wbr>LineString</a></td><td class=SDescription>Create a new LineString geometry</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Geometry.LineString.removeComponent" id=link131 onMouseOver="ShowTip(event, 'tt121', 'link131')" onMouseOut="HideTip('tt121')">removeComponent</a></td><td class=SDescription>Only allows removal of a point if there are three or more points in the linestring. </td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Geometry.LineString.intersects" id=link132 onMouseOver="ShowTip(event, 'tt122', 'link132')" onMouseOut="HideTip('tt122')">intersects</a></td><td class=SDescription>Test for instersection between two geometries. </td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Geometry.LineString.getSortedSegments" id=link133 onMouseOver="ShowTip(event, 'tt123', 'link133')" onMouseOut="HideTip('tt123')">getSortedSegments</a></td><td class=SDescription>{Array} An array of segment objects. </td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Geometry.LineString.splitWithSegment" id=link134 onMouseOver="ShowTip(event, 'tt124', 'link134')" onMouseOut="HideTip('tt124')">splitWithSegment</a></td><td class=SDescription>Split this geometry with the given segment.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Geometry.LineString.split" id=link135 onMouseOver="ShowTip(event, 'tt125', 'link135')" onMouseOut="HideTip('tt125')">split</a></td><td class=SDescription>Use this geometry (the source) to attempt to split a target geometry.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Geometry.LineString.splitWith" id=link136 onMouseOver="ShowTip(event, 'tt126', 'link136')" onMouseOut="HideTip('tt126')">splitWith</a></td><td class=SDescription>Split this geometry (the target) with the given geometry (the source).</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Geometry.LineString.getVertices" id=link137 onMouseOver="ShowTip(event, 'tt127', 'link137')" onMouseOut="HideTip('tt127')">getVertices</a></td><td class=SDescription>Return a list of all points in this geometry.</td></tr><tr class="SClass"><td class=SEntry><a href="#ZOO.Geometry.LinearRing" >ZOO.<wbr>Geometry.<wbr>LinearRing</a></td><td class=SDescription>A Linear Ring is a special LineString which is closed. </td></tr><tr class="SGroup SIndent1"><td class=SEntry><a href="#ZOO.Geometry.LinearRing.Properties" >Properties</a></td><td class=SDescription></td></tr><tr class="SProperty SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Geometry.LinearRing.componentTypes" >componentTypes</a></td><td class=SDescription>{Array(String)} An array of class names representing the types of components that the collection can include. </td></tr><tr class="SGroup SIndent1"><td class=SEntry><a href="#ZOO.Geometry.LinearRing.Functions" >Functions</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Geometry.LinearRing.ZOO.Geometry.LinearRing" >ZOO.<wbr>Geometry.<wbr>LinearRing</a></td><td class=SDescription>Linear rings are constructed with an array of points. </td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Geometry.LinearRing.addComponent" id=link138 onMouseOver="ShowTip(event, 'tt128', 'link138')" onMouseOut="HideTip('tt128')">addComponent</a></td><td class=SDescription>Adds a point to geometry components. </td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Geometry.LinearRing.move" id=link139 onMouseOver="ShowTip(event, 'tt129', 'link139')" onMouseOut="HideTip('tt129')">move</a></td><td class=SDescription>Moves a geometry by the given displacement along positive x and y axes. </td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Geometry.LinearRing.rotate" id=link140 onMouseOver="ShowTip(event, 'tt130', 'link140')" onMouseOut="HideTip('tt130')">rotate</a></td><td class=SDescription>Rotate a geometry around some origin</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Geometry.LinearRing.resize" id=link141 onMouseOver="ShowTip(event, 'tt131', 'link141')" onMouseOut="HideTip('tt131')">resize</a></td><td class=SDescription>Resize a geometry relative to some origin. </td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Geometry.LinearRing.transform" id=link142 onMouseOver="ShowTip(event, 'tt132', 'link142')" onMouseOut="HideTip('tt132')">transform</a></td><td class=SDescription>Reproject the components geometry from source to dest.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Geometry.LinearRing.getCentroid" id=link143 onMouseOver="ShowTip(event, 'tt133', 'link143')" onMouseOut="HideTip('tt133')">getCentroid</a></td><td class=SDescription>{<a href="#ZOO.Geometry.Point" class=LClass id=link144 onMouseOver="ShowTip(event, 'tt50', 'link144')" onMouseOut="HideTip('tt50')">ZOO.Geometry.Point</a>} The centroid of the ring</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Geometry.LinearRing.getArea" id=link145 onMouseOver="ShowTip(event, 'tt134', 'link145')" onMouseOut="HideTip('tt134')">getArea</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Geometry.LinearRing.getGeodesicArea" id=link146 onMouseOver="ShowTip(event, 'tt135', 'link146')" onMouseOut="HideTip('tt135')">getGeodesicArea</a></td><td class=SDescription>Calculate the approximate area of the polygon were it projected onto the earth. </td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Geometry.LinearRing.containsPoint" id=link147 onMouseOver="ShowTip(event, 'tt136', 'link147')" onMouseOut="HideTip('tt136')">containsPoint</a></td><td class=SDescription>Test if a point is inside a linear ring. </td></tr><tr class="SClass"><td class=SEntry><a href="#ZOO.Geometry.MultiLineString" >ZOO.<wbr>Geometry.<wbr>MultiLineString</a></td><td class=SDescription>A MultiLineString is a geometry with multiple <a href="#ZOO.Geometry.LineString" class=LClass id=link148 onMouseOver="ShowTip(event, 'tt52', 'link148')" onMouseOut="HideTip('tt52')">ZOO.Geometry.LineString</a> components.</td></tr><tr class="SGroup SIndent1"><td class=SEntry><a href="#ZOO.Geometry.MultiLineString.Functions" >Functions</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Geometry.MultiLineString.ZOO.Geometry.MultiLineString" >ZOO.<wbr>Geometry.<wbr>MultiLineString</a></td><td class=SDescription>Constructor for a MultiLineString Geometry.</td></tr><tr class="SClass"><td class=SEntry><a href="#ZOO.Geometry.Polygon" >ZOO.<wbr>Geometry.<wbr>Polygon</a></td><td class=SDescription>Polygon is a collection of <a href="#ZOO.Geometry.LinearRing" class=LClass id=link149 onMouseOver="ShowTip(event, 'tt137', 'link149')" onMouseOut="HideTip('tt137')">ZOO.Geometry.LinearRing</a>.</td></tr><tr class="SGroup SIndent1"><td class=SEntry><a href="#ZOO.Geometry.Polygon.Functions" >Functions</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Geometry.Polygon.ZOO.Geometry.Polygon" >ZOO.<wbr>Geometry.<wbr>Polygon</a></td><td class=SDescription>Constructor for a Polygon geometry. </td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Geometry.Polygon.getArea" id=link150 onMouseOver="ShowTip(event, 'tt138', 'link150')" onMouseOut="HideTip('tt138')">getArea</a></td><td class=SDescription>Calculated by subtracting the areas of the internal holes from the area of the outer hole.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Geometry.Polygon.containsPoint" id=link151 onMouseOver="ShowTip(event, 'tt139', 'link151')" onMouseOut="HideTip('tt139')">containsPoint</a></td><td class=SDescription>Test if a point is inside a polygon. </td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Geometry.Polygon.createRegularPolygon" id=link152 onMouseOver="ShowTip(event, 'tt140', 'link152')" onMouseOut="HideTip('tt140')">createRegularPolygon</a></td><td class=SDescription>Create a regular polygon around a radius. </td></tr><tr class="SClass"><td class=SEntry><a href="#ZOO.Geometry.MultiPolygon" >ZOO.<wbr>Geometry.<wbr>MultiPolygon</a></td><td class=SDescription>MultiPolygon is a geometry with multiple <a href="#ZOO.Geometry.Polygon" class=LClass id=link153 onMouseOver="ShowTip(event, 'tt54', 'link153')" onMouseOut="HideTip('tt54')">ZOO.Geometry.Polygon</a> components. </td></tr><tr class="SGroup SIndent1"><td class=SEntry><a href="#ZOO.Geometry.MultiPolygon.Functions" >Functions</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Geometry.MultiPolygon.ZOO.Geometry.MultiPolygon" >ZOO.<wbr>Geometry.<wbr>MultiPolygon</a></td><td class=SDescription>Create a new MultiPolygon geometry</td></tr><tr class="SClass"><td class=SEntry><a href="#ZOO.Process" >ZOO.<wbr>Process</a></td><td class=SDescription>Used to query OGC WPS process defined by its URL and its identifier. </td></tr><tr class="SGroup SIndent1"><td class=SEntry><a href="#ZOO.Process.Properties_and_Functions" >Properties and Functions</a></td><td class=SDescription></td></tr><tr class="SProperty SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Process.schemaLocation" >schemaLocation</a></td><td class=SDescription>{String} Schema location for a particular minor version.</td></tr><tr class="SProperty SIndent2"><td class=SEntry><a href="#ZOO.Process.namespaces" >namespaces</a></td><td class=SDescription>{Object} Mapping of namespace aliases to namespace URIs.</td></tr><tr class="SProperty SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Process.url" >url</a></td><td class=SDescription>{String} The OGC&rsquo;s Web PRocessing Service URL, default is <a href="http://localhost/zoo" class=LURL target=_top>http://localhost/zoo</a>.</td></tr><tr class="SProperty SIndent2"><td class=SEntry><a href="#ZOO.Process.identifier" >identifier</a></td><td class=SDescription>{String} Process identifier in the OGC&rsquo;s Web Processing Service.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Process.ZOO.Process" >ZOO.<wbr>Process</a></td><td class=SDescription>Create a new Process</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Process.Execute" id=link154 onMouseOver="ShowTip(event, 'tt141', 'link154')" onMouseOut="HideTip('tt141')">Execute</a></td><td class=SDescription>Query the OGC&rsquo;s Web PRocessing Servcie to Execute the process.</td></tr><tr class="SProperty SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Process.buildInput" >buildInput</a></td><td class=SDescription>Object containing methods to build WPS inputs.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Process.buildInput.complex" >buildInput.<wbr>complex</a></td><td class=SDescription>Given an E4XElement representing the WPS complex data input.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Process.buildInput.reference" >buildInput.<wbr>reference</a></td><td class=SDescription>Given an E4XElement representing the WPS reference input.</td></tr><tr class="SFunction SIndent2"><td class=SEntry><a href="#ZOO.Process.buildInput.literal" >buildInput.<wbr>literal</a></td><td class=SDescription>Given an E4XElement representing the WPS literal data input.</td></tr><tr class="SFunction SIndent2 SMarked"><td class=SEntry><a href="#ZOO.Process.buildDataInputsNode" id=link155 onMouseOver="ShowTip(event, 'tt142', 'link155')" onMouseOut="HideTip('tt142')">buildDataInputsNode</a></td><td class=SDescription>Method to build the WPS DataInputs element.</td></tr></table></div></div><!--END_ND_SUMMARY--></div></div></div>

	<div class="CGroup"><div class=CTopic><h3 class=CTitle><a name="ZOO.Constants"></a>Constants</h3></div></div>

	<div class="CConstant"><div class=CTopic><h3 class=CTitle><a name="ZOO.SERVICE_ACCEPTED"></a>SERVICE_ACCEPTED</h3><div class=CBody><p>{Integer} used for</p></div></div></div>

	<div class="CConstant"><div class=CTopic><h3 class=CTitle><a name="ZOO.SERVICE_STARTED"></a>SERVICE_STARTED</h3><div class=CBody><p>{Integer} used for</p></div></div></div>

	<div class="CConstant"><div class=CTopic><h3 class=CTitle><a name="ZOO.SERVICE_PAUSED"></a>SERVICE_PAUSED</h3><div class=CBody><p>{Integer} used for</p></div></div></div>

	<div class="CConstant"><div class=CTopic><h3 class=CTitle><a name="ZOO.SERVICE_SUCCEEDED"></a>SERVICE_SUCCEEDED</h3><div class=CBody><p>{Integer} used for</p></div></div></div>

	<div class="CConstant"><div class=CTopic><h3 class=CTitle><a name="ZOO.SERVICE_FAILED"></a>SERVICE_FAILED</h3><div class=CBody><p>{Integer} used for</p></div></div></div>

	<div class="CGroup"><div class=CTopic><h3 class=CTitle><a name="ZOO.Functions"></a>Functions</h3></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.removeItem"></a>removeItem</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>removeItem: function(</td><td class="PParameter  prettyprint " nowrap>array,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>item</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Remove an object from an array.&nbsp; Iterates through the array to find the item, then removes it.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>array</td><td class=CDLDescription>{Array}</td></tr><tr><td class=CDLEntry>item</td><td class=CDLDescription>{Object}</td></tr></table><p>Return {Array} A reference to the array</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.indexOf"></a>indexOf</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>indexOf: function(</td><td class="PParameter  prettyprint " nowrap>array,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>obj</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>array</td><td class=CDLDescription>{Array}</td></tr><tr><td class=CDLEntry>obj</td><td class=CDLDescription>{Object}</td></tr></table><h4 class=CHeading>Returns</h4><p>{Integer} The index at, which the first object was found in the array.&nbsp; If not found, returns -1.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.extend"></a>extend</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>extend: function(</td><td class="PParameter  prettyprint " nowrap>destination,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>source</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Copy all properties of a source object to a destination object.&nbsp; Modifies the passed in destination object.&nbsp;  Any properties on the source object that are set to undefined will not be (re)set on the destination object.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>destination</td><td class=CDLDescription>{Object} The object that will be modified</td></tr><tr><td class=CDLEntry>source</td><td class=CDLDescription>{Object} The object with properties to be set on the destination</td></tr></table><h4 class=CHeading>Returns</h4><p>{Object} The destination object.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.rad"></a>rad</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>rad: function(</td><td class="PParameter  prettyprint " nowrap>x</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>x</td><td class=CDLDescription>{Float}</td></tr></table><h4 class=CHeading>Returns</h4><p>{Float}</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.distVincenty"></a>distVincenty</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>distVincenty: function(</td><td class="PParameter  prettyprint " nowrap>p1,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>p2</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Given two objects representing points with geographic coordinates, this calculates the distance between those points on the surface of an ellipsoid.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>p1</td><td class=CDLDescription>{<a href="#ZOO.Geometry.Point" class=LClass id=link156 onMouseOver="ShowTip(event, 'tt50', 'link156')" onMouseOut="HideTip('tt50')">ZOO.Geometry.Point</a>} (or any object with both .x, .y properties)</td></tr><tr><td class=CDLEntry>p2</td><td class=CDLDescription>{<a href="#ZOO.Geometry.Point" class=LClass id=link157 onMouseOver="ShowTip(event, 'tt50', 'link157')" onMouseOut="HideTip('tt50')">ZOO.Geometry.Point</a>} (or any object with both .x, .y properties)</td></tr></table><h4 class=CHeading>Returns</h4><p>{Float} The distance (in km) between the two input points as measured on an ellipsoid.&nbsp;  Note that the input point objects must be in geographic coordinates (decimal degrees) and the return distance is in kilometers.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Class"></a>Class</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">Class: function()</td></tr></table></blockquote><p>Method used to create ZOO classes.&nbsp; Includes support for multiple inheritance.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.UpdateStatus"></a>UpdateStatus</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>UpdateStatus: function(</td><td class="PParameter  prettyprint " nowrap>env,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>value</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Method used to update the status of the process</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>env</td><td class=CDLDescription>{Object} The environment object</td></tr><tr><td class=CDLEntry>value</td><td class=CDLDescription>{Float} the status value between 0 to 100</td></tr></table></div></div></div>

	<div class="CClass"><div class=CTopic><h2 class=CTitle><a name="ZOO.String"></a>ZOO.<wbr>String</h2><div class=CBody><p>Contains convenience methods for string manipulation</p><!--START_ND_SUMMARY--><div class=Summary><div class=STitle>Summary</div><div class=SBorder><table border=0 cellspacing=0 cellpadding=0 class=STable><tr class="SGroup"><td class=SEntry><a href="#ZOO.String.Functions_and_Properties" >Functions and Properties</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.String.startsWith" id=link158 onMouseOver="ShowTip(event, 'tt8', 'link158')" onMouseOut="HideTip('tt8')">startsWith</a></td><td class=SDescription>Test whether a string starts with another string.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.String.contains" id=link159 onMouseOver="ShowTip(event, 'tt9', 'link159')" onMouseOut="HideTip('tt9')">contains</a></td><td class=SDescription>Test whether a string contains another string.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.String.trim" id=link160 onMouseOver="ShowTip(event, 'tt10', 'link160')" onMouseOut="HideTip('tt10')">trim</a></td><td class=SDescription>Removes leading and trailing whitespace characters from a string.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.String.camelize" id=link161 onMouseOver="ShowTip(event, 'tt11', 'link161')" onMouseOut="HideTip('tt11')">camelize</a></td><td class=SDescription>Camel-case a hyphenated string. </td></tr><tr class="SProperty SIndent1 SMarked"><td class=SEntry><a href="#ZOO.String.tokenRegEx" >tokenRegEx</a></td><td class=SDescription>Used to find tokens in a string. </td></tr><tr class="SProperty SIndent1"><td class=SEntry><a href="#ZOO.String.numberRegEx" >numberRegEx</a></td><td class=SDescription>Used to test strings as numbers.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.String.isNumeric" id=link162 onMouseOver="ShowTip(event, 'tt12', 'link162')" onMouseOut="HideTip('tt12')">isNumeric</a></td><td class=SDescription>Determine whether a string contains only a numeric value.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.String.numericIf" id=link163 onMouseOver="ShowTip(event, 'tt13', 'link163')" onMouseOut="HideTip('tt13')">numericIf</a></td><td class=SDescription>Converts a string that appears to be a numeric value into a number.</td></tr></table></div></div><!--END_ND_SUMMARY--></div></div></div>

	<div class="CGroup"><div class=CTopic><h3 class=CTitle><a name="ZOO.String.Functions_and_Properties"></a>Functions and Properties</h3></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.String.startsWith"></a>startsWith</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>startsWith: function(</td><td class="PParameter  prettyprint " nowrap>str,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>sub</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Test whether a string starts with another string.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>str</td><td class=CDLDescription>{String} The string to test.</td></tr><tr><td class=CDLEntry>sub</td><td class=CDLDescription>{Sring} The substring to look for.</td></tr></table><h4 class=CHeading>Returns</h4><p>{Boolean} The first string starts with the second.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.String.contains"></a>contains</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>contains: function(</td><td class="PParameter  prettyprint " nowrap>str,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>sub</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Test whether a string contains another string.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>str</td><td class=CDLDescription>{String} The string to test.</td></tr><tr><td class=CDLEntry>sub</td><td class=CDLDescription>{String} The substring to look for.</td></tr></table><h4 class=CHeading>Returns</h4><p>{Boolean} The first string contains the second.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.String.trim"></a>trim</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>trim: function(</td><td class="PParameter  prettyprint " nowrap>str</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Removes leading and trailing whitespace characters from a string.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>str</td><td class=CDLDescription>{String} The (potentially) space padded string.&nbsp;  This string is not modified.</td></tr></table><h4 class=CHeading>Returns</h4><p>{String} A trimmed version of the string with all leading and trailing spaces removed.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.String.camelize"></a>camelize</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>camelize: function(</td><td class="PParameter  prettyprint " nowrap>str</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Camel-case a hyphenated string.&nbsp; Ex.&nbsp; &ldquo;chicken-head&rdquo; becomes &ldquo;chickenHead&rdquo;, and &ldquo;-chicken-head&rdquo; becomes &ldquo;ChickenHead&rdquo;.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>str</td><td class=CDLDescription>{String} The string to be camelized.&nbsp;  The original is not modified.</td></tr></table><h4 class=CHeading>Returns</h4><p>{String} The string, camelized</p></div></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.String.tokenRegEx"></a>tokenRegEx</h3><div class=CBody><p>Used to find tokens in a string.&nbsp; Examples: ${a}, ${a.b.c}, ${a-b}, ${5}</p></div></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.String.numberRegEx"></a>numberRegEx</h3><div class=CBody><p>Used to test strings as numbers.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.String.isNumeric"></a>isNumeric</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>isNumeric: function(</td><td class="PParameter  prettyprint " nowrap>value</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Determine whether a string contains only a numeric value.</p><h4 class=CHeading>Examples</h4><blockquote><pre class="prettyprint">ZOO.String.isNumeric(&quot;6.02e23&quot;) // true
	ZOO.String.isNumeric(&quot;12 dozen&quot;) // false
	ZOO.String.isNumeric(&quot;4&quot;) // true
	ZOO.String.isNumeric(&quot; 4 &quot;) // false</pre></blockquote><h4 class=CHeading>Returns</h4><p>{Boolean} String contains only a number.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.String.numericIf"></a>numericIf</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>numericIf: function(</td><td class="PParameter  prettyprint " nowrap>value</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Converts a string that appears to be a numeric value into a number.</p><p>Returns {Number|String} a Number if the passed value is a number, a String otherwise.</p></div></div></div>

	<div class="CClass"><div class=CTopic><h2 class=CTitle><a name="ZOO.Request"></a>ZOO.<wbr>Request</h2><div class=CBody><p>Contains convenience methods for working with ZOORequest which replace XMLHttpRequest.&nbsp; Because of we are not in a browser JavaScript environment, ZOO Project provides a method to query servers which is based on curl : ZOORequest.</p><!--START_ND_SUMMARY--><div class=Summary><div class=STitle>Summary</div><div class=SBorder><table border=0 cellspacing=0 cellpadding=0 class=STable><tr class="SGroup"><td class=SEntry><a href="#ZOO.Request.Functions" >Functions</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Request.GET" >GET</a></td><td class=SDescription>Send an HTTP GET request.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Request.POST" >POST</a></td><td class=SDescription>Send an HTTP POST request.</td></tr></table></div></div><!--END_ND_SUMMARY--></div></div></div>

	<div class="CGroup"><div class=CTopic><h3 class=CTitle><a name="ZOO.Request.Functions"></a>Functions</h3></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Request.GET"></a>GET</h3><div class=CBody><p>Send an HTTP GET request.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>url</td><td class=CDLDescription>{String} The URL to request.</td></tr><tr><td class=CDLEntry>params</td><td class=CDLDescription>{Object} Params to add to the url</td></tr></table><h4 class=CHeading>Returns</h4><p>{String} Request result.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Request.POST"></a>POST</h3><div class=CBody><p>Send an HTTP POST request.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>url</td><td class=CDLDescription>{String} The URL to request.</td></tr><tr><td class=CDLEntry>body</td><td class=CDLDescription>{String} The request&rsquo;s body to send.</td></tr><tr><td class=CDLEntry>headers</td><td class=CDLDescription>{Object} A key-value object of headers to push to the request&rsquo;s head</td></tr></table><h4 class=CHeading>Returns</h4><p>{String} Request result.</p></div></div></div>

	<div class="CClass"><div class=CTopic><h2 class=CTitle><a name="ZOO.Bounds"></a>ZOO.<wbr>Bounds</h2><div class=CBody><p>Instances of this class represent bounding boxes.&nbsp;  Data stored as left, bottom, right, top floats.&nbsp; All values are initialized to null, however, you should make sure you set them before using the bounds for anything.</p><!--START_ND_SUMMARY--><div class=Summary><div class=STitle>Summary</div><div class=SBorder><table border=0 cellspacing=0 cellpadding=0 class=STable><tr class="SGroup"><td class=SEntry><a href="#ZOO.Bounds.Properties" >Properties</a></td><td class=SDescription></td></tr><tr class="SProperty SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Bounds.left" >left</a></td><td class=SDescription>{Number} Minimum horizontal coordinate.</td></tr><tr class="SProperty SIndent1"><td class=SEntry><a href="#ZOO.Bounds.bottom" >bottom</a></td><td class=SDescription>{Number} Minimum vertical coordinate.</td></tr><tr class="SProperty SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Bounds.right" >right</a></td><td class=SDescription>{Number} Maximum horizontal coordinate.</td></tr><tr class="SProperty SIndent1"><td class=SEntry><a href="#ZOO.Bounds.top" >top</a></td><td class=SDescription>{Number} Maximum vertical coordinate.</td></tr><tr class="SGroup"><td class=SEntry><a href="#ZOO.Bounds.Functions" >Functions</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Bounds.ZOO.Bounds" >ZOO.<wbr>Bounds</a></td><td class=SDescription>Construct a new bounds object.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Bounds.clone" id=link164 onMouseOver="ShowTip(event, 'tt14', 'link164')" onMouseOut="HideTip('tt14')">clone</a></td><td class=SDescription>Create a cloned instance of this bounds.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Bounds.equals" id=link165 onMouseOver="ShowTip(event, 'tt15', 'link165')" onMouseOut="HideTip('tt15')">equals</a></td><td class=SDescription>Test a two bounds for equivalence.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Bounds.toString" id=link166 onMouseOver="ShowTip(event, 'tt16', 'link166')" onMouseOut="HideTip('tt16')">toString</a></td><td class=SDescription>{String} String representation of bounds object. </td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Bounds.toBBOX" id=link167 onMouseOver="ShowTip(event, 'tt17', 'link167')" onMouseOut="HideTip('tt17')">toBBOX</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Bounds.toGeometry" id=link168 onMouseOver="ShowTip(event, 'tt18', 'link168')" onMouseOut="HideTip('tt18')">toGeometry</a></td><td class=SDescription>Create a new polygon geometry based on this bounds.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Bounds.getWidth" id=link169 onMouseOver="ShowTip(event, 'tt19', 'link169')" onMouseOut="HideTip('tt19')">getWidth</a></td><td class=SDescription>{Float} The width of the bounds</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Bounds.getHeight" id=link170 onMouseOver="ShowTip(event, 'tt20', 'link170')" onMouseOut="HideTip('tt20')">getHeight</a></td><td class=SDescription>{Float} The height of the bounds (top minus bottom).</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Bounds.add" id=link171 onMouseOver="ShowTip(event, 'tt21', 'link171')" onMouseOut="HideTip('tt21')">add</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Bounds.extend" id=link172 onMouseOver="ShowTip(event, 'tt22', 'link172')" onMouseOut="HideTip('tt22')">extend</a></td><td class=SDescription>Extend the bounds to include the point, lonlat, or bounds specified. </td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Bounds.intersectsBounds" id=link173 onMouseOver="ShowTip(event, 'tt23', 'link173')" onMouseOut="HideTip('tt23')">intersectsBounds</a></td><td class=SDescription>Determine whether the target bounds intersects this bounds. </td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Bounds.containsBounds" id=link174 onMouseOver="ShowTip(event, 'tt24', 'link174')" onMouseOut="HideTip('tt24')">containsBounds</a></td><td class=SDescription>Determine whether the target bounds is contained within this bounds.</td></tr></table></div></div><!--END_ND_SUMMARY--></div></div></div>

	<div class="CGroup"><div class=CTopic><h3 class=CTitle><a name="ZOO.Bounds.Properties"></a>Properties</h3></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Bounds.left"></a>left</h3><div class=CBody><p>{Number} Minimum horizontal coordinate.</p></div></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Bounds.bottom"></a>bottom</h3><div class=CBody><p>{Number} Minimum vertical coordinate.</p></div></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Bounds.right"></a>right</h3><div class=CBody><p>{Number} Maximum horizontal coordinate.</p></div></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Bounds.top"></a>top</h3><div class=CBody><p>{Number} Maximum vertical coordinate.</p></div></div></div>

	<div class="CGroup"><div class=CTopic><h3 class=CTitle><a name="ZOO.Bounds.Functions"></a>Functions</h3></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Bounds.ZOO.Bounds"></a>ZOO.<wbr>Bounds</h3><div class=CBody><p>Construct a new bounds object.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>left</td><td class=CDLDescription>{Number} The left bounds of the box.&nbsp;  Note that for width calculations, this is assumed to be less than the right value.</td></tr><tr><td class=CDLEntry>bottom</td><td class=CDLDescription>{Number} The bottom bounds of the box.&nbsp;  Note that for height calculations, this is assumed to be more than the top value.</td></tr><tr><td class=CDLEntry>right</td><td class=CDLDescription>{Number} The right bounds.</td></tr><tr><td class=CDLEntry>top</td><td class=CDLDescription>{Number} The top bounds.</td></tr></table></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Bounds.clone"></a>clone</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">clone:function()</td></tr></table></blockquote><p>Create a cloned instance of this bounds.</p><h4 class=CHeading>Returns</h4><p>{<a href="#ZOO.Bounds.ZOO.Bounds" class=LFunction id=link175 onMouseOver="ShowTip(event, 'tt143', 'link175')" onMouseOut="HideTip('tt143')">ZOO.Bounds</a>} A fresh copy of the bounds</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Bounds.equals"></a>equals</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>equals:function(</td><td class="PParameter  prettyprint " nowrap>bounds</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Test a two bounds for equivalence.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>bounds</td><td class=CDLDescription>{<a href="#ZOO.Bounds.ZOO.Bounds" class=LFunction id=link176 onMouseOver="ShowTip(event, 'tt143', 'link176')" onMouseOut="HideTip('tt143')">ZOO.Bounds</a>}</td></tr></table><h4 class=CHeading>Returns</h4><p>{Boolean} The passed-in bounds object has the same left, right, top, bottom components as this.&nbsp;  Note that if bounds passed in is null, returns false.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Bounds.toString"></a>toString</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">toString:function()</td></tr></table></blockquote><h4 class=CHeading>Returns</h4><p>{String} String representation of bounds object.&nbsp; (ex.&lt;i&gt;&rdquo;left-bottom=(5,42) right-top=(10,45)&rdquo;&lt;/i&gt;)</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Bounds.toBBOX"></a>toBBOX</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>toBBOX:function(</td><td class="PParameter  prettyprint " nowrap>decimal</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>decimal</td><td class=CDLDescription>{Integer} How many significant digits in the bbox coords?&nbsp; Default is 6</td></tr></table><h4 class=CHeading>Returns</h4><p>{String} Simple String representation of bounds object.&nbsp; (ex.&nbsp; &lt;i&gt;&rdquo;5,42,10,45&rdquo;&lt;/i&gt;)</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Bounds.toGeometry"></a>toGeometry</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">toGeometry: function()</td></tr></table></blockquote><p>Create a new polygon geometry based on this bounds.</p><h4 class=CHeading>Returns</h4><p>{<a href="#ZOO.Geometry.Polygon" class=LClass id=link177 onMouseOver="ShowTip(event, 'tt54', 'link177')" onMouseOut="HideTip('tt54')">ZOO.Geometry.Polygon</a>} A new polygon with the coordinates of this bounds.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Bounds.getWidth"></a>getWidth</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">getWidth:function()</td></tr></table></blockquote><h4 class=CHeading>Returns</h4><p>{Float} The width of the bounds</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Bounds.getHeight"></a>getHeight</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">getHeight:function()</td></tr></table></blockquote><h4 class=CHeading>Returns</h4><p>{Float} The height of the bounds (top minus bottom).</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Bounds.add"></a>add</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>add:function(</td><td class="PParameter  prettyprint " nowrap>x,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>y</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>x</td><td class=CDLDescription>{Float}</td></tr><tr><td class=CDLEntry>y</td><td class=CDLDescription>{Float}</td></tr></table><h4 class=CHeading>Returns</h4><p>{<a href="#ZOO.Bounds.ZOO.Bounds" class=LFunction id=link178 onMouseOver="ShowTip(event, 'tt143', 'link178')" onMouseOut="HideTip('tt143')">ZOO.Bounds</a>} A new bounds whose coordinates are the same as this, but shifted by the passed-in x and y values.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Bounds.extend"></a>extend</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>extend:function(</td><td class="PParameter  prettyprint " nowrap>object</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Extend the bounds to include the point, lonlat, or bounds specified.&nbsp; Note, this function assumes that left &lt; right and bottom &lt; top.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>object</td><td class=CDLDescription>{Object} Can be Point, or Bounds</td></tr></table></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Bounds.intersectsBounds"></a>intersectsBounds</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>intersectsBounds:function(</td><td class="PParameter  prettyprint " nowrap>bounds,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>inclusive</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Determine whether the target bounds intersects this bounds.&nbsp;  Bounds are considered intersecting if any of their edges intersect or if one bounds contains the other.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>bounds</td><td class=CDLDescription>{<a href="#ZOO.Bounds.ZOO.Bounds" class=LFunction id=link179 onMouseOver="ShowTip(event, 'tt143', 'link179')" onMouseOut="HideTip('tt143')">ZOO.Bounds</a>} The target bounds.</td></tr><tr><td class=CDLEntry>inclusive</td><td class=CDLDescription>{Boolean} Treat coincident borders as intersecting.&nbsp;  Default is true.&nbsp;  If false, bounds that do not overlap but only touch at the border will not be considered as intersecting.</td></tr></table><h4 class=CHeading>Returns</h4><p>{Boolean} The passed-in bounds object intersects this bounds.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Bounds.containsBounds"></a>containsBounds</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>containsBounds:function(</td><td class="PParameter  prettyprint " nowrap>bounds,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>partial,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>inclusive</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Determine whether the target bounds is contained within this bounds.</p><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>bounds</td><td class=CDLDescription>{<a href="#ZOO.Bounds.ZOO.Bounds" class=LFunction id=link180 onMouseOver="ShowTip(event, 'tt143', 'link180')" onMouseOut="HideTip('tt143')">ZOO.Bounds</a>} The target bounds.</td></tr><tr><td class=CDLEntry>partial</td><td class=CDLDescription>{Boolean} If any of the target corners is within this bounds consider the bounds contained.&nbsp;  Default is false.&nbsp;  If true, the entire target bounds must be contained within this bounds.</td></tr><tr><td class=CDLEntry>inclusive</td><td class=CDLDescription>{Boolean} Treat shared edges as contained.&nbsp;  Default is true.</td></tr></table><h4 class=CHeading>Returns</h4><p>{Boolean} The passed-in bounds object is contained within this bounds.</p></div></div></div>

	<div class="CClass"><div class=CTopic><h2 class=CTitle><a name="ZOO.Projection"></a>ZOO.<wbr>Projection</h2><div class=CBody><p>Class for coordinate transforms between coordinate systems.&nbsp; Depends on the zoo-proj4js library. zoo-proj4js library is loaded by the ZOO Kernel with zoo-api.</p><!--START_ND_SUMMARY--><div class=Summary><div class=STitle>Summary</div><div class=SBorder><table border=0 cellspacing=0 cellpadding=0 class=STable><tr class="SGroup"><td class=SEntry><a href="#ZOO.Projection.Properties" >Properties</a></td><td class=SDescription></td></tr><tr class="SProperty SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Projection.proj" >proj</a></td><td class=SDescription>{Object} Proj4js.Proj instance.</td></tr><tr class="SProperty SIndent1"><td class=SEntry><a href="#ZOO.Projection.projCode" >projCode</a></td><td class=SDescription>{String}</td></tr><tr class="SGroup"><td class=SEntry><a href="#ZOO.Projection.Functions" >Functions</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Projection.ZOO.Projection" >ZOO.<wbr>Projection</a></td><td class=SDescription>This class offers several methods for interacting with a wrapped zoo-pro4js projection object.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Projection.getCode" id=link181 onMouseOver="ShowTip(event, 'tt25', 'link181')" onMouseOut="HideTip('tt25')">getCode</a></td><td class=SDescription>Get the string SRS code.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Projection.getUnits" id=link182 onMouseOver="ShowTip(event, 'tt26', 'link182')" onMouseOut="HideTip('tt26')">getUnits</a></td><td class=SDescription>Get the units string for the projection -- returns null if zoo-proj4js is not available.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Projection.toString" id=link183 onMouseOver="ShowTip(event, 'tt27', 'link183')" onMouseOut="HideTip('tt27')">toString</a></td><td class=SDescription>Convert projection to string (getCode wrapper).</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Projection.equals" id=link184 onMouseOver="ShowTip(event, 'tt28', 'link184')" onMouseOut="HideTip('tt28')">equals</a></td><td class=SDescription>Test equality of two projection instances. </td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Projection.destroy" id=link185 onMouseOver="ShowTip(event, 'tt29', 'link185')" onMouseOut="HideTip('tt29')">destroy</a></td><td class=SDescription>Destroy projection object.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Projection.transform" id=link186 onMouseOver="ShowTip(event, 'tt30', 'link186')" onMouseOut="HideTip('tt30')">transform</a></td><td class=SDescription>Transform a point coordinate from one projection to another. </td></tr></table></div></div><!--END_ND_SUMMARY--></div></div></div>

	<div class="CGroup"><div class=CTopic><h3 class=CTitle><a name="ZOO.Projection.Properties"></a>Properties</h3></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Projection.proj"></a>proj</h3><div class=CBody><p>{Object} Proj4js.Proj instance.</p></div></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Projection.projCode"></a>projCode</h3><div class=CBody><p>{String}</p></div></div></div>

	<div class="CGroup"><div class=CTopic><h3 class=CTitle><a name="ZOO.Projection.Functions"></a>Functions</h3></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Projection.ZOO.Projection"></a>ZOO.<wbr>Projection</h3><div class=CBody><p>This class offers several methods for interacting with a wrapped zoo-pro4js projection object.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>projCode</td><td class=CDLDescription>{String} A string identifying the Well Known Identifier for the projection.</td></tr><tr><td class=CDLEntry>options</td><td class=CDLDescription>{Object} An optional object to set additional properties.</td></tr></table><h4 class=CHeading>Returns</h4><p>{<a href="#ZOO.Projection.ZOO.Projection" class=LFunction id=link187 onMouseOver="ShowTip(event, 'tt144', 'link187')" onMouseOut="HideTip('tt144')">ZOO.Projection</a>} A projection object.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Projection.getCode"></a>getCode</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">getCode: function()</td></tr></table></blockquote><p>Get the string SRS code.</p><h4 class=CHeading>Returns</h4><p>{String} The SRS code.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Projection.getUnits"></a>getUnits</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">getUnits: function()</td></tr></table></blockquote><p>Get the units string for the projection -- returns null if zoo-proj4js is not available.</p><h4 class=CHeading>Returns</h4><p>{String} The units abbreviation.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Projection.toString"></a>toString</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">toString: function()</td></tr></table></blockquote><p>Convert projection to string (getCode wrapper).</p><h4 class=CHeading>Returns</h4><p>{String} The projection code.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Projection.equals"></a>equals</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>equals: function(</td><td class="PParameter  prettyprint " nowrap>projection</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Test equality of two projection instances.&nbsp;  Determines equality based soley on the projection code.</p><h4 class=CHeading>Returns</h4><p>{Boolean} The two projections are equivalent.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Projection.destroy"></a>destroy</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">destroy: function()</td></tr></table></blockquote><p>Destroy projection object.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Projection.transform"></a>transform</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>ZOO.Projection.transform = function(</td><td class="PParameter  prettyprint " nowrap>point,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>source,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>dest</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Transform a point coordinate from one projection to another.&nbsp;  Note that the input point is transformed in place.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>point</td><td class=CDLDescription>{{ZOO.Geometry.Point&gt; | Object} An object with x and y properties representing coordinates in those dimensions.</td></tr><tr><td class=CDLEntry>sourceProj</td><td class=CDLDescription>{ZOO.Projection} Source map coordinate system</td></tr><tr><td class=CDLEntry>destProj</td><td class=CDLDescription>{ZOO.Projection} Destination map coordinate system</td></tr></table><h4 class=CHeading>Returns</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>point</td><td class=CDLDescription>{object} A transformed coordinate.&nbsp;  The original point is modified.</td></tr></table></div></div></div>

	<div class="CClass"><div class=CTopic><h2 class=CTitle><a name="ZOO.Format"></a>ZOO.<wbr>Format</h2><div class=CBody><p>Base class for format reading/writing a variety of formats.&nbsp; Subclasses of ZOO.Format are expected to have read and write methods.</p><!--START_ND_SUMMARY--><div class=Summary><div class=STitle>Summary</div><div class=SBorder><table border=0 cellspacing=0 cellpadding=0 class=STable><tr class="SGroup"><td class=SEntry><a href="#ZOO.Format.Properties" >Properties</a></td><td class=SDescription></td></tr><tr class="SProperty SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.options" >options</a></td><td class=SDescription>{Object} A reference to options passed to the constructor.</td></tr><tr class="SProperty SIndent1"><td class=SEntry><a href="#ZOO.Format.externalProjection" >externalProjection</a></td><td class=SDescription>{<a href="#ZOO.Projection" class=LClass id=link188 onMouseOver="ShowTip(event, 'tt31', 'link188')" onMouseOut="HideTip('tt31')">ZOO.Projection</a>} When passed a externalProjection and internalProjection, the format will reproject the geometries it reads or writes. </td></tr><tr class="SProperty SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.internalProjection" >internalProjection</a></td><td class=SDescription>{<a href="#ZOO.Projection" class=LClass id=link189 onMouseOver="ShowTip(event, 'tt31', 'link189')" onMouseOut="HideTip('tt31')">ZOO.Projection</a>} When passed a externalProjection and internalProjection, the format will reproject the geometries it reads or writes. </td></tr><tr class="SProperty SIndent1"><td class=SEntry><a href="#ZOO.Format.data" >data</a></td><td class=SDescription>{Object} When <a href="#ZOO.Format.keepData" class=LProperty id=link190 onMouseOver="ShowTip(event, 'tt32', 'link190')" onMouseOut="HideTip('tt32')">keepData</a> is true, this is the parsed string sent to <a href="#ZOO.Format.read" class=LFunction id=link191 onMouseOver="ShowTip(event, 'tt33', 'link191')" onMouseOut="HideTip('tt33')">read</a>.</td></tr><tr class="SProperty SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.keepData" >keepData</a></td><td class=SDescription>{Object} Maintain a reference (<a href="#ZOO.Format.data" class=LProperty id=link192 onMouseOver="ShowTip(event, 'tt34', 'link192')" onMouseOut="HideTip('tt34')">data</a>) to the most recently read data. </td></tr><tr class="SGroup"><td class=SEntry><a href="#ZOO.Format.Functions" >Functions</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.ZOO.Format" >ZOO.<wbr>Format</a></td><td class=SDescription>Instances of this class are not useful. </td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.destroy" id=link193 onMouseOver="ShowTip(event, 'tt35', 'link193')" onMouseOut="HideTip('tt35')">destroy</a></td><td class=SDescription>Clean up.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.read" id=link194 onMouseOver="ShowTip(event, 'tt33', 'link194')" onMouseOut="HideTip('tt33')">read</a></td><td class=SDescription>Read data from a string, and return an object whose type depends on the subclass.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.write" id=link195 onMouseOver="ShowTip(event, 'tt36', 'link195')" onMouseOut="HideTip('tt36')">write</a></td><td class=SDescription>Accept an object, and return a string.</td></tr></table></div></div><!--END_ND_SUMMARY--></div></div></div>

	<div class="CGroup"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.Properties"></a>Properties</h3></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.options"></a>options</h3><div class=CBody><p>{Object} A reference to options passed to the constructor.</p></div></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.externalProjection"></a>externalProjection</h3><div class=CBody><p>{<a href="#ZOO.Projection" class=LClass id=link196 onMouseOver="ShowTip(event, 'tt31', 'link196')" onMouseOut="HideTip('tt31')">ZOO.Projection</a>} When passed a externalProjection and internalProjection, the format will reproject the geometries it reads or writes.&nbsp; The externalProjection is the projection used by the content which is passed into read or which comes out of write.&nbsp; In order to reproject, a projection transformation function for the specified projections must be available.&nbsp; This support is provided via zoo-proj4js.</p></div></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.internalProjection"></a>internalProjection</h3><div class=CBody><p>{<a href="#ZOO.Projection" class=LClass id=link197 onMouseOver="ShowTip(event, 'tt31', 'link197')" onMouseOut="HideTip('tt31')">ZOO.Projection</a>} When passed a externalProjection and internalProjection, the format will reproject the geometries it reads or writes.&nbsp; The internalProjection is the projection used by the geometries which are returned by read or which are passed into write.&nbsp;  In order to reproject, a projection transformation function for the specified projections must be available.&nbsp; This support is provided via zoo-proj4js.</p></div></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.data"></a>data</h3><div class=CBody><p>{Object} When <a href="#ZOO.Format.keepData" class=LProperty id=link198 onMouseOver="ShowTip(event, 'tt32', 'link198')" onMouseOut="HideTip('tt32')">keepData</a> is true, this is the parsed string sent to <a href="#ZOO.Format.read" class=LFunction id=link199 onMouseOver="ShowTip(event, 'tt33', 'link199')" onMouseOut="HideTip('tt33')">read</a>.</p></div></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.keepData"></a>keepData</h3><div class=CBody><p>{Object} Maintain a reference (<a href="#ZOO.Format.data" class=LProperty id=link200 onMouseOver="ShowTip(event, 'tt34', 'link200')" onMouseOut="HideTip('tt34')">data</a>) to the most recently read data.&nbsp; Default is false.</p></div></div></div>

	<div class="CGroup"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.Functions"></a>Functions</h3></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.ZOO.Format"></a>ZOO.<wbr>Format</h3><div class=CBody><p>Instances of this class are not useful.&nbsp;  See one of the subclasses.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>options</td><td class=CDLDescription>{Object} An optional object with properties to set on the format</td></tr></table><h4 class=CHeading>Valid options</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>keepData</td><td class=CDLDescription>{Boolean} If true, upon <a href="#ZOO.Format.read" class=LFunction id=link201 onMouseOver="ShowTip(event, 'tt33', 'link201')" onMouseOut="HideTip('tt33')">read</a>, the data property will be set to the parsed object (e.g. the json or xml object).</td></tr></table><h4 class=CHeading>Returns</h4><p>An instance of ZOO.Format</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.destroy"></a>destroy</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">destroy: function()</td></tr></table></blockquote><p>Clean up.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.read"></a>read</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>read: function(</td><td class="PParameter  prettyprint " nowrap>data</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Read data from a string, and return an object whose type depends on the subclass.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>data</td><td class=CDLDescription>{string} Data to read/parse.</td></tr></table><h4 class=CHeading>Returns</h4><p>Depends on the subclass</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.write"></a>write</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>write: function(</td><td class="PParameter  prettyprint " nowrap>data</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Accept an object, and return a string.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>object</td><td class=CDLDescription>{Object} Object to be serialized</td></tr></table><h4 class=CHeading>Returns</h4><p>{String} A string representation of the object.</p></div></div></div>

	<div class="CClass"><div class=CTopic><h2 class=CTitle><a name="ZOO.Format.WKT"></a>ZOO.<wbr>Format.WKT</h2><div class=CBody><p>Class for reading and writing Well-Known Text.&nbsp; Create a new instance with the <a href="#ZOO.Format.WKT.ZOO.Format.WKT" class=LFunction id=link204 onMouseOver="ShowTip(event, 'tt145', 'link204')" onMouseOut="HideTip('tt145')">ZOO.Format.WKT</a> constructor.</p><h4 class=CHeading>Inherits from</h4><ul><li><a href="#ZOO.Format" class=LClass id=link205 onMouseOver="ShowTip(event, 'tt76', 'link205')" onMouseOut="HideTip('tt76')">ZOO.Format</a></li></ul><!--START_ND_SUMMARY--><div class=Summary><div class=STitle>Summary</div><div class=SBorder><table border=0 cellspacing=0 cellpadding=0 class=STable><tr class="SGroup"><td class=SEntry><a href="#ZOO.Format.WKT.Functions_and_Properties" >Functions and Properties</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.WKT.ZOO.Format.WKT" >ZOO.<wbr>Format.WKT</a></td><td class=SDescription>Create a new parser for WKT</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.WKT.read" id=link202 onMouseOver="ShowTip(event, 'tt37', 'link202')" onMouseOut="HideTip('tt37')">read</a></td><td class=SDescription>Deserialize a WKT string and return a vector feature or an array of vector features. </td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.WKT.write" id=link203 onMouseOver="ShowTip(event, 'tt38', 'link203')" onMouseOut="HideTip('tt38')">write</a></td><td class=SDescription>Serialize a feature or array of features into a WKT string.</td></tr><tr class="SProperty SIndent1"><td class=SEntry><a href="#ZOO.Format.WKT.extract" >extract</a></td><td class=SDescription>Object with properties corresponding to the geometry types. </td></tr><tr class="SProperty SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.WKT.parse" >parse</a></td><td class=SDescription>Object with properties corresponding to the geometry types. </td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.WKT.parse.point" >parse.<wbr>point</a></td><td class=SDescription>Return point feature given a point WKT fragment.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.WKT.parse.multipoint" >parse.<wbr>multipoint</a></td><td class=SDescription>Return a multipoint feature given a multipoint WKT fragment.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.WKT.parse.linestring" >parse.<wbr>linestring</a></td><td class=SDescription>Return a linestring feature given a linestring WKT fragment.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.WKT.parse.multilinestring" >parse.<wbr>multilinestring</a></td><td class=SDescription>Return a multilinestring feature given a multilinestring WKT fragment.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.WKT.parse.polygon" >parse.<wbr>polygon</a></td><td class=SDescription>Return a polygon feature given a polygon WKT fragment.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.WKT.parse.multipolygon" >parse.<wbr>multipolygon</a></td><td class=SDescription>Return a multipolygon feature given a multipolygon WKT fragment.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.WKT.parse.geometrycollection" >parse.<wbr>geometrycollection</a></td><td class=SDescription>Return an array of features given a geometrycollection WKT fragment.</td></tr></table></div></div><!--END_ND_SUMMARY--></div></div></div>

	<div class="CGroup"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.WKT.Functions_and_Properties"></a>Functions and Properties</h3></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.WKT.ZOO.Format.WKT"></a>ZOO.<wbr>Format.WKT</h3><div class=CBody><p>Create a new parser for WKT</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>options</td><td class=CDLDescription>{Object} An optional object whose properties will be set on this instance</td></tr></table><h4 class=CHeading>Returns</h4><p>{<a href="#ZOO.Format.WKT.ZOO.Format.WKT" class=LFunction id=link206 onMouseOver="ShowTip(event, 'tt145', 'link206')" onMouseOut="HideTip('tt145')">ZOO.Format.WKT</a>} A new WKT parser.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.WKT.read"></a>read</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>read: function(</td><td class="PParameter  prettyprint " nowrap>wkt</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Deserialize a WKT string and return a vector feature or an array of vector features.&nbsp;  Supports WKT for POINT, MULTIPOINT, LINESTRING, MULTILINESTRING, POLYGON, MULTIPOLYGON, and GEOMETRYCOLLECTION.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>wkt</td><td class=CDLDescription>{String} A WKT string</td></tr></table><h4 class=CHeading>Returns</h4><p>{&lt;ZOO.Feature.Vector&gt;|Array} A feature or array of features for GEOMETRYCOLLECTION WKT.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.WKT.write"></a>write</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>write: function(</td><td class="PParameter  prettyprint " nowrap>features</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Serialize a feature or array of features into a WKT string.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>features</td><td class=CDLDescription>{&lt;ZOO.Feature.Vector&gt;|Array} A feature or array of features</td></tr></table><h4 class=CHeading>Returns</h4><p>{String} The WKT string representation of the input geometries</p></div></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.WKT.extract"></a>extract</h3><div class=CBody><p>Object with properties corresponding to the geometry types.&nbsp; Property values are functions that do the actual data extraction.</p></div></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.WKT.parse"></a>parse</h3><div class=CBody><p>Object with properties corresponding to the geometry types.&nbsp; Property values are functions that do the actual parsing.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.WKT.parse.point"></a>parse.<wbr>point</h3><div class=CBody><p>Return point feature given a point WKT fragment.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>str</td><td class=CDLDescription>{String} A WKT fragment representing the point Returns: {<a href="#ZOO.Feature" class=LClass id=link207 onMouseOver="ShowTip(event, 'tt47', 'link207')" onMouseOut="HideTip('tt47')">ZOO.Feature</a>} A point feature</td></tr></table></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.WKT.parse.multipoint"></a>parse.<wbr>multipoint</h3><div class=CBody><p>Return a multipoint feature given a multipoint WKT fragment.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>str</td><td class=CDLDescription>{String} A WKT fragment representing the multipoint</td></tr></table><h4 class=CHeading>Returns</h4><p>{<a href="#ZOO.Feature" class=LClass id=link208 onMouseOver="ShowTip(event, 'tt47', 'link208')" onMouseOut="HideTip('tt47')">ZOO.Feature</a>} A multipoint feature</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.WKT.parse.linestring"></a>parse.<wbr>linestring</h3><div class=CBody><p>Return a linestring feature given a linestring WKT fragment.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>str</td><td class=CDLDescription>{String} A WKT fragment representing the linestring</td></tr></table><h4 class=CHeading>Returns</h4><p>{<a href="#ZOO.Feature" class=LClass id=link209 onMouseOver="ShowTip(event, 'tt47', 'link209')" onMouseOut="HideTip('tt47')">ZOO.Feature</a>} A linestring feature</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.WKT.parse.multilinestring"></a>parse.<wbr>multilinestring</h3><div class=CBody><p>Return a multilinestring feature given a multilinestring WKT fragment.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>str</td><td class=CDLDescription>{String} A WKT fragment representing the multilinestring</td></tr></table><h4 class=CHeading>Returns</h4><p>{<a href="#ZOO.Feature" class=LClass id=link210 onMouseOver="ShowTip(event, 'tt47', 'link210')" onMouseOut="HideTip('tt47')">ZOO.Feature</a>} A multilinestring feature</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.WKT.parse.polygon"></a>parse.<wbr>polygon</h3><div class=CBody><p>Return a polygon feature given a polygon WKT fragment.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>str</td><td class=CDLDescription>{String} A WKT fragment representing the polygon</td></tr></table><h4 class=CHeading>Returns</h4><p>{<a href="#ZOO.Feature" class=LClass id=link211 onMouseOver="ShowTip(event, 'tt47', 'link211')" onMouseOut="HideTip('tt47')">ZOO.Feature</a>} A polygon feature</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.WKT.parse.multipolygon"></a>parse.<wbr>multipolygon</h3><div class=CBody><p>Return a multipolygon feature given a multipolygon WKT fragment.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>str</td><td class=CDLDescription>{String} A WKT fragment representing the multipolygon</td></tr></table><h4 class=CHeading>Returns</h4><p>{<a href="#ZOO.Feature" class=LClass id=link212 onMouseOver="ShowTip(event, 'tt47', 'link212')" onMouseOut="HideTip('tt47')">ZOO.Feature</a>} A multipolygon feature</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.WKT.parse.geometrycollection"></a>parse.<wbr>geometrycollection</h3><div class=CBody><p>Return an array of features given a geometrycollection WKT fragment.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>str</td><td class=CDLDescription>{String} A WKT fragment representing the geometrycollection</td></tr></table><h4 class=CHeading>Returns</h4><p>{Array} An array of ZOO.Feature</p></div></div></div>

	<div class="CClass"><div class=CTopic><h2 class=CTitle><a name="ZOO.Format.JSON"></a>ZOO.<wbr>Format.JSON</h2><div class=CBody><p>A parser to read/write JSON safely.&nbsp; Create a new instance with the <a href="#ZOO.Format.JSON.ZOO.Format.JSON" class=LFunction id=link218 onMouseOver="ShowTip(event, 'tt146', 'link218')" onMouseOut="HideTip('tt146')">ZOO.Format.JSON</a> constructor.</p><h4 class=CHeading>Inherits from</h4><ul><li><a href="#ZOO.Format" class=LClass id=link219 onMouseOver="ShowTip(event, 'tt76', 'link219')" onMouseOut="HideTip('tt76')">ZOO.Format</a></li></ul><!--START_ND_SUMMARY--><div class=Summary><div class=STitle>Summary</div><div class=SBorder><table border=0 cellspacing=0 cellpadding=0 class=STable><tr class="SGroup"><td class=SEntry><a href="#ZOO.Format.JSON.Properties" >Properties</a></td><td class=SDescription></td></tr><tr class="SProperty SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.JSON.indent" >indent</a></td><td class=SDescription>{String} For &ldquo;pretty&rdquo; printing, the indent string will be used once for each indentation level.</td></tr><tr class="SProperty SIndent1"><td class=SEntry><a href="#ZOO.Format.JSON.space" >space</a></td><td class=SDescription>{String} For &ldquo;pretty&rdquo; printing, the space string will be used after the &ldquo;:&rdquo; separating a name/value pair.</td></tr><tr class="SProperty SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.JSON.newline" >newline</a></td><td class=SDescription>{String} For &ldquo;pretty&rdquo; printing, the newline string will be used at the end of each name/value pair or array item.</td></tr><tr class="SProperty SIndent1"><td class=SEntry><a href="#ZOO.Format.JSON.level" >level</a></td><td class=SDescription>{Integer} For &ldquo;pretty&rdquo; printing, this is incremented/decremented during serialization.</td></tr><tr class="SProperty SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.JSON.pretty" >pretty</a></td><td class=SDescription>{Boolean} Serialize with extra whitespace for structure. </td></tr><tr class="SGroup"><td class=SEntry><a href="#ZOO.Format.JSON.Functions" >Functions</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.JSON.ZOO.Format.JSON" >ZOO.<wbr>Format.JSON</a></td><td class=SDescription>Create a new parser for JSON.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.JSON.read" id=link213 onMouseOver="ShowTip(event, 'tt39', 'link213')" onMouseOut="HideTip('tt39')">read</a></td><td class=SDescription>Deserialize a json string.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.JSON.write" id=link214 onMouseOver="ShowTip(event, 'tt40', 'link214')" onMouseOut="HideTip('tt40')">write</a></td><td class=SDescription>Serialize an object into a JSON string.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.JSON.writeIndent" id=link215 onMouseOver="ShowTip(event, 'tt41', 'link215')" onMouseOut="HideTip('tt41')">writeIndent</a></td><td class=SDescription>Output an indentation string depending on the indentation level.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.JSON.writeNewline" id=link216 onMouseOver="ShowTip(event, 'tt42', 'link216')" onMouseOut="HideTip('tt42')">writeNewline</a></td><td class=SDescription>Output a string representing a newline if in pretty printing mode.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.JSON.writeSpace" id=link217 onMouseOver="ShowTip(event, 'tt43', 'link217')" onMouseOut="HideTip('tt43')">writeSpace</a></td><td class=SDescription>Output a string representing a space if in pretty printing mode.</td></tr><tr class="SGroup"><td class=SEntry><a href="#ZOO.Format.JSON.Properties" >Properties</a></td><td class=SDescription></td></tr><tr class="SProperty SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.JSON.serialize" >serialize</a></td><td class=SDescription>Object with properties corresponding to the serializable data types. </td></tr><tr class="SGroup"><td class=SEntry><a href="#ZOO.Format.JSON.Functions" >Functions</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.JSON.serialize.object" >serialize.<wbr>object</a></td><td class=SDescription>Transform an object into a JSON string.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.JSON.serialize.array" >serialize.<wbr>array</a></td><td class=SDescription>Transform an array into a JSON string.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.JSON.serialize.string" >serialize.<wbr>string</a></td><td class=SDescription>Transform a string into a JSON string.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.JSON.serialize.number" >serialize.<wbr>number</a></td><td class=SDescription>Transform a number into a JSON string.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.JSON.serialize.boolean" >serialize.<wbr>boolean</a></td><td class=SDescription>Transform a boolean into a JSON string.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.JSON.serialize.date" >serialize.date</a></td><td class=SDescription>Transform a date into a JSON string.</td></tr></table></div></div><!--END_ND_SUMMARY--></div></div></div>

	<div class="CGroup"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.JSON.Properties"></a>Properties</h3></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.JSON.indent"></a>indent</h3><div class=CBody><p>{String} For &ldquo;pretty&rdquo; printing, the indent string will be used once for each indentation level.</p></div></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.JSON.space"></a>space</h3><div class=CBody><p>{String} For &ldquo;pretty&rdquo; printing, the space string will be used after the &ldquo;:&rdquo; separating a name/value pair.</p></div></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.JSON.newline"></a>newline</h3><div class=CBody><p>{String} For &ldquo;pretty&rdquo; printing, the newline string will be used at the end of each name/value pair or array item.</p></div></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.JSON.level"></a>level</h3><div class=CBody><p>{Integer} For &ldquo;pretty&rdquo; printing, this is incremented/decremented during serialization.</p></div></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.JSON.pretty"></a>pretty</h3><div class=CBody><p>{Boolean} Serialize with extra whitespace for structure.&nbsp;  This is set by the <a href="#ZOO.Format.JSON.write" class=LFunction id=link220 onMouseOver="ShowTip(event, 'tt40', 'link220')" onMouseOut="HideTip('tt40')">write</a> method.</p></div></div></div>

	<div class="CGroup"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.JSON.Functions"></a>Functions</h3></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.JSON.ZOO.Format.JSON"></a>ZOO.<wbr>Format.JSON</h3><div class=CBody><p>Create a new parser for JSON.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>options</td><td class=CDLDescription>{Object} An optional object whose properties will be set on this instance.</td></tr></table></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.JSON.read"></a>read</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>read: function(</td><td class="PParameter  prettyprint " nowrap>json,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>filter</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Deserialize a json string.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>json</td><td class=CDLDescription>{String} A JSON string</td></tr><tr><td class=CDLEntry>filter</td><td class=CDLDescription>{Function} A function which will be called for every key and value at every level of the final result.&nbsp; Each value will be replaced by the result of the filter function.&nbsp; This can be used to reform generic objects into instances of classes, or to transform date strings into Date objects.</td></tr></table><h4 class=CHeading>Returns</h4><p>{Object} An object, array, string, or number .</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.JSON.write"></a>write</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>write: function(</td><td class="PParameter  prettyprint " nowrap>value,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>pretty</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Serialize an object into a JSON string.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>value</td><td class=CDLDescription>{String} The object, array, string, number, boolean or date to be serialized.</td></tr><tr><td class=CDLEntry>pretty</td><td class=CDLDescription>{Boolean} Structure the output with newlines and indentation.&nbsp; Default is false.</td></tr></table><h4 class=CHeading>Returns</h4><p>{String} The JSON string representation of the input value.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.JSON.writeIndent"></a>writeIndent</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">writeIndent: function()</td></tr></table></blockquote><p>Output an indentation string depending on the indentation level.</p><h4 class=CHeading>Returns</h4><p>{String} An appropriate indentation string.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.JSON.writeNewline"></a>writeNewline</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">writeNewline: function()</td></tr></table></blockquote><p>Output a string representing a newline if in pretty printing mode.</p><h4 class=CHeading>Returns</h4><p>{String} A string representing a new line.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.JSON.writeSpace"></a>writeSpace</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">writeSpace: function()</td></tr></table></blockquote><p>Output a string representing a space if in pretty printing mode.</p><h4 class=CHeading>Returns</h4><p>{String} A space.</p></div></div></div>

	<div class="CGroup"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.JSON.Properties"></a>Properties</h3></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.JSON.serialize"></a>serialize</h3><div class=CBody><p>Object with properties corresponding to the serializable data types.&nbsp; Property values are functions that do the actual serializing.</p></div></div></div>

	<div class="CGroup"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.JSON.Functions"></a>Functions</h3></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.JSON.serialize.object"></a>serialize.<wbr>object</h3><div class=CBody><p>Transform an object into a JSON string.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>object</td><td class=CDLDescription>{Object} The object to be serialized.</td></tr></table><h4 class=CHeading>Returns</h4><p>{String} A JSON string representing the object.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.JSON.serialize.array"></a>serialize.<wbr>array</h3><div class=CBody><p>Transform an array into a JSON string.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>array</td><td class=CDLDescription>{Array} The array to be serialized</td></tr></table><h4 class=CHeading>Returns</h4><p>{String} A JSON string representing the array.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.JSON.serialize.string"></a>serialize.<wbr>string</h3><div class=CBody><p>Transform a string into a JSON string.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>string</td><td class=CDLDescription>{String} The string to be serialized</td></tr></table><h4 class=CHeading>Returns</h4><p>{String} A JSON string representing the string.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.JSON.serialize.number"></a>serialize.<wbr>number</h3><div class=CBody><p>Transform a number into a JSON string.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>number</td><td class=CDLDescription>{Number} The number to be serialized.</td></tr></table><h4 class=CHeading>Returns</h4><p>{String} A JSON string representing the number.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.JSON.serialize.boolean"></a>serialize.<wbr>boolean</h3><div class=CBody><p>Transform a boolean into a JSON string.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>bool</td><td class=CDLDescription>{Boolean} The boolean to be serialized.</td></tr></table><h4 class=CHeading>Returns</h4><p>{String} A JSON string representing the boolean.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.JSON.serialize.date"></a>serialize.date</h3><div class=CBody><p>Transform a date into a JSON string.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>date</td><td class=CDLDescription>{Date} The date to be serialized.</td></tr></table><h4 class=CHeading>Returns</h4><p>{String} A JSON string representing the date.</p></div></div></div>

	<div class="CClass"><div class=CTopic><h2 class=CTitle><a name="ZOO.Format.GeoJSON"></a>ZOO.<wbr>Format.<wbr>GeoJSON</h2><div class=CBody><p>Read and write GeoJSON.&nbsp; Create a new parser with the <a href="#ZOO.Format.GeoJSON.ZOO.Format.GeoJSON" class=LFunction id=link236 onMouseOver="ShowTip(event, 'tt147', 'link236')" onMouseOut="HideTip('tt147')">ZOO.Format.GeoJSON</a> constructor.</p><h4 class=CHeading>Inherits from</h4><ul><li><a href="#ZOO.Format.JSON" class=LClass id=link237 onMouseOver="ShowTip(event, 'tt148', 'link237')" onMouseOut="HideTip('tt148')">ZOO.Format.JSON</a></li></ul><!--START_ND_SUMMARY--><div class=Summary><div class=STitle>Summary</div><div class=SBorder><table border=0 cellspacing=0 cellpadding=0 class=STable><tr class="SGroup"><td class=SEntry><a href="#ZOO.Format.GeoJSON.Functions" >Functions</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.GeoJSON.ZOO.Format.GeoJSON" >ZOO.<wbr>Format.<wbr>GeoJSON</a></td><td class=SDescription>Create a new parser for GeoJSON.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.GeoJSON.read" id=link221 onMouseOver="ShowTip(event, 'tt44', 'link221')" onMouseOut="HideTip('tt44')">read</a></td><td class=SDescription>Deserialize a GeoJSON string.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.GeoJSON.isValidType" id=link222 onMouseOver="ShowTip(event, 'tt45', 'link222')" onMouseOut="HideTip('tt45')">isValidType</a></td><td class=SDescription>Check if a GeoJSON object is a valid representative of the given type.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.GeoJSON.parseFeature" id=link223 onMouseOver="ShowTip(event, 'tt46', 'link223')" onMouseOut="HideTip('tt46')">parseFeature</a></td><td class=SDescription>Convert a feature object from GeoJSON into an <a href="#ZOO.Feature" class=LClass id=link224 onMouseOver="ShowTip(event, 'tt47', 'link224')" onMouseOut="HideTip('tt47')">ZOO.Feature</a>.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.GeoJSON.parseGeometry" id=link225 onMouseOver="ShowTip(event, 'tt48', 'link225')" onMouseOut="HideTip('tt48')">parseGeometry</a></td><td class=SDescription>Convert a geometry object from GeoJSON into an <a href="#ZOO.Geometry" class=LClass id=link226 onMouseOver="ShowTip(event, 'tt49', 'link226')" onMouseOut="HideTip('tt49')">ZOO.Geometry</a>.</td></tr><tr class="SGroup"><td class=SEntry><a href="#ZOO.Format.GeoJSON.Properties" >Properties</a></td><td class=SDescription></td></tr><tr class="SProperty SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.GeoJSON.parseCoords" >parseCoords</a></td><td class=SDescription>Object with properties corresponding to the GeoJSON geometry types. </td></tr><tr class="SGroup"><td class=SEntry><a href="#ZOO.Format.GeoJSON.Functions" >Functions</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.GeoJSON.parseCoords.point" >parseCoords.<wbr>point</a></td><td class=SDescription>Convert a coordinate array from GeoJSON into an <a href="#ZOO.Geometry.Point" class=LClass id=link227 onMouseOver="ShowTip(event, 'tt50', 'link227')" onMouseOut="HideTip('tt50')">ZOO.Geometry.Point</a>.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.GeoJSON.parseCoords.multipoint" >parseCoords.<wbr>multipoint</a></td><td class=SDescription>Convert a coordinate array from GeoJSON into an <a href="#ZOO.Geometry.MultiPoint" class=LClass id=link228 onMouseOver="ShowTip(event, 'tt51', 'link228')" onMouseOut="HideTip('tt51')">ZOO.Geometry.MultiPoint</a>.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.GeoJSON.parseCoords.linestring" >parseCoords.<wbr>linestring</a></td><td class=SDescription>Convert a coordinate array from GeoJSON into an <a href="#ZOO.Geometry.LineString" class=LClass id=link229 onMouseOver="ShowTip(event, 'tt52', 'link229')" onMouseOut="HideTip('tt52')">ZOO.Geometry.LineString</a>.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.GeoJSON.parseCoords.multilinestring" >parseCoords.<wbr>multilinestring</a></td><td class=SDescription>Convert a coordinate array from GeoJSON into an <a href="#ZOO.Geometry.MultiLineString" class=LClass id=link230 onMouseOver="ShowTip(event, 'tt53', 'link230')" onMouseOut="HideTip('tt53')">ZOO.Geometry.MultiLineString</a>.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.GeoJSON.parseCoords.polygon" >parseCoords.<wbr>polygon</a></td><td class=SDescription>Convert a coordinate array from GeoJSON into an <a href="#ZOO.Geometry.Polygon" class=LClass id=link231 onMouseOver="ShowTip(event, 'tt54', 'link231')" onMouseOut="HideTip('tt54')">ZOO.Geometry.Polygon</a>.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.GeoJSON.parseCoords.multipolygon" >parseCoords.<wbr>multipolygon</a></td><td class=SDescription>Convert a coordinate array from GeoJSON into an <a href="#ZOO.Geometry.MultiPolygon" class=LClass id=link232 onMouseOver="ShowTip(event, 'tt55', 'link232')" onMouseOut="HideTip('tt55')">ZOO.Geometry.MultiPolygon</a>.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.GeoJSON.parseCoords.box" >parseCoords.box</a></td><td class=SDescription>Convert a coordinate array from GeoJSON into an <a href="#ZOO.Geometry.Polygon" class=LClass id=link233 onMouseOver="ShowTip(event, 'tt54', 'link233')" onMouseOut="HideTip('tt54')">ZOO.Geometry.Polygon</a>.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.GeoJSON.write" id=link234 onMouseOver="ShowTip(event, 'tt56', 'link234')" onMouseOut="HideTip('tt56')">write</a></td><td class=SDescription>Serialize a feature, geometry, array of features into a GeoJSON string.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.GeoJSON.createCRSObject" id=link235 onMouseOver="ShowTip(event, 'tt57', 'link235')" onMouseOut="HideTip('tt57')">createCRSObject</a></td><td class=SDescription>Create the CRS object for an object.</td></tr><tr class="SGroup"><td class=SEntry><a href="#ZOO.Format.GeoJSON.Properties" >Properties</a></td><td class=SDescription></td></tr><tr class="SProperty SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.GeoJSON.extract" >extract</a></td><td class=SDescription>Object with properties corresponding to the GeoJSON types. </td></tr><tr class="SGroup"><td class=SEntry><a href="#ZOO.Format.GeoJSON.Functions" >Functions</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.GeoJSON.extract.feature" >extract.<wbr>feature</a></td><td class=SDescription>Return a partial GeoJSON object representing a single feature.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.GeoJSON.extract.geometry" >extract.<wbr>geometry</a></td><td class=SDescription>Return a GeoJSON object representing a single geometry.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.GeoJSON.extract.point" >extract.<wbr>point</a></td><td class=SDescription>Return an array of coordinates from a point.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.GeoJSON.extract.multipoint" >extract.<wbr>multipoint</a></td><td class=SDescription>Return an array of coordinates from a multipoint.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.GeoJSON.extract.linestring" >extract.<wbr>linestring</a></td><td class=SDescription>Return an array of coordinate arrays from a linestring.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.GeoJSON.extract.multilinestring" >extract.<wbr>multilinestring</a></td><td class=SDescription>Return an array of linestring arrays from a linestring.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.GeoJSON.extract.polygon" >extract.<wbr>polygon</a></td><td class=SDescription>Return an array of linear ring arrays from a polygon.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.GeoJSON.extract.multipolygon" >extract.<wbr>multipolygon</a></td><td class=SDescription>Return an array of polygon arrays from a multipolygon.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.GeoJSON.extract.collection" >extract.<wbr>collection</a></td><td class=SDescription>Return an array of geometries from a geometry collection.</td></tr></table></div></div><!--END_ND_SUMMARY--></div></div></div>

	<div class="CGroup"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GeoJSON.Functions"></a>Functions</h3></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GeoJSON.ZOO.Format.GeoJSON"></a>ZOO.<wbr>Format.<wbr>GeoJSON</h3><div class=CBody><p>Create a new parser for GeoJSON.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>options</td><td class=CDLDescription>{Object} An optional object whose properties will be set on this instance.</td></tr></table></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GeoJSON.read"></a>read</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>read: function(</td><td class="PParameter  prettyprint " nowrap>json,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>type,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>filter</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Deserialize a GeoJSON string.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>json</td><td class=CDLDescription>{String} A GeoJSON string</td></tr><tr><td class=CDLEntry>type</td><td class=CDLDescription>{String} Optional string that determines the structure of the output.&nbsp;  Supported values are &ldquo;Geometry&rdquo;, &ldquo;Feature&rdquo;, and &ldquo;FeatureCollection&rdquo;.&nbsp;  If absent or null, a default of &ldquo;FeatureCollection&rdquo; is assumed.</td></tr><tr><td class=CDLEntry>filter</td><td class=CDLDescription>{Function} A function which will be called for every key and value at every level of the final result.&nbsp; Each value will be replaced by the result of the filter function.&nbsp; This can be used to reform generic objects into instances of classes, or to transform date strings into Date objects.</td></tr></table><h4 class=CHeading>Returns</h4><p>{Object} The return depends on the value of the type argument.&nbsp; If type is &ldquo;FeatureCollection&rdquo; (the default), the return will be an array of <a href="#ZOO.Feature" class=LClass id=link238 onMouseOver="ShowTip(event, 'tt47', 'link238')" onMouseOut="HideTip('tt47')">ZOO.Feature</a>.&nbsp; If type is &ldquo;Geometry&rdquo;, the input json must represent a single geometry, and the return will be an <a href="#ZOO.Geometry" class=LClass id=link239 onMouseOver="ShowTip(event, 'tt49', 'link239')" onMouseOut="HideTip('tt49')">ZOO.Geometry</a>.&nbsp;  If type is &ldquo;Feature&rdquo;, the input json must represent a single feature, and the return will be an <a href="#ZOO.Feature" class=LClass id=link240 onMouseOver="ShowTip(event, 'tt47', 'link240')" onMouseOut="HideTip('tt47')">ZOO.Feature</a>.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GeoJSON.isValidType"></a>isValidType</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>isValidType: function(</td><td class="PParameter  prettyprint " nowrap>obj,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>type</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Check if a GeoJSON object is a valid representative of the given type.</p><h4 class=CHeading>Returns</h4><p>{Boolean} The object is valid GeoJSON object of the given type.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GeoJSON.parseFeature"></a>parseFeature</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>parseFeature: function(</td><td class="PParameter  prettyprint " nowrap>obj</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Convert a feature object from GeoJSON into an <a href="#ZOO.Feature" class=LClass id=link241 onMouseOver="ShowTip(event, 'tt47', 'link241')" onMouseOut="HideTip('tt47')">ZOO.Feature</a>.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>obj</td><td class=CDLDescription>{Object} An object created from a GeoJSON object</td></tr></table><h4 class=CHeading>Returns</h4><p>{<a href="#ZOO.Feature" class=LClass id=link242 onMouseOver="ShowTip(event, 'tt47', 'link242')" onMouseOut="HideTip('tt47')">ZOO.Feature</a>} A feature.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GeoJSON.parseGeometry"></a>parseGeometry</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>parseGeometry: function(</td><td class="PParameter  prettyprint " nowrap>obj</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Convert a geometry object from GeoJSON into an <a href="#ZOO.Geometry" class=LClass id=link243 onMouseOver="ShowTip(event, 'tt49', 'link243')" onMouseOut="HideTip('tt49')">ZOO.Geometry</a>.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>obj</td><td class=CDLDescription>{Object} An object created from a GeoJSON object</td></tr></table><h4 class=CHeading>Returns</h4><p>{<a href="#ZOO.Geometry" class=LClass id=link244 onMouseOver="ShowTip(event, 'tt49', 'link244')" onMouseOut="HideTip('tt49')">ZOO.Geometry</a>} A geometry.</p></div></div></div>

	<div class="CGroup"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GeoJSON.Properties"></a>Properties</h3></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GeoJSON.parseCoords"></a>parseCoords</h3><div class=CBody><p>Object with properties corresponding to the GeoJSON geometry types.&nbsp; Property values are functions that do the actual parsing.</p></div></div></div>

	<div class="CGroup"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GeoJSON.Functions"></a>Functions</h3></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GeoJSON.parseCoords.point"></a>parseCoords.<wbr>point</h3><div class=CBody><p>Convert a coordinate array from GeoJSON into an <a href="#ZOO.Geometry.Point" class=LClass id=link245 onMouseOver="ShowTip(event, 'tt50', 'link245')" onMouseOut="HideTip('tt50')">ZOO.Geometry.Point</a>.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>array</td><td class=CDLDescription>{Object} The coordinates array from the GeoJSON fragment.</td></tr></table><h4 class=CHeading>Returns</h4><p>{<a href="#ZOO.Geometry.Point" class=LClass id=link246 onMouseOver="ShowTip(event, 'tt50', 'link246')" onMouseOut="HideTip('tt50')">ZOO.Geometry.Point</a>} A geometry.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GeoJSON.parseCoords.multipoint"></a>parseCoords.<wbr>multipoint</h3><div class=CBody><p>Convert a coordinate array from GeoJSON into an <a href="#ZOO.Geometry.MultiPoint" class=LClass id=link247 onMouseOver="ShowTip(event, 'tt51', 'link247')" onMouseOut="HideTip('tt51')">ZOO.Geometry.MultiPoint</a>.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>array</td><td class=CDLDescription>{Object} The coordinates array from the GeoJSON fragment.</td></tr></table><h4 class=CHeading>Returns</h4><p>{<a href="#ZOO.Geometry.MultiPoint" class=LClass id=link248 onMouseOver="ShowTip(event, 'tt51', 'link248')" onMouseOut="HideTip('tt51')">ZOO.Geometry.MultiPoint</a>} A geometry.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GeoJSON.parseCoords.linestring"></a>parseCoords.<wbr>linestring</h3><div class=CBody><p>Convert a coordinate array from GeoJSON into an <a href="#ZOO.Geometry.LineString" class=LClass id=link249 onMouseOver="ShowTip(event, 'tt52', 'link249')" onMouseOut="HideTip('tt52')">ZOO.Geometry.LineString</a>.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>array</td><td class=CDLDescription>{Object} The coordinates array from the GeoJSON fragment.</td></tr></table><h4 class=CHeading>Returns</h4><p>{<a href="#ZOO.Geometry.LineString" class=LClass id=link250 onMouseOver="ShowTip(event, 'tt52', 'link250')" onMouseOut="HideTip('tt52')">ZOO.Geometry.LineString</a>} A geometry.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GeoJSON.parseCoords.multilinestring"></a>parseCoords.<wbr>multilinestring</h3><div class=CBody><p>Convert a coordinate array from GeoJSON into an <a href="#ZOO.Geometry.MultiLineString" class=LClass id=link251 onMouseOver="ShowTip(event, 'tt53', 'link251')" onMouseOut="HideTip('tt53')">ZOO.Geometry.MultiLineString</a>.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>array</td><td class=CDLDescription>{Object} The coordinates array from the GeoJSON fragment.</td></tr></table><h4 class=CHeading>Returns</h4><p>{<a href="#ZOO.Geometry.MultiLineString" class=LClass id=link252 onMouseOver="ShowTip(event, 'tt53', 'link252')" onMouseOut="HideTip('tt53')">ZOO.Geometry.MultiLineString</a>} A geometry.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GeoJSON.parseCoords.polygon"></a>parseCoords.<wbr>polygon</h3><div class=CBody><p>Convert a coordinate array from GeoJSON into an <a href="#ZOO.Geometry.Polygon" class=LClass id=link253 onMouseOver="ShowTip(event, 'tt54', 'link253')" onMouseOut="HideTip('tt54')">ZOO.Geometry.Polygon</a>.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>array</td><td class=CDLDescription>{Object} The coordinates array from the GeoJSON fragment.</td></tr></table><h4 class=CHeading>Returns</h4><p>{<a href="#ZOO.Geometry.Polygon" class=LClass id=link254 onMouseOver="ShowTip(event, 'tt54', 'link254')" onMouseOut="HideTip('tt54')">ZOO.Geometry.Polygon</a>} A geometry.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GeoJSON.parseCoords.multipolygon"></a>parseCoords.<wbr>multipolygon</h3><div class=CBody><p>Convert a coordinate array from GeoJSON into an <a href="#ZOO.Geometry.MultiPolygon" class=LClass id=link255 onMouseOver="ShowTip(event, 'tt55', 'link255')" onMouseOut="HideTip('tt55')">ZOO.Geometry.MultiPolygon</a>.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>array</td><td class=CDLDescription>{Object} The coordinates array from the GeoJSON fragment.</td></tr></table><h4 class=CHeading>Returns</h4><p>{<a href="#ZOO.Geometry.MultiPolygon" class=LClass id=link256 onMouseOver="ShowTip(event, 'tt55', 'link256')" onMouseOut="HideTip('tt55')">ZOO.Geometry.MultiPolygon</a>} A geometry.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GeoJSON.parseCoords.box"></a>parseCoords.box</h3><div class=CBody><p>Convert a coordinate array from GeoJSON into an <a href="#ZOO.Geometry.Polygon" class=LClass id=link257 onMouseOver="ShowTip(event, 'tt54', 'link257')" onMouseOut="HideTip('tt54')">ZOO.Geometry.Polygon</a>.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>array</td><td class=CDLDescription>{Object} The coordinates array from the GeoJSON fragment.</td></tr></table><h4 class=CHeading>Returns</h4><p>{<a href="#ZOO.Geometry.Polygon" class=LClass id=link258 onMouseOver="ShowTip(event, 'tt54', 'link258')" onMouseOut="HideTip('tt54')">ZOO.Geometry.Polygon</a>} A geometry.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GeoJSON.write"></a>write</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>write: function(</td><td class="PParameter  prettyprint " nowrap>obj,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>pretty</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Serialize a feature, geometry, array of features into a GeoJSON string.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>obj</td><td class=CDLDescription>{Object} An <a href="#ZOO.Feature" class=LClass id=link259 onMouseOver="ShowTip(event, 'tt47', 'link259')" onMouseOut="HideTip('tt47')">ZOO.Feature</a>, <a href="#ZOO.Geometry" class=LClass id=link260 onMouseOver="ShowTip(event, 'tt49', 'link260')" onMouseOut="HideTip('tt49')">ZOO.Geometry</a>, or an array of features.</td></tr><tr><td class=CDLEntry>pretty</td><td class=CDLDescription>{Boolean} Structure the output with newlines and indentation.&nbsp; Default is false.</td></tr></table><h4 class=CHeading>Returns</h4><p>{String} The GeoJSON string representation of the input geometry, features, or array of features.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GeoJSON.createCRSObject"></a>createCRSObject</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>createCRSObject: function(</td><td class="PParameter  prettyprint " nowrap>object</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Create the CRS object for an object.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>object</td><td class=CDLDescription>{<a href="#ZOO.Feature" class=LClass id=link261 onMouseOver="ShowTip(event, 'tt47', 'link261')" onMouseOut="HideTip('tt47')">ZOO.Feature</a>}</td></tr></table><h4 class=CHeading>Returns</h4><p>{Object} An object which can be assigned to the crs property of a GeoJSON object.</p></div></div></div>

	<div class="CGroup"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GeoJSON.Properties"></a>Properties</h3></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GeoJSON.extract"></a>extract</h3><div class=CBody><p>Object with properties corresponding to the GeoJSON types.&nbsp; Property values are functions that do the actual value extraction.</p></div></div></div>

	<div class="CGroup"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GeoJSON.Functions"></a>Functions</h3></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GeoJSON.extract.feature"></a>extract.<wbr>feature</h3><div class=CBody><p>Return a partial GeoJSON object representing a single feature.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>feature</td><td class=CDLDescription>{<a href="#ZOO.Feature" class=LClass id=link262 onMouseOver="ShowTip(event, 'tt47', 'link262')" onMouseOut="HideTip('tt47')">ZOO.Feature</a>}</td></tr></table><h4 class=CHeading>Returns</h4><p>{Object} An object representing the point.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GeoJSON.extract.geometry"></a>extract.<wbr>geometry</h3><div class=CBody><p>Return a GeoJSON object representing a single geometry.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>geometry</td><td class=CDLDescription>{<a href="#ZOO.Geometry" class=LClass id=link263 onMouseOver="ShowTip(event, 'tt49', 'link263')" onMouseOut="HideTip('tt49')">ZOO.Geometry</a>}</td></tr></table><h4 class=CHeading>Returns</h4><p>{Object} An object representing the geometry.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GeoJSON.extract.point"></a>extract.<wbr>point</h3><div class=CBody><p>Return an array of coordinates from a point.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>point</td><td class=CDLDescription>{<a href="#ZOO.Geometry.Point" class=LClass id=link264 onMouseOver="ShowTip(event, 'tt50', 'link264')" onMouseOut="HideTip('tt50')">ZOO.Geometry.Point</a>}</td></tr></table><h4 class=CHeading>Returns</h4><p>{Array} An array of coordinates representing the point.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GeoJSON.extract.multipoint"></a>extract.<wbr>multipoint</h3><div class=CBody><p>Return an array of coordinates from a multipoint.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>multipoint</td><td class=CDLDescription>{<a href="#ZOO.Geometry.MultiPoint" class=LClass id=link265 onMouseOver="ShowTip(event, 'tt51', 'link265')" onMouseOut="HideTip('tt51')">ZOO.Geometry.MultiPoint</a>}</td></tr></table><h4 class=CHeading>Returns</h4><p>{Array} An array of point coordinate arrays representing the multipoint.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GeoJSON.extract.linestring"></a>extract.<wbr>linestring</h3><div class=CBody><p>Return an array of coordinate arrays from a linestring.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>linestring</td><td class=CDLDescription>{<a href="#ZOO.Geometry.LineString" class=LClass id=link266 onMouseOver="ShowTip(event, 'tt52', 'link266')" onMouseOut="HideTip('tt52')">ZOO.Geometry.LineString</a>}</td></tr></table><h4 class=CHeading>Returns</h4><p>{Array} An array of coordinate arrays representing the linestring.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GeoJSON.extract.multilinestring"></a>extract.<wbr>multilinestring</h3><div class=CBody><p>Return an array of linestring arrays from a linestring.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>multilinestring</td><td class=CDLDescription>{<a href="#ZOO.Geometry.MultiLineString" class=LClass id=link267 onMouseOver="ShowTip(event, 'tt53', 'link267')" onMouseOut="HideTip('tt53')">ZOO.Geometry.MultiLineString</a>}</td></tr></table><h4 class=CHeading>Returns</h4><p>{Array} An array of linestring arrays representing the multilinestring.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GeoJSON.extract.polygon"></a>extract.<wbr>polygon</h3><div class=CBody><p>Return an array of linear ring arrays from a polygon.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>polygon</td><td class=CDLDescription>{<a href="#ZOO.Geometry.Polygon" class=LClass id=link268 onMouseOver="ShowTip(event, 'tt54', 'link268')" onMouseOut="HideTip('tt54')">ZOO.Geometry.Polygon</a>}</td></tr></table><h4 class=CHeading>Returns</h4><p>{Array} An array of linear ring arrays representing the polygon.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GeoJSON.extract.multipolygon"></a>extract.<wbr>multipolygon</h3><div class=CBody><p>Return an array of polygon arrays from a multipolygon.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>multipolygon</td><td class=CDLDescription>{<a href="#ZOO.Geometry.MultiPolygon" class=LClass id=link269 onMouseOver="ShowTip(event, 'tt55', 'link269')" onMouseOut="HideTip('tt55')">ZOO.Geometry.MultiPolygon</a>}</td></tr></table><h4 class=CHeading>Returns</h4><p>{Array} An array of polygon arrays representing the multipolygon</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GeoJSON.extract.collection"></a>extract.<wbr>collection</h3><div class=CBody><p>Return an array of geometries from a geometry collection.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>collection</td><td class=CDLDescription>{<a href="#ZOO.Geometry.Collection" class=LClass id=link270 onMouseOver="ShowTip(event, 'tt149', 'link270')" onMouseOut="HideTip('tt149')">ZOO.Geometry.Collection</a>}</td></tr></table><h4 class=CHeading>Returns</h4><p>{Array} An array of geometry objects representing the geometry collection.</p></div></div></div>

	<div class="CClass"><div class=CTopic><h2 class=CTitle><a name="ZOO.Format.KML"></a>ZOO.<wbr>Format.KML</h2><div class=CBody><p>Read/Write KML.&nbsp; Create a new instance with the <a href="#ZOO.Format.KML.ZOO.Format.KML" class=LFunction id=link279 onMouseOver="ShowTip(event, 'tt150', 'link279')" onMouseOut="HideTip('tt150')">ZOO.Format.KML</a> constructor.</p><h4 class=CHeading>Inherits from</h4><ul><li><a href="#ZOO.Format" class=LClass id=link280 onMouseOver="ShowTip(event, 'tt76', 'link280')" onMouseOut="HideTip('tt76')">ZOO.Format</a></li></ul><!--START_ND_SUMMARY--><div class=Summary><div class=STitle>Summary</div><div class=SBorder><table border=0 cellspacing=0 cellpadding=0 class=STable><tr class="SGroup"><td class=SEntry><a href="#ZOO.Format.KML.Properties_and_Functions" >Properties and Functions</a></td><td class=SDescription></td></tr><tr class="SProperty SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.KML.kmlns" >kmlns</a></td><td class=SDescription>{String} KML Namespace to use. </td></tr><tr class="SProperty SIndent1"><td class=SEntry><a href="#ZOO.Format.KML.foldersName" >foldersName</a></td><td class=SDescription>{String} Name of the folders. </td></tr><tr class="SProperty SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.KML.foldersDesc" >foldersDesc</a></td><td class=SDescription>{String} Description of the folders. </td></tr><tr class="SProperty SIndent1"><td class=SEntry><a href="#ZOO.Format.KML.placemarksDesc" >placemarksDesc</a></td><td class=SDescription>{String} Name of the placemarks. </td></tr><tr class="SProperty SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.KML.extractAttributes" >extractAttributes</a></td><td class=SDescription>{Boolean} Extract attributes from KML. </td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.KML.ZOO.Format.KML" >ZOO.<wbr>Format.KML</a></td><td class=SDescription>Create a new parser for KML.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.KML.parseFeatures" id=link271 onMouseOver="ShowTip(event, 'tt58', 'link271')" onMouseOut="HideTip('tt58')">parseFeatures</a></td><td class=SDescription>Loop through all Placemark nodes and parse them. </td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.KML.parseFeature" id=link272 onMouseOver="ShowTip(event, 'tt59', 'link272')" onMouseOut="HideTip('tt59')">parseFeature</a></td><td class=SDescription>This function is the core of the KML parsing code in ZOO. </td></tr><tr class="SProperty SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.KML.parseGeometry" >parseGeometry</a></td><td class=SDescription>Properties of this object are the functions that parse geometries based on their type.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.KML.parseGeometry.point" >parseGeometry.<wbr>point</a></td><td class=SDescription>Given a KML node representing a point geometry, create a ZOO point geometry.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.KML.parseGeometry.linestring" >parseGeometry.<wbr>linestring</a></td><td class=SDescription>Given a KML node representing a linestring geometry, create a ZOO linestring geometry.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.KML.parseGeometry.polygon" >parseGeometry.<wbr>polygon</a></td><td class=SDescription>Given a KML node representing a polygon geometry, create a ZOO polygon geometry.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.KML.parseGeometry.multigeometry" >parseGeometry.<wbr>multigeometry</a></td><td class=SDescription>Given a KML node representing a multigeometry, create a ZOO geometry collection.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.KML.parseAttributes" id=link273 onMouseOver="ShowTip(event, 'tt60', 'link273')" onMouseOut="HideTip('tt60')">parseAttributes</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.KML.parseExtendedData" id=link274 onMouseOver="ShowTip(event, 'tt61', 'link274')" onMouseOut="HideTip('tt61')">parseExtendedData</a></td><td class=SDescription>Parse ExtendedData from KML. </td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.KML.write" id=link275 onMouseOver="ShowTip(event, 'tt62', 'link275')" onMouseOut="HideTip('tt62')">write</a></td><td class=SDescription>Accept Feature Collection, and return a string.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.KML.createPlacemark" id=link276 onMouseOver="ShowTip(event, 'tt63', 'link276')" onMouseOut="HideTip('tt63')">createPlacemark</a></td><td class=SDescription>Creates and returns a KML placemark node representing the given feature.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.KML.buildGeometryNode" id=link277 onMouseOver="ShowTip(event, 'tt64', 'link277')" onMouseOut="HideTip('tt64')">buildGeometryNode</a></td><td class=SDescription>Builds and returns a KML geometry node with the given geometry.</td></tr><tr class="SProperty SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.KML.buildGeometry" >buildGeometry</a></td><td class=SDescription>Object containing methods to do the actual geometry node building based on geometry type.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.KML.buildGeometry.point" >buildGeometry.<wbr>point</a></td><td class=SDescription>Given a ZOO point geometry, create a KML point.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.KML.buildGeometry.multipoint" >buildGeometry.<wbr>multipoint</a></td><td class=SDescription>Given a ZOO multipoint geometry, create a KML GeometryCollection.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.KML.buildGeometry.linestring" >buildGeometry.<wbr>linestring</a></td><td class=SDescription>Given a ZOO linestring geometry, create a KML linestring.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.KML.buildGeometry.multilinestring" >buildGeometry.<wbr>multilinestring</a></td><td class=SDescription>Given a ZOO multilinestring geometry, create a KML GeometryCollection.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.KML.buildGeometry.linearring" >buildGeometry.<wbr>linearring</a></td><td class=SDescription>Given a ZOO linearring geometry, create a KML linearring.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.KML.buildGeometry.polygon" >buildGeometry.<wbr>polygon</a></td><td class=SDescription>Given a ZOO polygon geometry, create a KML polygon.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.KML.buildGeometry.multipolygon" >buildGeometry.<wbr>multipolygon</a></td><td class=SDescription>Given a ZOO multipolygon geometry, create a KML GeometryCollection.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.KML.buildGeometry.collection" >buildGeometry.<wbr>collection</a></td><td class=SDescription>Given a ZOO geometry collection, create a KML MultiGeometry.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.KML.buildCoordinatesNode" id=link278 onMouseOver="ShowTip(event, 'tt65', 'link278')" onMouseOut="HideTip('tt65')">buildCoordinatesNode</a></td><td class=SDescription>Builds and returns the KML coordinates node with the given geometry &lt;coordinates&gt;...&lt;/coordinates&gt;</td></tr></table></div></div><!--END_ND_SUMMARY--></div></div></div>

	<div class="CGroup"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.KML.Properties_and_Functions"></a>Properties and Functions</h3></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.KML.kmlns"></a>kmlns</h3><div class=CBody><p>{String} KML Namespace to use.&nbsp; Defaults to 2.2 namespace.</p></div></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.KML.foldersName"></a>foldersName</h3><div class=CBody><p>{String} Name of the folders.&nbsp;  Default is &ldquo;ZOO export&rdquo;.&nbsp; If set to null, no name element will be created.</p></div></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.KML.foldersDesc"></a>foldersDesc</h3><div class=CBody><p>{String} Description of the folders.&nbsp; Default is &ldquo;Exported on [date].&rdquo;&nbsp; If set to null, no description element will be created.</p></div></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.KML.placemarksDesc"></a>placemarksDesc</h3><div class=CBody><p>{String} Name of the placemarks.&nbsp;  Default is &ldquo;No description available&rdquo;.</p></div></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.KML.extractAttributes"></a>extractAttributes</h3><div class=CBody><p>{Boolean} Extract attributes from KML.&nbsp;  Default is true.&nbsp; Extracting styleUrls requires this to be set to true</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.KML.ZOO.Format.KML"></a>ZOO.<wbr>Format.KML</h3><div class=CBody><p>Create a new parser for KML.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>options</td><td class=CDLDescription>{Object} An optional object whose properties will be set on this instance.</td></tr></table></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.KML.parseFeatures"></a>parseFeatures</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>parseFeatures: function(</td><td class="PParameter  prettyprint " nowrap>nodes</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Loop through all Placemark nodes and parse them.&nbsp; Will create a list of features</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>nodes</td><td class=CDLDescription>{Array} of {E4XElement} data to read/parse.</td></tr><tr><td class=CDLEntry>options</td><td class=CDLDescription>{Object} Hash of options</td></tr></table></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.KML.parseFeature"></a>parseFeature</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>parseFeature: function(</td><td class="PParameter  prettyprint " nowrap>node</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>This function is the core of the KML parsing code in ZOO.&nbsp; It creates the geometries that are then attached to the returned feature, and calls parseAttributes() to get attribute data out.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>node</td><td class=CDLDescription>{E4XElement}</td></tr></table><h4 class=CHeading>Returns</h4><p>{<a href="#ZOO.Feature" class=LClass id=link281 onMouseOver="ShowTip(event, 'tt47', 'link281')" onMouseOut="HideTip('tt47')">ZOO.Feature</a>} A vector feature.</p></div></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.KML.parseGeometry"></a>parseGeometry</h3><div class=CBody><p>Properties of this object are the functions that parse geometries based on their type.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.KML.parseGeometry.point"></a>parseGeometry.<wbr>point</h3><div class=CBody><p>Given a KML node representing a point geometry, create a ZOO point geometry.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>node</td><td class=CDLDescription>{E4XElement} A KML Point node.</td></tr></table><h4 class=CHeading>Returns</h4><p>{<a href="#ZOO.Geometry.Point" class=LClass id=link282 onMouseOver="ShowTip(event, 'tt50', 'link282')" onMouseOut="HideTip('tt50')">ZOO.Geometry.Point</a>} A point geometry.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.KML.parseGeometry.linestring"></a>parseGeometry.<wbr>linestring</h3><div class=CBody><p>Given a KML node representing a linestring geometry, create a ZOO linestring geometry.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>node</td><td class=CDLDescription>{E4XElement} A KML LineString node.</td></tr></table><h4 class=CHeading>Returns</h4><p>{<a href="#ZOO.Geometry.LineString" class=LClass id=link283 onMouseOver="ShowTip(event, 'tt52', 'link283')" onMouseOut="HideTip('tt52')">ZOO.Geometry.LineString</a>} A linestring geometry.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.KML.parseGeometry.polygon"></a>parseGeometry.<wbr>polygon</h3><div class=CBody><p>Given a KML node representing a polygon geometry, create a ZOO polygon geometry.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>node</td><td class=CDLDescription>{E4XElement} A KML Polygon node.</td></tr></table><h4 class=CHeading>Returns</h4><p>{<a href="#ZOO.Geometry.Polygon" class=LClass id=link284 onMouseOver="ShowTip(event, 'tt54', 'link284')" onMouseOut="HideTip('tt54')">ZOO.Geometry.Polygon</a>} A polygon geometry.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.KML.parseGeometry.multigeometry"></a>parseGeometry.<wbr>multigeometry</h3><div class=CBody><p>Given a KML node representing a multigeometry, create a ZOO geometry collection.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>node</td><td class=CDLDescription>{E4XElement} A KML MultiGeometry node.</td></tr></table><h4 class=CHeading>Returns</h4><p>{<a href="#ZOO.Geometry.Collection" class=LClass id=link285 onMouseOver="ShowTip(event, 'tt149', 'link285')" onMouseOut="HideTip('tt149')">ZOO.Geometry.Collection</a>} A geometry collection.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.KML.parseAttributes"></a>parseAttributes</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>parseAttributes: function(</td><td class="PParameter  prettyprint " nowrap>node</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>node</td><td class=CDLDescription>{E4XElement}</td></tr></table><h4 class=CHeading>Returns</h4><p>{Object} An attributes object.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.KML.parseExtendedData"></a>parseExtendedData</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>parseExtendedData: function(</td><td class="PParameter  prettyprint " nowrap>node</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Parse ExtendedData from KML.&nbsp; Limited support for schemas/datatypes.&nbsp; See <a href="http://code.google.com/apis/kml/documentation/kmlreference.html#extendeddata" class=LURL target=_top>http://code.google.com<wbr>/apis<wbr>/kml<wbr>/documentation<wbr>/kmlreference.html#extendeddata</a> for more information on extendeddata.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>node</td><td class=CDLDescription>{E4XElement}</td></tr></table><h4 class=CHeading>Returns</h4><p>{Object} An attributes object.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.KML.write"></a>write</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>write: function(</td><td class="PParameter  prettyprint " nowrap>features</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Accept Feature Collection, and return a string.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>features</td><td class=CDLDescription>{Array(<a href="#ZOO.Feature" class=LClass id=link286 onMouseOver="ShowTip(event, 'tt47', 'link286')" onMouseOut="HideTip('tt47')">ZOO.Feature</a>} An array of features.</td></tr></table><h4 class=CHeading>Returns</h4><p>{String} A KML string.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.KML.createPlacemark"></a>createPlacemark</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>createPlacemark: function(</td><td class="PParameter  prettyprint " nowrap>feature</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Creates and returns a KML placemark node representing the given feature.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>feature</td><td class=CDLDescription>{<a href="#ZOO.Feature" class=LClass id=link287 onMouseOver="ShowTip(event, 'tt47', 'link287')" onMouseOut="HideTip('tt47')">ZOO.Feature</a>}</td></tr></table><h4 class=CHeading>Returns</h4><p>{E4XElement}</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.KML.buildGeometryNode"></a>buildGeometryNode</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>buildGeometryNode: function(</td><td class="PParameter  prettyprint " nowrap>geometry</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Builds and returns a KML geometry node with the given geometry.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>geometry</td><td class=CDLDescription>{<a href="#ZOO.Geometry" class=LClass id=link288 onMouseOver="ShowTip(event, 'tt49', 'link288')" onMouseOut="HideTip('tt49')">ZOO.Geometry</a>}</td></tr></table><h4 class=CHeading>Returns</h4><p>{E4XElement}</p></div></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.KML.buildGeometry"></a>buildGeometry</h3><div class=CBody><p>Object containing methods to do the actual geometry node building based on geometry type.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.KML.buildGeometry.point"></a>buildGeometry.<wbr>point</h3><div class=CBody><p>Given a ZOO point geometry, create a KML point.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>geometry</td><td class=CDLDescription>{<a href="#ZOO.Geometry.Point" class=LClass id=link289 onMouseOver="ShowTip(event, 'tt50', 'link289')" onMouseOut="HideTip('tt50')">ZOO.Geometry.Point</a>} A point geometry.</td></tr></table><h4 class=CHeading>Returns</h4><p>{E4XElement} A KML point node.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.KML.buildGeometry.multipoint"></a>buildGeometry.<wbr>multipoint</h3><div class=CBody><p>Given a ZOO multipoint geometry, create a KML GeometryCollection.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>geometry</td><td class=CDLDescription>{<a href="#ZOO.Geometry.MultiPoint" class=LClass id=link290 onMouseOver="ShowTip(event, 'tt51', 'link290')" onMouseOut="HideTip('tt51')">ZOO.Geometry.MultiPoint</a>} A multipoint geometry.</td></tr></table><h4 class=CHeading>Returns</h4><p>{E4XElement} A KML GeometryCollection node.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.KML.buildGeometry.linestring"></a>buildGeometry.<wbr>linestring</h3><div class=CBody><p>Given a ZOO linestring geometry, create a KML linestring.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>geometry</td><td class=CDLDescription>{<a href="#ZOO.Geometry.LineString" class=LClass id=link291 onMouseOver="ShowTip(event, 'tt52', 'link291')" onMouseOut="HideTip('tt52')">ZOO.Geometry.LineString</a>} A linestring geometry.</td></tr></table><h4 class=CHeading>Returns</h4><p>{E4XElement} A KML linestring node.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.KML.buildGeometry.multilinestring"></a>buildGeometry.<wbr>multilinestring</h3><div class=CBody><p>Given a ZOO multilinestring geometry, create a KML GeometryCollection.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>geometry</td><td class=CDLDescription>{<a href="#ZOO.Geometry.MultiLineString" class=LClass id=link292 onMouseOver="ShowTip(event, 'tt53', 'link292')" onMouseOut="HideTip('tt53')">ZOO.Geometry.MultiLineString</a>} A multilinestring geometry.</td></tr></table><h4 class=CHeading>Returns</h4><p>{E4XElement} A KML GeometryCollection node.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.KML.buildGeometry.linearring"></a>buildGeometry.<wbr>linearring</h3><div class=CBody><p>Given a ZOO linearring geometry, create a KML linearring.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>geometry</td><td class=CDLDescription>{<a href="#ZOO.Geometry.LinearRing" class=LClass id=link293 onMouseOver="ShowTip(event, 'tt137', 'link293')" onMouseOut="HideTip('tt137')">ZOO.Geometry.LinearRing</a>} A linearring geometry.</td></tr></table><h4 class=CHeading>Returns</h4><p>{E4XElement} A KML linearring node.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.KML.buildGeometry.polygon"></a>buildGeometry.<wbr>polygon</h3><div class=CBody><p>Given a ZOO polygon geometry, create a KML polygon.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>geometry</td><td class=CDLDescription>{<a href="#ZOO.Geometry.Polygon" class=LClass id=link294 onMouseOver="ShowTip(event, 'tt54', 'link294')" onMouseOut="HideTip('tt54')">ZOO.Geometry.Polygon</a>} A polygon geometry.</td></tr></table><h4 class=CHeading>Returns</h4><p>{E4XElement} A KML polygon node.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.KML.buildGeometry.multipolygon"></a>buildGeometry.<wbr>multipolygon</h3><div class=CBody><p>Given a ZOO multipolygon geometry, create a KML GeometryCollection.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>geometry</td><td class=CDLDescription>{<a href="#ZOO.Geometry.Point" class=LClass id=link295 onMouseOver="ShowTip(event, 'tt50', 'link295')" onMouseOut="HideTip('tt50')">ZOO.Geometry.Point</a>} A multipolygon geometry.</td></tr></table><h4 class=CHeading>Returns</h4><p>{E4XElement} A KML GeometryCollection node.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.KML.buildGeometry.collection"></a>buildGeometry.<wbr>collection</h3><div class=CBody><p>Given a ZOO geometry collection, create a KML MultiGeometry.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>geometry</td><td class=CDLDescription>{<a href="#ZOO.Geometry.Collection" class=LClass id=link296 onMouseOver="ShowTip(event, 'tt149', 'link296')" onMouseOut="HideTip('tt149')">ZOO.Geometry.Collection</a>} A geometry collection.</td></tr></table><h4 class=CHeading>Returns</h4><p>{E4XElement} A KML MultiGeometry node.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.KML.buildCoordinatesNode"></a>buildCoordinatesNode</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>buildCoordinatesNode: function(</td><td class="PParameter  prettyprint " nowrap>geometry</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Builds and returns the KML coordinates node with the given geometry &lt;coordinates&gt;...&lt;/coordinates&gt;</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>geometry</td><td class=CDLDescription>{<a href="#ZOO.Geometry" class=LClass id=link297 onMouseOver="ShowTip(event, 'tt49', 'link297')" onMouseOut="HideTip('tt49')">ZOO.Geometry</a>}</td></tr></table><h4 class=CHeading>Return</h4><p>{E4XElement}</p></div></div></div>

	<div class="CClass"><div class=CTopic><h2 class=CTitle><a name="ZOO.Format.GML"></a>ZOO.<wbr>Format.GML</h2><div class=CBody><p>Read/Write GML.&nbsp; Create a new instance with the <a href="#ZOO.Format.GML.ZOO.Format.GML" class=LFunction id=link305 onMouseOver="ShowTip(event, 'tt151', 'link305')" onMouseOut="HideTip('tt151')">ZOO.Format.GML</a> constructor.&nbsp;  Supports the GML simple features profile.</p><h4 class=CHeading>Inherits from</h4><ul><li><a href="#ZOO.Format" class=LClass id=link306 onMouseOver="ShowTip(event, 'tt76', 'link306')" onMouseOut="HideTip('tt76')">ZOO.Format</a></li></ul><!--START_ND_SUMMARY--><div class=Summary><div class=STitle>Summary</div><div class=SBorder><table border=0 cellspacing=0 cellpadding=0 class=STable><tr class="SGroup"><td class=SEntry><a href="#ZOO.Format.GML.Properties_and_Functions" >Properties and Functions</a></td><td class=SDescription></td></tr><tr class="SProperty SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.GML.schemaLocation" >schemaLocation</a></td><td class=SDescription>{String} Schema location for a particular minor version.</td></tr><tr class="SProperty SIndent1"><td class=SEntry><a href="#ZOO.Format.GML.namespaces" >namespaces</a></td><td class=SDescription>{Object} Mapping of namespace aliases to namespace URIs.</td></tr><tr class="SProperty SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.GML.defaultPrefix" >defaultPrefix</a></td><td class=SDescription></td></tr><tr class="SProperty SIndent1"><td class=SEntry><a href="#ZOO.Format.GML.collectionName" >collectionName</a></td><td class=SDescription>{String} Name of featureCollection element.</td></tr><tr class="SProperty SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.GML.featureName" >featureName</a></td><td class=SDescription>{String} Element name for features. </td></tr><tr class="SProperty SIndent1"><td class=SEntry><a href="#ZOO.Format.GML.geometryName" >geometryName</a></td><td class=SDescription>{String} Name of geometry element. </td></tr><tr class="SProperty SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.GML.xy" >xy</a></td><td class=SDescription>{Boolean} Order of the GML coordinate true:(x,y) or false:(y,x) Changing is not recommended, a new Format should be instantiated.</td></tr><tr class="SProperty SIndent1"><td class=SEntry><a href="#ZOO.Format.GML.extractAttributes" >extractAttributes</a></td><td class=SDescription>{Boolean} Could we extract attributes</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.GML.ZOO.Format.GML" >ZOO.<wbr>Format.GML</a></td><td class=SDescription>Create a new parser for GML.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.GML.read" id=link298 onMouseOver="ShowTip(event, 'tt66', 'link298')" onMouseOut="HideTip('tt66')">read</a></td><td class=SDescription>Read data from a string, and return a list of features.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.GML.parseFeature" id=link299 onMouseOver="ShowTip(event, 'tt67', 'link299')" onMouseOut="HideTip('tt67')">parseFeature</a></td><td class=SDescription>This function is the core of the GML parsing code in ZOO. </td></tr><tr class="SProperty SIndent1"><td class=SEntry><a href="#ZOO.Format.GML.parseGeometry" >parseGeometry</a></td><td class=SDescription>Properties of this object are the functions that parse geometries based on their type.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.GML.parseGeometry.point" >parseGeometry.<wbr>point</a></td><td class=SDescription>Given a GML node representing a point geometry, create a ZOO point geometry.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.GML.parseGeometry.multipoint" >parseGeometry.<wbr>multipoint</a></td><td class=SDescription>Given a GML node representing a multipoint geometry, create a ZOO multipoint geometry.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.GML.parseGeometry.linestring" >parseGeometry.<wbr>linestring</a></td><td class=SDescription>Given a GML node representing a linestring geometry, create a ZOO linestring geometry.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.GML.parseGeometry.multilinestring" >parseGeometry.<wbr>multilinestring</a></td><td class=SDescription>Given a GML node representing a multilinestring geometry, create a ZOO multilinestring geometry.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.GML.parseGeometry.polygon" >parseGeometry.<wbr>polygon</a></td><td class=SDescription>Given a GML node representing a polygon geometry, create a ZOO polygon geometry.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.GML.parseGeometry.multipolygon" >parseGeometry.<wbr>multipolygon</a></td><td class=SDescription>Given a GML node representing a multipolygon geometry, create a ZOO multipolygon geometry.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.GML.parseGeometry.polygon" >parseGeometry.<wbr>polygon</a></td><td class=SDescription>Given a GML node representing an envelope, create a ZOO polygon geometry.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.GML.parseAttributes" id=link300 onMouseOver="ShowTip(event, 'tt68', 'link300')" onMouseOut="HideTip('tt68')">parseAttributes</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.GML.write" id=link301 onMouseOver="ShowTip(event, 'tt69', 'link301')" onMouseOut="HideTip('tt69')">write</a></td><td class=SDescription>Generate a GML document string given a list of features.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.GML.createFeature" id=link302 onMouseOver="ShowTip(event, 'tt70', 'link302')" onMouseOut="HideTip('tt70')">createFeature</a></td><td class=SDescription>Accept an ZOO.Feature, and build a GML node for it.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.GML.buildGeometryNode" id=link303 onMouseOver="ShowTip(event, 'tt71', 'link303')" onMouseOut="HideTip('tt71')">buildGeometryNode</a></td><td class=SDescription></td></tr><tr class="SProperty SIndent1"><td class=SEntry><a href="#ZOO.Format.GML.buildGeometry" >buildGeometry</a></td><td class=SDescription>Object containing methods to do the actual geometry node building based on geometry type.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.GML.buildGeometry.point" >buildGeometry.<wbr>point</a></td><td class=SDescription>Given a ZOO point geometry, create a GML point.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.GML.buildGeometry.multipoint" >buildGeometry.<wbr>multipoint</a></td><td class=SDescription>Given a ZOO multipoint geometry, create a GML multipoint.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.GML.buildGeometry.linestring" >buildGeometry.<wbr>linestring</a></td><td class=SDescription>Given a ZOO linestring geometry, create a GML linestring.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.GML.buildGeometry.multilinestring" >buildGeometry.<wbr>multilinestring</a></td><td class=SDescription>Given a ZOO multilinestring geometry, create a GML multilinestring.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.GML.buildGeometry.linearring" >buildGeometry.<wbr>linearring</a></td><td class=SDescription>Given a ZOO linearring geometry, create a GML linearring.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.GML.buildGeometry.polygon" >buildGeometry.<wbr>polygon</a></td><td class=SDescription>Given an ZOO polygon geometry, create a GML polygon.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.GML.buildGeometry.multipolygon" >buildGeometry.<wbr>multipolygon</a></td><td class=SDescription>Given a ZOO multipolygon geometry, create a GML multipolygon.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.GML.buildCoordinatesNode" id=link304 onMouseOver="ShowTip(event, 'tt72', 'link304')" onMouseOut="HideTip('tt72')">buildCoordinatesNode</a></td><td class=SDescription>builds the coordinates XmlNode</td></tr></table></div></div><!--END_ND_SUMMARY--></div></div></div>

	<div class="CGroup"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GML.Properties_and_Functions"></a>Properties and Functions</h3></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GML.schemaLocation"></a>schemaLocation</h3><div class=CBody><p>{String} Schema location for a particular minor version.</p></div></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GML.namespaces"></a>namespaces</h3><div class=CBody><p>{Object} Mapping of namespace aliases to namespace URIs.</p></div></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GML.defaultPrefix"></a>defaultPrefix</h3></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GML.collectionName"></a>collectionName</h3><div class=CBody><p>{String} Name of featureCollection element.</p></div></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GML.featureName"></a>featureName</h3><div class=CBody><p>{String} Element name for features.&nbsp; Default is &ldquo;sql_statement&rdquo;.</p></div></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GML.geometryName"></a>geometryName</h3><div class=CBody><p>{String} Name of geometry element.&nbsp;  Defaults to &ldquo;geometryProperty&rdquo;.</p></div></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GML.xy"></a>xy</h3><div class=CBody><p>{Boolean} Order of the GML coordinate true:(x,y) or false:(y,x) Changing is not recommended, a new Format should be instantiated.</p></div></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GML.extractAttributes"></a>extractAttributes</h3><div class=CBody><p>{Boolean} Could we extract attributes</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GML.ZOO.Format.GML"></a>ZOO.<wbr>Format.GML</h3><div class=CBody><p>Create a new parser for GML.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>options</td><td class=CDLDescription>{Object} An optional object whose properties will be set on this instance.</td></tr></table></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GML.read"></a>read</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>read: function(</td><td class="PParameter  prettyprint " nowrap>data</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Read data from a string, and return a list of features.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>data</td><td class=CDLDescription>{String} data to read/parse.</td></tr></table><h4 class=CHeading>Returns</h4><p>{Array(<a href="#ZOO.Feature" class=LClass id=link307 onMouseOver="ShowTip(event, 'tt47', 'link307')" onMouseOut="HideTip('tt47')">ZOO.Feature</a>)} An array of features.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GML.parseFeature"></a>parseFeature</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>parseFeature: function(</td><td class="PParameter  prettyprint " nowrap>node</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>This function is the core of the GML parsing code in ZOO.&nbsp; It creates the geometries that are then attached to the returned feature, and calls parseAttributes() to get attribute data out.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>node</td><td class=CDLDescription>{E4XElement} A GML feature node.</td></tr></table></div></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GML.parseGeometry"></a>parseGeometry</h3><div class=CBody><p>Properties of this object are the functions that parse geometries based on their type.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GML.parseGeometry.point"></a>parseGeometry.<wbr>point</h3><div class=CBody><p>Given a GML node representing a point geometry, create a ZOO point geometry.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>node</td><td class=CDLDescription>{E4XElement} A GML node.</td></tr></table><h4 class=CHeading>Returns</h4><p>{<a href="#ZOO.Geometry.Point" class=LClass id=link308 onMouseOver="ShowTip(event, 'tt50', 'link308')" onMouseOut="HideTip('tt50')">ZOO.Geometry.Point</a>} A point geometry.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GML.parseGeometry.multipoint"></a>parseGeometry.<wbr>multipoint</h3><div class=CBody><p>Given a GML node representing a multipoint geometry, create a ZOO multipoint geometry.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>node</td><td class=CDLDescription>{E4XElement} A GML node.</td></tr></table><h4 class=CHeading>Returns</h4><p>{<a href="#ZOO.Geometry.MultiPoint" class=LClass id=link309 onMouseOver="ShowTip(event, 'tt51', 'link309')" onMouseOut="HideTip('tt51')">ZOO.Geometry.MultiPoint</a>} A multipoint geometry.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GML.parseGeometry.linestring"></a>parseGeometry.<wbr>linestring</h3><div class=CBody><p>Given a GML node representing a linestring geometry, create a ZOO linestring geometry.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>node</td><td class=CDLDescription>{E4XElement} A GML node.</td></tr></table><h4 class=CHeading>Returns</h4><p>{<a href="#ZOO.Geometry.LineString" class=LClass id=link310 onMouseOver="ShowTip(event, 'tt52', 'link310')" onMouseOut="HideTip('tt52')">ZOO.Geometry.LineString</a>} A linestring geometry.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GML.parseGeometry.multilinestring"></a>parseGeometry.<wbr>multilinestring</h3><div class=CBody><p>Given a GML node representing a multilinestring geometry, create a ZOO multilinestring geometry.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>node</td><td class=CDLDescription>{E4XElement} A GML node.</td></tr></table><h4 class=CHeading>Returns</h4><p>{<a href="#ZOO.Geometry.MultiLineString" class=LClass id=link311 onMouseOver="ShowTip(event, 'tt53', 'link311')" onMouseOut="HideTip('tt53')">ZOO.Geometry.MultiLineString</a>} A multilinestring geometry.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GML.parseGeometry.polygon"></a>parseGeometry.<wbr>polygon</h3><div class=CBody><p>Given a GML node representing a polygon geometry, create a ZOO polygon geometry.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>node</td><td class=CDLDescription>{E4XElement} A GML node.</td></tr></table><h4 class=CHeading>Returns</h4><p>{<a href="#ZOO.Geometry.Polygon" class=LClass id=link312 onMouseOver="ShowTip(event, 'tt54', 'link312')" onMouseOut="HideTip('tt54')">ZOO.Geometry.Polygon</a>} A polygon geometry.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GML.parseGeometry.multipolygon"></a>parseGeometry.<wbr>multipolygon</h3><div class=CBody><p>Given a GML node representing a multipolygon geometry, create a ZOO multipolygon geometry.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>node</td><td class=CDLDescription>{E4XElement} A GML node.</td></tr></table><h4 class=CHeading>Returns</h4><p>{<a href="#ZOO.Geometry.MultiPolygon" class=LClass id=link313 onMouseOver="ShowTip(event, 'tt55', 'link313')" onMouseOut="HideTip('tt55')">ZOO.Geometry.MultiPolygon</a>} A multipolygon geometry.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GML.parseGeometry.polygon"></a>parseGeometry.<wbr>polygon</h3><div class=CBody><p>Given a GML node representing an envelope, create a ZOO polygon geometry.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>node</td><td class=CDLDescription>{E4XElement} A GML node.</td></tr></table><h4 class=CHeading>Returns</h4><p>{<a href="#ZOO.Geometry.Polygon" class=LClass id=link314 onMouseOver="ShowTip(event, 'tt54', 'link314')" onMouseOut="HideTip('tt54')">ZOO.Geometry.Polygon</a>} A polygon geometry.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GML.parseAttributes"></a>parseAttributes</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>parseAttributes: function(</td><td class="PParameter  prettyprint " nowrap>node</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>node</td><td class=CDLDescription>{&lt;E4XElement&gt;}</td></tr></table><h4 class=CHeading>Returns</h4><p>{Object} An attributes object.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GML.write"></a>write</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>write: function(</td><td class="PParameter  prettyprint " nowrap>features</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Generate a GML document string given a list of features.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>features</td><td class=CDLDescription>{Array(<a href="#ZOO.Feature" class=LClass id=link315 onMouseOver="ShowTip(event, 'tt47', 'link315')" onMouseOut="HideTip('tt47')">ZOO.Feature</a>)} List of features to serialize into a string.</td></tr></table><h4 class=CHeading>Returns</h4><p>{String} A string representing the GML document.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GML.createFeature"></a>createFeature</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>createFeature: function(</td><td class="PParameter  prettyprint " nowrap>feature</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Accept an ZOO.Feature, and build a GML node for it.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>feature</td><td class=CDLDescription>{<a href="#ZOO.Feature" class=LClass id=link316 onMouseOver="ShowTip(event, 'tt47', 'link316')" onMouseOut="HideTip('tt47')">ZOO.Feature</a>} The feature to be built as GML.</td></tr></table><h4 class=CHeading>Returns</h4><p>{E4XElement} A node reprensting the feature in GML.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GML.buildGeometryNode"></a>buildGeometryNode</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>buildGeometryNode: function(</td><td class="PParameter  prettyprint " nowrap>geometry</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>geometry</td><td class=CDLDescription>{<a href="#ZOO.Geometry" class=LClass id=link317 onMouseOver="ShowTip(event, 'tt49', 'link317')" onMouseOut="HideTip('tt49')">ZOO.Geometry</a>} The geometry to be built as GML.</td></tr></table><h4 class=CHeading>Returns</h4><p>{E4XElement} A node reprensting the geometry in GML.</p></div></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GML.buildGeometry"></a>buildGeometry</h3><div class=CBody><p>Object containing methods to do the actual geometry node building based on geometry type.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GML.buildGeometry.point"></a>buildGeometry.<wbr>point</h3><div class=CBody><p>Given a ZOO point geometry, create a GML point.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>geometry</td><td class=CDLDescription>{<a href="#ZOO.Geometry.Point" class=LClass id=link318 onMouseOver="ShowTip(event, 'tt50', 'link318')" onMouseOut="HideTip('tt50')">ZOO.Geometry.Point</a>} A point geometry.</td></tr></table><h4 class=CHeading>Returns</h4><p>{E4XElement} A GML point node.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GML.buildGeometry.multipoint"></a>buildGeometry.<wbr>multipoint</h3><div class=CBody><p>Given a ZOO multipoint geometry, create a GML multipoint.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>geometry</td><td class=CDLDescription>{<a href="#ZOO.Geometry.MultiPoint" class=LClass id=link319 onMouseOver="ShowTip(event, 'tt51', 'link319')" onMouseOut="HideTip('tt51')">ZOO.Geometry.MultiPoint</a>} A multipoint geometry.</td></tr></table><h4 class=CHeading>Returns</h4><p>{E4XElement} A GML multipoint node.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GML.buildGeometry.linestring"></a>buildGeometry.<wbr>linestring</h3><div class=CBody><p>Given a ZOO linestring geometry, create a GML linestring.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>geometry</td><td class=CDLDescription>{<a href="#ZOO.Geometry.LineString" class=LClass id=link320 onMouseOver="ShowTip(event, 'tt52', 'link320')" onMouseOut="HideTip('tt52')">ZOO.Geometry.LineString</a>} A linestring geometry.</td></tr></table><h4 class=CHeading>Returns</h4><p>{E4XElement} A GML linestring node.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GML.buildGeometry.multilinestring"></a>buildGeometry.<wbr>multilinestring</h3><div class=CBody><p>Given a ZOO multilinestring geometry, create a GML multilinestring.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>geometry</td><td class=CDLDescription>{<a href="#ZOO.Geometry.MultiLineString" class=LClass id=link321 onMouseOver="ShowTip(event, 'tt53', 'link321')" onMouseOut="HideTip('tt53')">ZOO.Geometry.MultiLineString</a>} A multilinestring geometry.</td></tr></table><h4 class=CHeading>Returns</h4><p>{E4XElement} A GML multilinestring node.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GML.buildGeometry.linearring"></a>buildGeometry.<wbr>linearring</h3><div class=CBody><p>Given a ZOO linearring geometry, create a GML linearring.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>geometry</td><td class=CDLDescription>{<a href="#ZOO.Geometry.LinearRing" class=LClass id=link322 onMouseOver="ShowTip(event, 'tt137', 'link322')" onMouseOut="HideTip('tt137')">ZOO.Geometry.LinearRing</a>} A linearring geometry.</td></tr></table><h4 class=CHeading>Returns</h4><p>{E4XElement} A GML linearring node.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GML.buildGeometry.polygon"></a>buildGeometry.<wbr>polygon</h3><div class=CBody><p>Given an ZOO polygon geometry, create a GML polygon.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>geometry</td><td class=CDLDescription>{<a href="#ZOO.Geometry.Polygon" class=LClass id=link323 onMouseOver="ShowTip(event, 'tt54', 'link323')" onMouseOut="HideTip('tt54')">ZOO.Geometry.Polygon</a>} A polygon geometry.</td></tr></table><h4 class=CHeading>Returns</h4><p>{E4XElement} A GML polygon node.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GML.buildGeometry.multipolygon"></a>buildGeometry.<wbr>multipolygon</h3><div class=CBody><p>Given a ZOO multipolygon geometry, create a GML multipolygon.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>geometry</td><td class=CDLDescription>{<a href="#ZOO.Geometry.MultiPolygon" class=LClass id=link324 onMouseOver="ShowTip(event, 'tt55', 'link324')" onMouseOut="HideTip('tt55')">ZOO.Geometry.MultiPolygon</a>} A multipolygon geometry.</td></tr></table><h4 class=CHeading>Returns</h4><p>{E4XElement} A GML multipolygon node.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.GML.buildCoordinatesNode"></a>buildCoordinatesNode</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>buildCoordinatesNode: function(</td><td class="PParameter  prettyprint " nowrap>geometry</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>builds the coordinates XmlNode</p><blockquote><pre class="prettyprint">&lt;gml:coordinates decimal=&quot;.&quot; cs=&quot;,&quot; ts=&quot; &quot;&gt;...&lt;/gml:coordinates&gt;</pre></blockquote><p>Parameters: geometry - {<a href="#ZOO.Geometry" class=LClass id=link325 onMouseOver="ShowTip(event, 'tt49', 'link325')" onMouseOut="HideTip('tt49')">ZOO.Geometry</a>}</p><h4 class=CHeading>Returns</h4><p>{E4XElement} created E4XElement</p></div></div></div>

	<div class="CClass"><div class=CTopic><h2 class=CTitle><a name="ZOO.Format.WPS"></a>ZOO.<wbr>Format.WPS</h2><div class=CBody><p>Read/Write WPS.&nbsp; Create a new instance with the <a href="#ZOO.Format.WPS" class=LClass id=link328 onMouseOver="ShowTip(event, 'tt152', 'link328')" onMouseOut="HideTip('tt152')">ZOO.Format.WPS</a> constructor.&nbsp; Supports only parseExecuteResponse.</p><h4 class=CHeading>Inherits from</h4><ul><li><a href="#ZOO.Format" class=LClass id=link329 onMouseOver="ShowTip(event, 'tt76', 'link329')" onMouseOut="HideTip('tt76')">ZOO.Format</a></li></ul><!--START_ND_SUMMARY--><div class=Summary><div class=STitle>Summary</div><div class=SBorder><table border=0 cellspacing=0 cellpadding=0 class=STable><tr class="SGroup"><td class=SEntry><a href="#ZOO.Format.WPS.Properties_and_Functions" >Properties and Functions</a></td><td class=SDescription></td></tr><tr class="SProperty SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.WPS.schemaLocation" >schemaLocation</a></td><td class=SDescription>{String} Schema location for a particular minor version.</td></tr><tr class="SProperty SIndent1"><td class=SEntry><a href="#ZOO.Format.WPS.namespaces" >namespaces</a></td><td class=SDescription>{Object} Mapping of namespace aliases to namespace URIs.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.WPS.read" id=link326 onMouseOver="ShowTip(event, 'tt73', 'link326')" onMouseOut="HideTip('tt73')">read</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.WPS.parseExecuteResponse" id=link327 onMouseOver="ShowTip(event, 'tt74', 'link327')" onMouseOut="HideTip('tt74')">parseExecuteResponse</a></td><td class=SDescription></td></tr><tr class="SProperty SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.WPS.parseData" >parseData</a></td><td class=SDescription>Object containing methods to analyse data response.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.WPS.parseData.complexdata" >parseData.<wbr>complexdata</a></td><td class=SDescription>Given an Object representing the WPS complex data response.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Format.WPS.parseData.literaldata" >parseData.<wbr>literaldata</a></td><td class=SDescription>Given an Object representing the WPS literal data response.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Format.WPS.parseData.reference" >parseData.<wbr>reference</a></td><td class=SDescription>Given an Object representing the WPS reference response.</td></tr></table></div></div><!--END_ND_SUMMARY--></div></div></div>

	<div class="CGroup"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.WPS.Properties_and_Functions"></a>Properties and Functions</h3></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.WPS.schemaLocation"></a>schemaLocation</h3><div class=CBody><p>{String} Schema location for a particular minor version.</p></div></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.WPS.namespaces"></a>namespaces</h3><div class=CBody><p>{Object} Mapping of namespace aliases to namespace URIs.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.WPS.read"></a>read</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>read:function(</td><td class="PParameter  prettyprint " nowrap>data</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>data</td><td class=CDLDescription>{String} A WPS xml document</td></tr></table><h4 class=CHeading>Returns</h4><p>{Object} Execute response.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.WPS.parseExecuteResponse"></a>parseExecuteResponse</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>parseExecuteResponse: function(</td><td class="PParameter  prettyprint " nowrap>node</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>node</td><td class=CDLDescription>{E4XElement} A WPS ExecuteResponse document</td></tr></table><h4 class=CHeading>Returns</h4><p>{Object} Execute response.</p></div></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.WPS.parseData"></a>parseData</h3><div class=CBody><p>Object containing methods to analyse data response.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.WPS.parseData.complexdata"></a>parseData.<wbr>complexdata</h3><div class=CBody><p>Given an Object representing the WPS complex data response.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>node</td><td class=CDLDescription>{E4XElement} A WPS node.</td></tr></table><h4 class=CHeading>Returns</h4><p>{Object} A WPS complex data response.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.WPS.parseData.literaldata"></a>parseData.<wbr>literaldata</h3><div class=CBody><p>Given an Object representing the WPS literal data response.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>node</td><td class=CDLDescription>{E4XElement} A WPS node.</td></tr></table><h4 class=CHeading>Returns</h4><p>{Object} A WPS literal data response.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Format.WPS.parseData.reference"></a>parseData.<wbr>reference</h3><div class=CBody><p>Given an Object representing the WPS reference response.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>node</td><td class=CDLDescription>{E4XElement} A WPS node.</td></tr></table><h4 class=CHeading>Returns</h4><p>{Object} A WPS reference response.</p></div></div></div>

	<div class="CClass"><div class=CTopic><h2 class=CTitle><a name="ZOO.Feature"></a>ZOO.<wbr>Feature</h2><div class=CBody><p>Vector features use the ZOO.Geometry classes as geometry description.&nbsp; They have an &lsquo;attributes&rsquo; property, which is the data object</p><!--START_ND_SUMMARY--><div class=Summary><div class=STitle>Summary</div><div class=SBorder><table border=0 cellspacing=0 cellpadding=0 class=STable><tr class="SGroup"><td class=SEntry><a href="#ZOO.Feature.Properties" >Properties</a></td><td class=SDescription></td></tr><tr class="SProperty SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Feature.fid" >fid</a></td><td class=SDescription>{String}</td></tr><tr class="SProperty SIndent1"><td class=SEntry><a href="#ZOO.Feature.geometry" >geometry</a></td><td class=SDescription>{<a href="#ZOO.Geometry" class=LClass id=link330 onMouseOver="ShowTip(event, 'tt49', 'link330')" onMouseOut="HideTip('tt49')">ZOO.Geometry</a>}</td></tr><tr class="SProperty SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Feature.attributes" >attributes</a></td><td class=SDescription>{Object} This object holds arbitrary properties that describe the feature.</td></tr><tr class="SProperty SIndent1"><td class=SEntry><a href="#ZOO.Feature.bounds" >bounds</a></td><td class=SDescription>{<a href="#ZOO.Bounds" class=LClass id=link331 onMouseOver="ShowTip(event, 'tt75', 'link331')" onMouseOut="HideTip('tt75')">ZOO.Bounds</a>} The box bounding that feature&rsquo;s geometry, that property can be set by an <a href="#ZOO.Format" class=LClass id=link332 onMouseOver="ShowTip(event, 'tt76', 'link332')" onMouseOut="HideTip('tt76')">ZOO.Format</a> object when deserializing the feature, so in most cases it represents an information set by the server.</td></tr><tr class="SGroup"><td class=SEntry><a href="#ZOO.Feature.Functions" >Functions</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Feature.ZOO.Feature" >ZOO.<wbr>Feature</a></td><td class=SDescription>Create a vector feature.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Feature.destroy" id=link333 onMouseOver="ShowTip(event, 'tt77', 'link333')" onMouseOut="HideTip('tt77')">destroy</a></td><td class=SDescription>nullify references to prevent circular references and memory leaks</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Feature.clone" id=link334 onMouseOver="ShowTip(event, 'tt78', 'link334')" onMouseOut="HideTip('tt78')">clone</a></td><td class=SDescription>Create a clone of this vector feature. </td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Feature.move" id=link335 onMouseOver="ShowTip(event, 'tt79', 'link335')" onMouseOut="HideTip('tt79')">move</a></td><td class=SDescription>Moves the feature and redraws it at its new location</td></tr></table></div></div><!--END_ND_SUMMARY--></div></div></div>

	<div class="CGroup"><div class=CTopic><h3 class=CTitle><a name="ZOO.Feature.Properties"></a>Properties</h3></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Feature.fid"></a>fid</h3><div class=CBody><p>{String}</p></div></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Feature.geometry"></a>geometry</h3><div class=CBody><p>{<a href="#ZOO.Geometry" class=LClass id=link336 onMouseOver="ShowTip(event, 'tt49', 'link336')" onMouseOut="HideTip('tt49')">ZOO.Geometry</a>}</p></div></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Feature.attributes"></a>attributes</h3><div class=CBody><p>{Object} This object holds arbitrary properties that describe the feature.</p></div></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Feature.bounds"></a>bounds</h3><div class=CBody><p>{<a href="#ZOO.Bounds" class=LClass id=link337 onMouseOver="ShowTip(event, 'tt75', 'link337')" onMouseOut="HideTip('tt75')">ZOO.Bounds</a>} The box bounding that feature&rsquo;s geometry, that property can be set by an <a href="#ZOO.Format" class=LClass id=link338 onMouseOver="ShowTip(event, 'tt76', 'link338')" onMouseOut="HideTip('tt76')">ZOO.Format</a> object when deserializing the feature, so in most cases it represents an information set by the server.</p></div></div></div>

	<div class="CGroup"><div class=CTopic><h3 class=CTitle><a name="ZOO.Feature.Functions"></a>Functions</h3></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Feature.ZOO.Feature"></a>ZOO.<wbr>Feature</h3><div class=CBody><p>Create a vector feature.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>geometry</td><td class=CDLDescription>{<a href="#ZOO.Geometry" class=LClass id=link339 onMouseOver="ShowTip(event, 'tt49', 'link339')" onMouseOut="HideTip('tt49')">ZOO.Geometry</a>} The geometry that this feature represents.</td></tr><tr><td class=CDLEntry>attributes</td><td class=CDLDescription>{Object} An optional object that will be mapped to the <a href="#ZOO.Feature.attributes" class=LProperty id=link340 onMouseOver="ShowTip(event, 'tt153', 'link340')" onMouseOut="HideTip('tt153')">attributes</a> property.</td></tr></table></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Feature.destroy"></a>destroy</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">destroy: function()</td></tr></table></blockquote><p>nullify references to prevent circular references and memory leaks</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Feature.clone"></a>clone</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">clone: function ()</td></tr></table></blockquote><p>Create a clone of this vector feature.&nbsp;  Does not set any non-standard properties.</p><h4 class=CHeading>Returns</h4><p>{<a href="#ZOO.Feature.ZOO.Feature" class=LFunction id=link341 onMouseOver="ShowTip(event, 'tt154', 'link341')" onMouseOut="HideTip('tt154')">ZOO.Feature</a>} An exact clone of this vector feature.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Feature.move"></a>move</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>move: function(</td><td class="PParameter  prettyprint " nowrap>x,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>y</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Moves the feature and redraws it at its new location</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>x</td><td class=CDLDescription>{Float}</td></tr><tr><td class=CDLEntry>y</td><td class=CDLDescription>{Float}</td></tr></table></div></div></div>

	<div class="CClass"><div class=CTopic><h2 class=CTitle><a name="ZOO.Geometry"></a>ZOO.<wbr>Geometry</h2><div class=CBody><p>A Geometry is a description of a geographic object.&nbsp; Create an instance of this class with the <a href="#ZOO.Geometry.ZOO.Geometry" class=LFunction id=link352 onMouseOver="ShowTip(event, 'tt80', 'link352')" onMouseOut="HideTip('tt80')">ZOO.Geometry</a> constructor.&nbsp; This is a base class, typical geometry types are described by subclasses of this class.</p><!--START_ND_SUMMARY--><div class=Summary><div class=STitle>Summary</div><div class=SBorder><table border=0 cellspacing=0 cellpadding=0 class=STable><tr class="SGroup"><td class=SEntry><a href="#ZOO.Geometry.Properties" >Properties</a></td><td class=SDescription></td></tr><tr class="SProperty SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Geometry.id" >id</a></td><td class=SDescription>{String} A unique identifier for this geometry.</td></tr><tr class="SProperty SIndent1"><td class=SEntry><a href="#ZOO.Geometry.parent" >parent</a></td><td class=SDescription>{<a href="#ZOO.Geometry.ZOO.Geometry" class=LFunction id=link342 onMouseOver="ShowTip(event, 'tt80', 'link342')" onMouseOut="HideTip('tt80')">ZOO.Geometry</a>}This is set when a Geometry is added as component of another geometry</td></tr><tr class="SProperty SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Geometry.bounds" >bounds</a></td><td class=SDescription>{<a href="#ZOO.Bounds" class=LClass id=link343 onMouseOver="ShowTip(event, 'tt75', 'link343')" onMouseOut="HideTip('tt75')">ZOO.Bounds</a>} The bounds of this geometry</td></tr><tr class="SGroup"><td class=SEntry><a href="#ZOO.Geometry.Functions" >Functions</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Geometry.ZOO.Geometry" >ZOO.<wbr>Geometry</a></td><td class=SDescription>Creates a geometry object.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Geometry.destroy" id=link344 onMouseOver="ShowTip(event, 'tt81', 'link344')" onMouseOut="HideTip('tt81')">destroy</a></td><td class=SDescription>Destroy this geometry.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Geometry.clone" id=link345 onMouseOver="ShowTip(event, 'tt82', 'link345')" onMouseOut="HideTip('tt82')">clone</a></td><td class=SDescription>Create a clone of this geometry. </td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Geometry.extendBounds" id=link346 onMouseOver="ShowTip(event, 'tt83', 'link346')" onMouseOut="HideTip('tt83')">extendBounds</a></td><td class=SDescription>Extend the existing bounds to include the new bounds. </td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Geometry.clearBounds" id=link347 onMouseOver="ShowTip(event, 'tt84', 'link347')" onMouseOut="HideTip('tt84')">clearBounds</a></td><td class=SDescription>Nullify this components bounds and that of its parent as well.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Geometry.getBounds" id=link348 onMouseOver="ShowTip(event, 'tt85', 'link348')" onMouseOut="HideTip('tt85')">getBounds</a></td><td class=SDescription>Get the bounds for this Geometry. </td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Geometry.calculateBounds" id=link349 onMouseOver="ShowTip(event, 'tt86', 'link349')" onMouseOut="HideTip('tt86')">calculateBounds</a></td><td class=SDescription>Recalculate the bounds for the geometry.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Geometry.toString" id=link350 onMouseOver="ShowTip(event, 'tt87', 'link350')" onMouseOut="HideTip('tt87')">toString</a></td><td class=SDescription>Returns the Well-Known Text representation of a geometry</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Geometry.ZOO.Geometry.fromWKT" id=link351 onMouseOver="ShowTip(event, 'tt88', 'link351')" onMouseOut="HideTip('tt88')">ZOO.<wbr>Geometry.<wbr>fromWKT</a></td><td class=SDescription>Generate a geometry given a Well-Known Text string.</td></tr></table></div></div><!--END_ND_SUMMARY--></div></div></div>

	<div class="CGroup"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Properties"></a>Properties</h3></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.id"></a>id</h3><div class=CBody><p>{String} A unique identifier for this geometry.</p></div></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.parent"></a>parent</h3><div class=CBody><p>{<a href="#ZOO.Geometry.ZOO.Geometry" class=LFunction id=link353 onMouseOver="ShowTip(event, 'tt80', 'link353')" onMouseOut="HideTip('tt80')">ZOO.Geometry</a>}This is set when a Geometry is added as component of another geometry</p></div></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.bounds"></a>bounds</h3><div class=CBody><p>{<a href="#ZOO.Bounds" class=LClass id=link354 onMouseOver="ShowTip(event, 'tt75', 'link354')" onMouseOut="HideTip('tt75')">ZOO.Bounds</a>} The bounds of this geometry</p></div></div></div>

	<div class="CGroup"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Functions"></a>Functions</h3></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.ZOO.Geometry"></a>ZOO.<wbr>Geometry</h3><div class=CBody><p>Creates a geometry object.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.destroy"></a>destroy</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">destroy: function()</td></tr></table></blockquote><p>Destroy this geometry.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.clone"></a>clone</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">clone: function()</td></tr></table></blockquote><p>Create a clone of this geometry.&nbsp;  Does not set any non-standard properties of the cloned geometry.</p><h4 class=CHeading>Returns</h4><p>{<a href="#ZOO.Geometry.ZOO.Geometry" class=LFunction id=link355 onMouseOver="ShowTip(event, 'tt80', 'link355')" onMouseOut="HideTip('tt80')">ZOO.Geometry</a>} An exact clone of this geometry.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.extendBounds"></a>extendBounds</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>extendBounds: function(</td><td class="PParameter  prettyprint " nowrap>newBounds</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Extend the existing bounds to include the new bounds.&nbsp; If geometry&rsquo;s bounds is not yet set, then set a new Bounds.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>newBounds</td><td class=CDLDescription>{<a href="#ZOO.Bounds" class=LClass id=link356 onMouseOver="ShowTip(event, 'tt75', 'link356')" onMouseOut="HideTip('tt75')">ZOO.Bounds</a>}</td></tr></table></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.clearBounds"></a>clearBounds</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">clearBounds: function()</td></tr></table></blockquote><p>Nullify this components bounds and that of its parent as well.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.getBounds"></a>getBounds</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">getBounds: function()</td></tr></table></blockquote><p>Get the bounds for this Geometry.&nbsp; If bounds is not set, it is calculated again, this makes queries faster.</p><h4 class=CHeading>Returns</h4><p>{<a href="#ZOO.Bounds" class=LClass id=link357 onMouseOver="ShowTip(event, 'tt75', 'link357')" onMouseOut="HideTip('tt75')">ZOO.Bounds</a>}</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.calculateBounds"></a>calculateBounds</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">calculateBounds: function()</td></tr></table></blockquote><p>Recalculate the bounds for the geometry.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.toString"></a>toString</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">toString: function()</td></tr></table></blockquote><p>Returns the Well-Known Text representation of a geometry</p><h4 class=CHeading>Returns</h4><p>{String} Well-Known Text</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.ZOO.Geometry.fromWKT"></a>ZOO.<wbr>Geometry.<wbr>fromWKT</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>ZOO.Geometry.fromWKT = function(</td><td class="PParameter  prettyprint " nowrap>wkt</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Generate a geometry given a Well-Known Text string.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>wkt</td><td class=CDLDescription>{String} A string representing the geometry in Well-Known Text.</td></tr></table><h4 class=CHeading>Returns</h4><p>{<a href="#ZOO.Geometry.ZOO.Geometry" class=LFunction id=link358 onMouseOver="ShowTip(event, 'tt80', 'link358')" onMouseOut="HideTip('tt80')">ZOO.Geometry</a>} A geometry of the appropriate class.</p></div></div></div>

	<div class="CClass"><div class=CTopic><h2 class=CTitle><a name="ZOO.Geometry.Collection"></a>ZOO.<wbr>Geometry.<wbr>Collection</h2><div class=CBody><p>A Collection is exactly what it sounds like: A collection of different Geometries.&nbsp; These are stored in the local parameter <a href="#ZOO.Geometry.Collection.components" class=LProperty id=link378 onMouseOver="ShowTip(event, 'tt155', 'link378')" onMouseOut="HideTip('tt155')">components</a> (which can be passed as a parameter to the constructor).</p><p>As new geometries are added to the collection, they are NOT cloned.&nbsp; When removing geometries, they need to be specified by reference (ie you have to pass in the <b>exact</b> geometry to be removed).</p><p>The &lt;getArea&gt; and <a href="#ZOO.Geometry.Collection.getLength" class=LFunction id=link379 onMouseOver="ShowTip(event, 'tt96', 'link379')" onMouseOut="HideTip('tt96')">getLength</a> functions here merely iterate through the components, summing their respective areas and lengths.</p><p>Create a new instance with the <a href="#ZOO.Geometry.Collection.ZOO.Geometry.Collection" class=LFunction id=link380 onMouseOver="ShowTip(event, 'tt156', 'link380')" onMouseOut="HideTip('tt156')">ZOO.Geometry.Collection</a> constructor.</p><h4 class=CHeading>Inerhits from</h4><ul><li><a href="#ZOO.Geometry" class=LClass id=link381 onMouseOver="ShowTip(event, 'tt49', 'link381')" onMouseOut="HideTip('tt49')">ZOO.Geometry</a></li></ul><!--START_ND_SUMMARY--><div class=Summary><div class=STitle>Summary</div><div class=SBorder><table border=0 cellspacing=0 cellpadding=0 class=STable><tr class="SGroup"><td class=SEntry><a href="#ZOO.Geometry.Collection.Properties" >Properties</a></td><td class=SDescription></td></tr><tr class="SProperty SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Geometry.Collection.components" >components</a></td><td class=SDescription>{Array(<a href="#ZOO.Geometry" class=LClass id=link359 onMouseOver="ShowTip(event, 'tt49', 'link359')" onMouseOut="HideTip('tt49')">ZOO.Geometry</a>)} The component parts of this geometry</td></tr><tr class="SProperty SIndent1"><td class=SEntry><a href="#ZOO.Geometry.Collection.componentTypes" >componentTypes</a></td><td class=SDescription>{Array(String)} An array of class names representing the types of components that the collection can include. </td></tr><tr class="SGroup"><td class=SEntry><a href="#ZOO.Geometry.Collection.Functions" >Functions</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Geometry.Collection.ZOO.Geometry.Collection" >ZOO.<wbr>Geometry.<wbr>Collection</a></td><td class=SDescription>Creates a Geometry Collection -- a list of geoms.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Geometry.Collection.destroy" id=link360 onMouseOver="ShowTip(event, 'tt89', 'link360')" onMouseOut="HideTip('tt89')">destroy</a></td><td class=SDescription>Destroy this geometry.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Geometry.Collection.clone" id=link361 onMouseOver="ShowTip(event, 'tt90', 'link361')" onMouseOut="HideTip('tt90')">clone</a></td><td class=SDescription>Clone this geometry.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Geometry.Collection.getComponentsString" id=link362 onMouseOver="ShowTip(event, 'tt91', 'link362')" onMouseOut="HideTip('tt91')">getComponentsString</a></td><td class=SDescription>Get a string representing the components for this collection</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Geometry.Collection.calculateBounds" id=link363 onMouseOver="ShowTip(event, 'tt92', 'link363')" onMouseOut="HideTip('tt92')">calculateBounds</a></td><td class=SDescription>Recalculate the bounds by iterating through the components and calling calling extendBounds() on each item.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Geometry.Collection.addComponent" id=link364 onMouseOver="ShowTip(event, 'tt93', 'link364')" onMouseOut="HideTip('tt93')">addComponent</a></td><td class=SDescription>Add a new component (geometry) to the collection. </td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Geometry.Collection.removeComponents" id=link365 onMouseOver="ShowTip(event, 'tt94', 'link365')" onMouseOut="HideTip('tt94')">removeComponents</a></td><td class=SDescription>Remove components from this geometry.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Geometry.Collection.removeComponent" id=link366 onMouseOver="ShowTip(event, 'tt95', 'link366')" onMouseOut="HideTip('tt95')">removeComponent</a></td><td class=SDescription>Remove a component from this geometry.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Geometry.Collection.getLength" id=link367 onMouseOver="ShowTip(event, 'tt96', 'link367')" onMouseOut="HideTip('tt96')">getLength</a></td><td class=SDescription>Calculate the length of this geometry</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Geometry.Collection.getCentroid" id=link368 onMouseOver="ShowTip(event, 'tt97', 'link368')" onMouseOut="HideTip('tt97')">getCentroid</a></td><td class=SDescription>{<a href="#ZOO.Geometry.Point" class=LClass id=link369 onMouseOver="ShowTip(event, 'tt50', 'link369')" onMouseOut="HideTip('tt50')">ZOO.Geometry.Point</a>} The centroid of the collection</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Geometry.Collection.getGeodesicLength" id=link370 onMouseOver="ShowTip(event, 'tt98', 'link370')" onMouseOut="HideTip('tt98')">getGeodesicLength</a></td><td class=SDescription>Calculate the approximate length of the geometry were it projected onto the earth.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Geometry.Collection.move" id=link371 onMouseOver="ShowTip(event, 'tt99', 'link371')" onMouseOut="HideTip('tt99')">move</a></td><td class=SDescription>Moves a geometry by the given displacement along positive x and y axes. </td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Geometry.Collection.rotate" id=link372 onMouseOver="ShowTip(event, 'tt100', 'link372')" onMouseOut="HideTip('tt100')">rotate</a></td><td class=SDescription>Rotate a geometry around some origin</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Geometry.Collection.resize" id=link373 onMouseOver="ShowTip(event, 'tt101', 'link373')" onMouseOut="HideTip('tt101')">resize</a></td><td class=SDescription>Resize a geometry relative to some origin. </td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Geometry.Collection.equals" id=link374 onMouseOver="ShowTip(event, 'tt102', 'link374')" onMouseOut="HideTip('tt102')">equals</a></td><td class=SDescription>Determine whether another geometry is equivalent to this one. </td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Geometry.Collection.transform" id=link375 onMouseOver="ShowTip(event, 'tt103', 'link375')" onMouseOut="HideTip('tt103')">transform</a></td><td class=SDescription>Reproject the components geometry from source to dest.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Geometry.Collection.intersects" id=link376 onMouseOver="ShowTip(event, 'tt104', 'link376')" onMouseOut="HideTip('tt104')">intersects</a></td><td class=SDescription>Determine if the input geometry intersects this one.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Geometry.Collection.getVertices" id=link377 onMouseOver="ShowTip(event, 'tt105', 'link377')" onMouseOut="HideTip('tt105')">getVertices</a></td><td class=SDescription>Return a list of all points in this geometry.</td></tr></table></div></div><!--END_ND_SUMMARY--></div></div></div>

	<div class="CGroup"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Collection.Properties"></a>Properties</h3></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Collection.components"></a>components</h3><div class=CBody><p>{Array(<a href="#ZOO.Geometry" class=LClass id=link382 onMouseOver="ShowTip(event, 'tt49', 'link382')" onMouseOut="HideTip('tt49')">ZOO.Geometry</a>)} The component parts of this geometry</p></div></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Collection.componentTypes"></a>componentTypes</h3><div class=CBody><p>{Array(String)} An array of class names representing the types of components that the collection can include.&nbsp;  A null value means the component types are not restricted.</p></div></div></div>

	<div class="CGroup"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Collection.Functions"></a>Functions</h3></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Collection.ZOO.Geometry.Collection"></a>ZOO.<wbr>Geometry.<wbr>Collection</h3><div class=CBody><p>Creates a Geometry Collection -- a list of geoms.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>components</td><td class=CDLDescription>{Array(<a href="#ZOO.Geometry" class=LClass id=link383 onMouseOver="ShowTip(event, 'tt49', 'link383')" onMouseOut="HideTip('tt49')">ZOO.Geometry</a>)} Optional array of geometries</td></tr></table></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Collection.destroy"></a>destroy</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">destroy: function ()</td></tr></table></blockquote><p>Destroy this geometry.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Collection.clone"></a>clone</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">clone: function()</td></tr></table></blockquote><p>Clone this geometry.</p><h4 class=CHeading>Returns</h4><p>{<a href="#ZOO.Geometry.Collection.ZOO.Geometry.Collection" class=LFunction id=link384 onMouseOver="ShowTip(event, 'tt156', 'link384')" onMouseOut="HideTip('tt156')">ZOO.Geometry.Collection</a>} An exact clone of this collection</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Collection.getComponentsString"></a>getComponentsString</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">getComponentsString: function()</td></tr></table></blockquote><p>Get a string representing the components for this collection</p><h4 class=CHeading>Returns</h4><p>{String} A string representation of the components of this geometry</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Collection.calculateBounds"></a>calculateBounds</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">calculateBounds: function()</td></tr></table></blockquote><p>Recalculate the bounds by iterating through the components and calling calling extendBounds() on each item.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Collection.addComponent"></a>addComponent</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>addComponent: function(</td><td class="PParameter  prettyprint " nowrap>component,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>index</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Add a new component (geometry) to the collection.&nbsp;  If this.componentTypes is set, then the component class name must be in the componentTypes array.</p><p>The bounds cache is reset.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>component</td><td class=CDLDescription>{<a href="#ZOO.Geometry" class=LClass id=link385 onMouseOver="ShowTip(event, 'tt49', 'link385')" onMouseOut="HideTip('tt49')">ZOO.Geometry</a>} A geometry to add</td></tr><tr><td class=CDLEntry>index</td><td class=CDLDescription>{int} Optional index into the array to insert the component</td></tr></table><h4 class=CHeading>Returns</h4><p>{Boolean} The component geometry was successfully added</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Collection.removeComponents"></a>removeComponents</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>removeComponents: function(</td><td class="PParameter  prettyprint " nowrap>components</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Remove components from this geometry.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>components</td><td class=CDLDescription>{Array(<a href="#ZOO.Geometry" class=LClass id=link386 onMouseOver="ShowTip(event, 'tt49', 'link386')" onMouseOut="HideTip('tt49')">ZOO.Geometry</a>)} The components to be removed</td></tr></table></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Collection.removeComponent"></a>removeComponent</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>removeComponent: function(</td><td class="PParameter  prettyprint " nowrap>component</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Remove a component from this geometry.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>component</td><td class=CDLDescription>{<a href="#ZOO.Geometry" class=LClass id=link387 onMouseOver="ShowTip(event, 'tt49', 'link387')" onMouseOut="HideTip('tt49')">ZOO.Geometry</a>}</td></tr></table></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Collection.getLength"></a>getLength</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">getLength: function()</td></tr></table></blockquote><p>Calculate the length of this geometry</p><h4 class=CHeading>Returns</h4><p>{Float} The length of the geometry</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Collection.getCentroid"></a>getCentroid</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">getCentroid: function()</td></tr></table></blockquote><h4 class=CHeading>Returns</h4><p>{<a href="#ZOO.Geometry.Point" class=LClass id=link388 onMouseOver="ShowTip(event, 'tt50', 'link388')" onMouseOut="HideTip('tt50')">ZOO.Geometry.Point</a>} The centroid of the collection</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Collection.getGeodesicLength"></a>getGeodesicLength</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>getGeodesicLength: function(</td><td class="PParameter  prettyprint " nowrap>projection</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Calculate the approximate length of the geometry were it projected onto the earth.</p><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>projection</td><td class=CDLDescription>{<a href="#ZOO.Projection" class=LClass id=link389 onMouseOver="ShowTip(event, 'tt31', 'link389')" onMouseOut="HideTip('tt31')">ZOO.Projection</a>} The spatial reference system for the geometry coordinates.&nbsp;  If not provided, Geographic/WGS84 is assumed.</td></tr></table><h4 class=CHeading>Returns</h4><p>{Float} The appoximate geodesic length of the geometry in meters.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Collection.move"></a>move</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>move: function(</td><td class="PParameter  prettyprint " nowrap>x,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>y</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Moves a geometry by the given displacement along positive x and y axes.&nbsp; This modifies the position of the geometry and clears the cached bounds.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>x</td><td class=CDLDescription>{Float} Distance to move geometry in positive x direction.</td></tr><tr><td class=CDLEntry>y</td><td class=CDLDescription>{Float} Distance to move geometry in positive y direction.</td></tr></table></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Collection.rotate"></a>rotate</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>rotate: function(</td><td class="PParameter  prettyprint " nowrap>angle,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>origin</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Rotate a geometry around some origin</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>angle</td><td class=CDLDescription>{Float} Rotation angle in degrees (measured counterclockwise from the positive x-axis)</td></tr><tr><td class=CDLEntry>origin</td><td class=CDLDescription>{<a href="#ZOO.Geometry.Point" class=LClass id=link390 onMouseOver="ShowTip(event, 'tt50', 'link390')" onMouseOut="HideTip('tt50')">ZOO.Geometry.Point</a>} Center point for the rotation</td></tr></table></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Collection.resize"></a>resize</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>resize: function(</td><td class="PParameter  prettyprint " nowrap>scale,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>origin,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>ratio</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Resize a geometry relative to some origin.&nbsp;  Use this method to apply a uniform scaling to a geometry.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>scale</td><td class=CDLDescription>{Float} Factor by which to scale the geometry.&nbsp;  A scale of 2 doubles the size of the geometry in each dimension (lines, for example, will be twice as long, and polygons will have four times the area).</td></tr><tr><td class=CDLEntry>origin</td><td class=CDLDescription>{<a href="#ZOO.Geometry.Point" class=LClass id=link391 onMouseOver="ShowTip(event, 'tt50', 'link391')" onMouseOut="HideTip('tt50')">ZOO.Geometry.Point</a>} Point of origin for resizing</td></tr><tr><td class=CDLEntry>ratio</td><td class=CDLDescription>{Float} Optional x:y ratio for resizing.&nbsp;  Default ratio is 1.</td></tr></table><h4 class=CHeading>Returns</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>{ZOO.Geometry}</td><td class=CDLDescription>The current geometry.</td></tr></table></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Collection.equals"></a>equals</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>equals: function(</td><td class="PParameter  prettyprint " nowrap>geometry</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Determine whether another geometry is equivalent to this one.&nbsp;  Geometries are considered equivalent if all components have the same coordinates.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>geom</td><td class=CDLDescription>{<a href="#ZOO.Geometry" class=LClass id=link392 onMouseOver="ShowTip(event, 'tt49', 'link392')" onMouseOut="HideTip('tt49')">ZOO.Geometry</a>} The geometry to test.</td></tr></table><h4 class=CHeading>Returns</h4><p>{Boolean} The supplied geometry is equivalent to this geometry.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Collection.transform"></a>transform</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>transform: function(</td><td class="PParameter  prettyprint " nowrap>source,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>dest</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Reproject the components geometry from source to dest.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>source</td><td class=CDLDescription>{<a href="#ZOO.Projection" class=LClass id=link393 onMouseOver="ShowTip(event, 'tt31', 'link393')" onMouseOut="HideTip('tt31')">ZOO.Projection</a>}</td></tr><tr><td class=CDLEntry>dest</td><td class=CDLDescription>{<a href="#ZOO.Projection" class=LClass id=link394 onMouseOver="ShowTip(event, 'tt31', 'link394')" onMouseOut="HideTip('tt31')">ZOO.Projection</a>}</td></tr></table><h4 class=CHeading>Returns</h4><p>{<a href="#ZOO.Geometry" class=LClass id=link395 onMouseOver="ShowTip(event, 'tt49', 'link395')" onMouseOut="HideTip('tt49')">ZOO.Geometry</a>}</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Collection.intersects"></a>intersects</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>intersects: function(</td><td class="PParameter  prettyprint " nowrap>geometry</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Determine if the input geometry intersects this one.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>geometry</td><td class=CDLDescription>{<a href="#ZOO.Geometry" class=LClass id=link396 onMouseOver="ShowTip(event, 'tt49', 'link396')" onMouseOut="HideTip('tt49')">ZOO.Geometry</a>} Any type of geometry.</td></tr></table><h4 class=CHeading>Returns</h4><p>{Boolean} The input geometry intersects this one.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Collection.getVertices"></a>getVertices</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>getVertices: function(</td><td class="PParameter  prettyprint " nowrap>nodes</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Return a list of all points in this geometry.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>nodes</td><td class=CDLDescription>{Boolean} For lines, only return vertices that are endpoints.&nbsp;  If false, for lines, only vertices that are not endpoints will be returned.&nbsp;  If not provided, all vertices will be returned.</td></tr></table><h4 class=CHeading>Returns</h4><p>{Array} A list of all vertices in the geometry.</p></div></div></div>

	<div class="CClass"><div class=CTopic><h2 class=CTitle><a name="ZOO.Geometry.Point"></a>ZOO.<wbr>Geometry.<wbr>Point</h2><div class=CBody><p>Point geometry class.</p><h4 class=CHeading>Inherits from</h4><ul><li><a href="#ZOO.Geometry" class=LClass id=link410 onMouseOver="ShowTip(event, 'tt49', 'link410')" onMouseOut="HideTip('tt49')">ZOO.Geometry</a></li></ul><!--START_ND_SUMMARY--><div class=Summary><div class=STitle>Summary</div><div class=SBorder><table border=0 cellspacing=0 cellpadding=0 class=STable><tr class="SGroup"><td class=SEntry><a href="#ZOO.Geometry.Point.Properties" >Properties</a></td><td class=SDescription></td></tr><tr class="SProperty SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Geometry.Point.x" >x</a></td><td class=SDescription>{float}</td></tr><tr class="SProperty SIndent1"><td class=SEntry><a href="#ZOO.Geometry.Point.y" >y</a></td><td class=SDescription>{float}</td></tr><tr class="SGroup"><td class=SEntry><a href="#ZOO.Geometry.Point.Functions" >Functions</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Geometry.Point.ZOO.Geometry.Point" >ZOO.<wbr>Geometry.<wbr>Point</a></td><td class=SDescription>Construct a point geometry.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Geometry.Point.clone" id=link397 onMouseOver="ShowTip(event, 'tt106', 'link397')" onMouseOut="HideTip('tt106')">clone</a></td><td class=SDescription>{<a href="#ZOO.Geometry.Point.ZOO.Geometry.Point" class=LFunction id=link398 onMouseOver="ShowTip(event, 'tt107', 'link398')" onMouseOut="HideTip('tt107')">ZOO.Geometry.Point</a>} An exact clone of this ZOO.Geometry.Point</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Geometry.Point.calculateBounds" id=link399 onMouseOver="ShowTip(event, 'tt108', 'link399')" onMouseOut="HideTip('tt108')">calculateBounds</a></td><td class=SDescription>Create a new Bounds based on the x/y</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Geometry.Point.equals" id=link400 onMouseOver="ShowTip(event, 'tt109', 'link400')" onMouseOut="HideTip('tt109')">equals</a></td><td class=SDescription>Determine whether another geometry is equivalent to this one. </td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Geometry.Point.toShortString" id=link401 onMouseOver="ShowTip(event, 'tt110', 'link401')" onMouseOut="HideTip('tt110')">toShortString</a></td><td class=SDescription>{String} Shortened String representation of Point object. </td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Geometry.Point.move" id=link402 onMouseOver="ShowTip(event, 'tt111', 'link402')" onMouseOut="HideTip('tt111')">move</a></td><td class=SDescription>Moves a geometry by the given displacement along positive x and y axes. </td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Geometry.Point.rotate" id=link403 onMouseOver="ShowTip(event, 'tt112', 'link403')" onMouseOut="HideTip('tt112')">rotate</a></td><td class=SDescription>Rotate a point around another.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Geometry.Point.getCentroid" id=link404 onMouseOver="ShowTip(event, 'tt113', 'link404')" onMouseOut="HideTip('tt113')">getCentroid</a></td><td class=SDescription>{<a href="#ZOO.Geometry.Point.ZOO.Geometry.Point" class=LFunction id=link405 onMouseOver="ShowTip(event, 'tt107', 'link405')" onMouseOut="HideTip('tt107')">ZOO.Geometry.Point</a>} The centroid of the collection</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Geometry.Point.resize" id=link406 onMouseOver="ShowTip(event, 'tt114', 'link406')" onMouseOut="HideTip('tt114')">resize</a></td><td class=SDescription>Resize a point relative to some origin. </td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Geometry.Point.intersects" id=link407 onMouseOver="ShowTip(event, 'tt115', 'link407')" onMouseOut="HideTip('tt115')">intersects</a></td><td class=SDescription>Determine if the input geometry intersects this one.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Geometry.Point.transform" id=link408 onMouseOver="ShowTip(event, 'tt116', 'link408')" onMouseOut="HideTip('tt116')">transform</a></td><td class=SDescription>Translate the x,y properties of the point from source to dest.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Geometry.Point.getVertices" id=link409 onMouseOver="ShowTip(event, 'tt117', 'link409')" onMouseOut="HideTip('tt117')">getVertices</a></td><td class=SDescription>Return a list of all points in this geometry.</td></tr></table></div></div><!--END_ND_SUMMARY--></div></div></div>

	<div class="CGroup"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Point.Properties"></a>Properties</h3></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Point.x"></a>x</h3><div class=CBody><p>{float}</p></div></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Point.y"></a>y</h3><div class=CBody><p>{float}</p></div></div></div>

	<div class="CGroup"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Point.Functions"></a>Functions</h3></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Point.ZOO.Geometry.Point"></a>ZOO.<wbr>Geometry.<wbr>Point</h3><div class=CBody><p>Construct a point geometry.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>x</td><td class=CDLDescription>{float}</td></tr><tr><td class=CDLEntry>y</td><td class=CDLDescription>{float}</td></tr></table></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Point.clone"></a>clone</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>clone: function(</td><td class="PParameter  prettyprint " nowrap>obj</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><h4 class=CHeading>Returns</h4><p>{<a href="#ZOO.Geometry.Point.ZOO.Geometry.Point" class=LFunction id=link411 onMouseOver="ShowTip(event, 'tt107', 'link411')" onMouseOut="HideTip('tt107')">ZOO.Geometry.Point</a>} An exact clone of this ZOO.Geometry.Point</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Point.calculateBounds"></a>calculateBounds</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">calculateBounds: function ()</td></tr></table></blockquote><p>Create a new Bounds based on the x/y</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Point.equals"></a>equals</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>equals: function(</td><td class="PParameter  prettyprint " nowrap>geom</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Determine whether another geometry is equivalent to this one.&nbsp;  Geometries are considered equivalent if all components have the same coordinates.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>geom</td><td class=CDLDescription>{<a href="#ZOO.Geometry.Point.ZOO.Geometry.Point" class=LFunction id=link412 onMouseOver="ShowTip(event, 'tt107', 'link412')" onMouseOut="HideTip('tt107')">ZOO.Geometry.Point</a>} The geometry to test.</td></tr></table><h4 class=CHeading>Returns</h4><p>{Boolean} The supplied geometry is equivalent to this geometry.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Point.toShortString"></a>toShortString</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">toShortString: function()</td></tr></table></blockquote><h4 class=CHeading>Returns</h4><p>{String} Shortened String representation of Point object.&nbsp; (ex.&nbsp; &lt;i&gt;&rdquo;5, 42&rdquo;&lt;/i&gt;)</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Point.move"></a>move</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>move: function(</td><td class="PParameter  prettyprint " nowrap>x,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>y</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Moves a geometry by the given displacement along positive x and y axes.&nbsp; This modifies the position of the geometry and clears the cached bounds.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>x</td><td class=CDLDescription>{Float} Distance to move geometry in positive x direction.</td></tr><tr><td class=CDLEntry>y</td><td class=CDLDescription>{Float} Distance to move geometry in positive y direction.</td></tr></table></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Point.rotate"></a>rotate</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>rotate: function(</td><td class="PParameter  prettyprint " nowrap>angle,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>origin</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Rotate a point around another.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>angle</td><td class=CDLDescription>{Float} Rotation angle in degrees (measured counterclockwise from the positive x-axis)</td></tr><tr><td class=CDLEntry>origin</td><td class=CDLDescription>{<a href="#ZOO.Geometry.Point.ZOO.Geometry.Point" class=LFunction id=link413 onMouseOver="ShowTip(event, 'tt107', 'link413')" onMouseOut="HideTip('tt107')">ZOO.Geometry.Point</a>} Center point for the rotation</td></tr></table></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Point.getCentroid"></a>getCentroid</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">getCentroid: function()</td></tr></table></blockquote><h4 class=CHeading>Returns</h4><p>{<a href="#ZOO.Geometry.Point.ZOO.Geometry.Point" class=LFunction id=link414 onMouseOver="ShowTip(event, 'tt107', 'link414')" onMouseOut="HideTip('tt107')">ZOO.Geometry.Point</a>} The centroid of the collection</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Point.resize"></a>resize</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>resize: function(</td><td class="PParameter  prettyprint " nowrap>scale,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>origin,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>ratio</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Resize a point relative to some origin.&nbsp;  For points, this has the effect of scaling a vector (from the origin to the point).&nbsp;  This method is more useful on geometry collection subclasses.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>scale</td><td class=CDLDescription>{Float} Ratio of the new distance from the origin to the old distance from the origin.&nbsp;  A scale of 2 doubles the distance between the point and origin.</td></tr><tr><td class=CDLEntry>origin</td><td class=CDLDescription>{<a href="#ZOO.Geometry.Point.ZOO.Geometry.Point" class=LFunction id=link415 onMouseOver="ShowTip(event, 'tt107', 'link415')" onMouseOut="HideTip('tt107')">ZOO.Geometry.Point</a>} Point of origin for resizing</td></tr><tr><td class=CDLEntry>ratio</td><td class=CDLDescription>{Float} Optional x:y ratio for resizing.&nbsp;  Default ratio is 1.</td></tr></table><h4 class=CHeading>Returns</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>{ZOO.Geometry}</td><td class=CDLDescription>The current geometry.</td></tr></table></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Point.intersects"></a>intersects</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>intersects: function(</td><td class="PParameter  prettyprint " nowrap>geometry</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Determine if the input geometry intersects this one.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>geometry</td><td class=CDLDescription>{<a href="#ZOO.Geometry" class=LClass id=link416 onMouseOver="ShowTip(event, 'tt49', 'link416')" onMouseOut="HideTip('tt49')">ZOO.Geometry</a>} Any type of geometry.</td></tr></table><h4 class=CHeading>Returns</h4><p>{Boolean} The input geometry intersects this one.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Point.transform"></a>transform</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>transform: function(</td><td class="PParameter  prettyprint " nowrap>source,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>dest</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Translate the x,y properties of the point from source to dest.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>source</td><td class=CDLDescription>{<a href="#ZOO.Projection" class=LClass id=link417 onMouseOver="ShowTip(event, 'tt31', 'link417')" onMouseOut="HideTip('tt31')">ZOO.Projection</a>}</td></tr><tr><td class=CDLEntry>dest</td><td class=CDLDescription>{<a href="#ZOO.Projection" class=LClass id=link418 onMouseOver="ShowTip(event, 'tt31', 'link418')" onMouseOut="HideTip('tt31')">ZOO.Projection</a>}</td></tr></table><h4 class=CHeading>Returns</h4><p>{<a href="#ZOO.Geometry" class=LClass id=link419 onMouseOver="ShowTip(event, 'tt49', 'link419')" onMouseOut="HideTip('tt49')">ZOO.Geometry</a>}</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Point.getVertices"></a>getVertices</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>getVertices: function(</td><td class="PParameter  prettyprint " nowrap>nodes</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Return a list of all points in this geometry.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>nodes</td><td class=CDLDescription>{Boolean} For lines, only return vertices that are endpoints.&nbsp;  If false, for lines, only vertices that are not endpoints will be returned.&nbsp;  If not provided, all vertices will be returned.</td></tr></table><h4 class=CHeading>Returns</h4><p>{Array} A list of all vertices in the geometry.</p></div></div></div>

	<div class="CClass"><div class=CTopic><h2 class=CTitle><a name="ZOO.Geometry.Surface"></a>ZOO.<wbr>Geometry.<wbr>Surface</h2><div class=CBody><p>Surface geometry class.</p><h4 class=CHeading>Inherits from</h4><ul><li><a href="#ZOO.Geometry" class=LClass id=link420 onMouseOver="ShowTip(event, 'tt49', 'link420')" onMouseOut="HideTip('tt49')">ZOO.Geometry</a></li></ul></div></div></div>

	<div class="CClass"><div class=CTopic><h2 class=CTitle><a name="ZOO.Geometry.MultiPoint"></a>ZOO.<wbr>Geometry.<wbr>MultiPoint</h2><div class=CBody><p>MultiPoint is a collection of Points.&nbsp; Create a new instance with the <a href="#ZOO.Geometry.MultiPoint.ZOO.Geometry.MultiPoint" class=LFunction id=link425 onMouseOver="ShowTip(event, 'tt157', 'link425')" onMouseOut="HideTip('tt157')">ZOO.Geometry.MultiPoint</a> constructor.</p><h4 class=CHeading>Inherits from</h4><ul><li><a href="#ZOO.Geometry.Collection" class=LClass id=link426 onMouseOver="ShowTip(event, 'tt149', 'link426')" onMouseOut="HideTip('tt149')">ZOO.Geometry.Collection</a></li></ul><!--START_ND_SUMMARY--><div class=Summary><div class=STitle>Summary</div><div class=SBorder><table border=0 cellspacing=0 cellpadding=0 class=STable><tr class="SGroup"><td class=SEntry><a href="#ZOO.Geometry.MultiPoint.Properties" >Properties</a></td><td class=SDescription></td></tr><tr class="SProperty SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Geometry.MultiPoint.componentTypes" >componentTypes</a></td><td class=SDescription>{Array(String)} An array of class names representing the types of components that the collection can include. </td></tr><tr class="SGroup"><td class=SEntry><a href="#ZOO.Geometry.MultiPoint.Functions" >Functions</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Geometry.MultiPoint.ZOO.Geometry.MultiPoint" >ZOO.<wbr>Geometry.<wbr>MultiPoint</a></td><td class=SDescription>Create a new MultiPoint Geometry</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Geometry.MultiPoint.addPoint" id=link421 onMouseOver="ShowTip(event, 'tt118', 'link421')" onMouseOut="HideTip('tt118')">addPoint</a></td><td class=SDescription>Wrapper for <a href="#ZOO.Geometry.Collection.addComponent" class=LFunction id=link422 onMouseOver="ShowTip(event, 'tt93', 'link422')" onMouseOut="HideTip('tt93')">ZOO.Geometry.Collection.addComponent</a></td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Geometry.MultiPoint.removePoint" id=link423 onMouseOver="ShowTip(event, 'tt119', 'link423')" onMouseOut="HideTip('tt119')">removePoint</a></td><td class=SDescription>Wrapper for <a href="#ZOO.Geometry.Collection.removeComponent" class=LFunction id=link424 onMouseOver="ShowTip(event, 'tt95', 'link424')" onMouseOut="HideTip('tt95')">ZOO.Geometry.Collection.removeComponent</a></td></tr></table></div></div><!--END_ND_SUMMARY--></div></div></div>

	<div class="CGroup"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.MultiPoint.Properties"></a>Properties</h3></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.MultiPoint.componentTypes"></a>componentTypes</h3><div class=CBody><p>{Array(String)} An array of class names representing the types of components that the collection can include.&nbsp;  A null value means the component types are not restricted.</p></div></div></div>

	<div class="CGroup"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.MultiPoint.Functions"></a>Functions</h3></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.MultiPoint.ZOO.Geometry.MultiPoint"></a>ZOO.<wbr>Geometry.<wbr>MultiPoint</h3><div class=CBody><p>Create a new MultiPoint Geometry</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>components</td><td class=CDLDescription>{Array(<a href="#ZOO.Geometry.Point" class=LClass id=link427 onMouseOver="ShowTip(event, 'tt50', 'link427')" onMouseOut="HideTip('tt50')">ZOO.Geometry.Point</a>)}</td></tr></table><h4 class=CHeading>Returns</h4><p>{<a href="#ZOO.Geometry.MultiPoint.ZOO.Geometry.MultiPoint" class=LFunction id=link428 onMouseOver="ShowTip(event, 'tt157', 'link428')" onMouseOut="HideTip('tt157')">ZOO.Geometry.MultiPoint</a>}</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.MultiPoint.addPoint"></a>addPoint</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>addPoint: function(</td><td class="PParameter  prettyprint " nowrap>point,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>index</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Wrapper for <a href="#ZOO.Geometry.Collection.addComponent" class=LFunction id=link429 onMouseOver="ShowTip(event, 'tt93', 'link429')" onMouseOut="HideTip('tt93')">ZOO.Geometry.Collection.addComponent</a></p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>point</td><td class=CDLDescription>{<a href="#ZOO.Geometry.Point" class=LClass id=link430 onMouseOver="ShowTip(event, 'tt50', 'link430')" onMouseOut="HideTip('tt50')">ZOO.Geometry.Point</a>} Point to be added</td></tr><tr><td class=CDLEntry>index</td><td class=CDLDescription>{Integer} Optional index</td></tr></table></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.MultiPoint.removePoint"></a>removePoint</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>removePoint: function(</td><td class="PParameter  prettyprint " nowrap>point</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Wrapper for <a href="#ZOO.Geometry.Collection.removeComponent" class=LFunction id=link431 onMouseOver="ShowTip(event, 'tt95', 'link431')" onMouseOut="HideTip('tt95')">ZOO.Geometry.Collection.removeComponent</a></p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>point</td><td class=CDLDescription>{<a href="#ZOO.Geometry.Point" class=LClass id=link432 onMouseOver="ShowTip(event, 'tt50', 'link432')" onMouseOut="HideTip('tt50')">ZOO.Geometry.Point</a>} Point to be removed</td></tr></table></div></div></div>

	<div class="CClass"><div class=CTopic><h2 class=CTitle><a name="ZOO.Geometry.Curve"></a>ZOO.<wbr>Geometry.<wbr>Curve</h2><div class=CBody><p>A Curve is a MultiPoint, whose points are assumed to be connected.&nbsp; To this end, we provide a &ldquo;getLength()&rdquo; function, which iterates through the points, summing the distances between them.</p><h4 class=CHeading>Inherits</h4><ul><li><a href="#ZOO.Geometry.MultiPoint" class=LClass id=link434 onMouseOver="ShowTip(event, 'tt51', 'link434')" onMouseOut="HideTip('tt51')">ZOO.Geometry.MultiPoint</a></li></ul><!--START_ND_SUMMARY--><div class=Summary><div class=STitle>Summary</div><div class=SBorder><table border=0 cellspacing=0 cellpadding=0 class=STable><tr class="SGroup"><td class=SEntry><a href="#ZOO.Geometry.Curve.Properties" >Properties</a></td><td class=SDescription></td></tr><tr class="SProperty SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Geometry.Curve.componentTypes" >componentTypes</a></td><td class=SDescription>{Array(String)} An array of class names representing the types of components that the collection can include. </td></tr><tr class="SGroup"><td class=SEntry><a href="#ZOO.Geometry.Curve.Functions" >Functions</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Geometry.Curve.ZOO.Geometry.Curve" >ZOO.<wbr>Geometry.<wbr>Curve</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Geometry.Curve.getLength" id=link433 onMouseOver="ShowTip(event, 'tt120', 'link433')" onMouseOut="HideTip('tt120')">getLength</a></td><td class=SDescription>{Float} The length of the curve</td></tr></table></div></div><!--END_ND_SUMMARY--></div></div></div>

	<div class="CGroup"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Curve.Properties"></a>Properties</h3></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Curve.componentTypes"></a>componentTypes</h3><div class=CBody><p>{Array(String)} An array of class names representing the types of components that the collection can include.&nbsp;  A null value means the component types are not restricted.</p></div></div></div>

	<div class="CGroup"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Curve.Functions"></a>Functions</h3></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Curve.ZOO.Geometry.Curve"></a>ZOO.<wbr>Geometry.<wbr>Curve</h3><div class=CBody><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>point</td><td class=CDLDescription>{Array(<a href="#ZOO.Geometry.Point" class=LClass id=link435 onMouseOver="ShowTip(event, 'tt50', 'link435')" onMouseOut="HideTip('tt50')">ZOO.Geometry.Point</a>)}</td></tr></table></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Curve.getLength"></a>getLength</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">getLength: function()</td></tr></table></blockquote><h4 class=CHeading>Returns</h4><p>{Float} The length of the curve</p></div></div></div>

	<div class="CClass"><div class=CTopic><h2 class=CTitle><a name="ZOO.Geometry.LineString"></a>ZOO.<wbr>Geometry.<wbr>LineString</h2><div class=CBody><p>A LineString is a Curve which, once two points have been added to it, can never be less than two points long.</p><h4 class=CHeading>Inherits from</h4><ul><li><a href="#ZOO.Geometry.Curve" class=LClass id=link443 onMouseOver="ShowTip(event, 'tt158', 'link443')" onMouseOut="HideTip('tt158')">ZOO.Geometry.Curve</a></li></ul><!--START_ND_SUMMARY--><div class=Summary><div class=STitle>Summary</div><div class=SBorder><table border=0 cellspacing=0 cellpadding=0 class=STable><tr class="SGroup"><td class=SEntry><a href="#ZOO.Geometry.LineString.Functions" >Functions</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Geometry.LineString.ZOO.Geometry.LineString" >ZOO.<wbr>Geometry.<wbr>LineString</a></td><td class=SDescription>Create a new LineString geometry</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Geometry.LineString.removeComponent" id=link436 onMouseOver="ShowTip(event, 'tt121', 'link436')" onMouseOut="HideTip('tt121')">removeComponent</a></td><td class=SDescription>Only allows removal of a point if there are three or more points in the linestring. </td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Geometry.LineString.intersects" id=link437 onMouseOver="ShowTip(event, 'tt122', 'link437')" onMouseOut="HideTip('tt122')">intersects</a></td><td class=SDescription>Test for instersection between two geometries. </td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Geometry.LineString.getSortedSegments" id=link438 onMouseOver="ShowTip(event, 'tt123', 'link438')" onMouseOut="HideTip('tt123')">getSortedSegments</a></td><td class=SDescription>{Array} An array of segment objects. </td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Geometry.LineString.splitWithSegment" id=link439 onMouseOver="ShowTip(event, 'tt124', 'link439')" onMouseOut="HideTip('tt124')">splitWithSegment</a></td><td class=SDescription>Split this geometry with the given segment.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Geometry.LineString.split" id=link440 onMouseOver="ShowTip(event, 'tt125', 'link440')" onMouseOut="HideTip('tt125')">split</a></td><td class=SDescription>Use this geometry (the source) to attempt to split a target geometry.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Geometry.LineString.splitWith" id=link441 onMouseOver="ShowTip(event, 'tt126', 'link441')" onMouseOut="HideTip('tt126')">splitWith</a></td><td class=SDescription>Split this geometry (the target) with the given geometry (the source).</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Geometry.LineString.getVertices" id=link442 onMouseOver="ShowTip(event, 'tt127', 'link442')" onMouseOut="HideTip('tt127')">getVertices</a></td><td class=SDescription>Return a list of all points in this geometry.</td></tr></table></div></div><!--END_ND_SUMMARY--></div></div></div>

	<div class="CGroup"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.LineString.Functions"></a>Functions</h3></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.LineString.ZOO.Geometry.LineString"></a>ZOO.<wbr>Geometry.<wbr>LineString</h3><div class=CBody><p>Create a new LineString geometry</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>points</td><td class=CDLDescription>{Array(<a href="#ZOO.Geometry.Point" class=LClass id=link444 onMouseOver="ShowTip(event, 'tt50', 'link444')" onMouseOut="HideTip('tt50')">ZOO.Geometry.Point</a>)} An array of points used to generate the linestring</td></tr></table></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.LineString.removeComponent"></a>removeComponent</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>removeComponent: function(</td><td class="PParameter  prettyprint " nowrap>point</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Only allows removal of a point if there are three or more points in the linestring.&nbsp; (otherwise the result would be just a single point)</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>point</td><td class=CDLDescription>{<a href="#ZOO.Geometry.Point" class=LClass id=link445 onMouseOver="ShowTip(event, 'tt50', 'link445')" onMouseOut="HideTip('tt50')">ZOO.Geometry.Point</a>} The point to be removed</td></tr></table></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.LineString.intersects"></a>intersects</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>intersects: function(</td><td class="PParameter  prettyprint " nowrap>geometry</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Test for instersection between two geometries.&nbsp;  This is a cheapo implementation of the Bently-Ottmann algorigithm.&nbsp;  It doesn&rsquo;t really keep track of a sweep line data structure.&nbsp;  It is closer to the brute force method, except that segments are sorted and potential intersections are only calculated when bounding boxes intersect.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>geometry</td><td class=CDLDescription>{<a href="#ZOO.Geometry" class=LClass id=link446 onMouseOver="ShowTip(event, 'tt49', 'link446')" onMouseOut="HideTip('tt49')">ZOO.Geometry</a>}</td></tr></table><h4 class=CHeading>Returns</h4><p>{Boolean} The input geometry intersects this geometry.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.LineString.getSortedSegments"></a>getSortedSegments</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">getSortedSegments: function()</td></tr></table></blockquote><h4 class=CHeading>Returns</h4><p>{Array} An array of segment objects.&nbsp;  Segment objects have properties x1, y1, x2, and y2.&nbsp;  The start point is represented by x1 and y1.&nbsp; The end point is represented by x2 and y2.&nbsp;  Start and end are ordered so that x1 &lt; x2.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.LineString.splitWithSegment"></a>splitWithSegment</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>splitWithSegment: function(</td><td class="PParameter  prettyprint " nowrap>seg,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>options</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Split this geometry with the given segment.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>seg</td><td class=CDLDescription>{Object} An object with x1, y1, x2, and y2 properties referencing segment endpoint coordinates.</td></tr><tr><td class=CDLEntry>options</td><td class=CDLDescription>{Object} Properties of this object will be used to determine how the split is conducted.</td></tr></table><h4 class=CHeading>Valid options</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>edge</td><td class=CDLDescription>{Boolean} Allow splitting when only edges intersect.&nbsp;  Default is true.&nbsp;  If false, a vertex on the source segment must be within the tolerance distance of the intersection to be considered a split.</td></tr><tr><td class=CDLEntry>tolerance</td><td class=CDLDescription>{Number} If a non-null value is provided, intersections within the tolerance distance of one of the source segment&rsquo;s endpoints will be assumed to occur at the endpoint.</td></tr></table><h4 class=CHeading>Returns</h4><p>{Object} An object with <b>lines</b> and <b>points</b> properties.&nbsp;  If the given segment intersects this linestring, the lines array will reference geometries that result from the split.&nbsp;  The points array will contain all intersection points.&nbsp;  Intersection points are sorted along the segment (in order from x1,y1 to x2,y2).</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.LineString.split"></a>split</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>split: function(</td><td class="PParameter  prettyprint " nowrap>target,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>options</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Use this geometry (the source) to attempt to split a target geometry.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>target</td><td class=CDLDescription>{<a href="#ZOO.Geometry" class=LClass id=link447 onMouseOver="ShowTip(event, 'tt49', 'link447')" onMouseOut="HideTip('tt49')">ZOO.Geometry</a>} The target geometry.</td></tr><tr><td class=CDLEntry>options</td><td class=CDLDescription>{Object} Properties of this object will be used to determine how the split is conducted.</td></tr></table><h4 class=CHeading>Valid options</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>mutual</td><td class=CDLDescription>{Boolean} Split the source geometry in addition to the target geometry.&nbsp;  Default is false.</td></tr><tr><td class=CDLEntry>edge</td><td class=CDLDescription>{Boolean} Allow splitting when only edges intersect.&nbsp;  Default is true.&nbsp;  If false, a vertex on the source must be within the tolerance distance of the intersection to be considered a split.</td></tr><tr><td class=CDLEntry>tolerance</td><td class=CDLDescription>{Number} If a non-null value is provided, intersections within the tolerance distance of an existing vertex on the source will be assumed to occur at the vertex.</td></tr></table><h4 class=CHeading>Returns</h4><p>{Array} A list of geometries (of this same type as the target) that result from splitting the target with the source geometry.&nbsp;  The source and target geometry will remain unmodified.&nbsp;  If no split results, null will be returned.&nbsp;  If mutual is true and a split results, return will be an array of two arrays - the first will be all geometries that result from splitting the source geometry and the second will be all geometries that result from splitting the target geometry.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.LineString.splitWith"></a>splitWith</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>splitWith: function(</td><td class="PParameter  prettyprint " nowrap>geometry,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>options</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Split this geometry (the target) with the given geometry (the source).</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>geometry</td><td class=CDLDescription>{<a href="#ZOO.Geometry" class=LClass id=link448 onMouseOver="ShowTip(event, 'tt49', 'link448')" onMouseOut="HideTip('tt49')">ZOO.Geometry</a>} A geometry used to split this geometry (the source).</td></tr><tr><td class=CDLEntry>options</td><td class=CDLDescription>{Object} Properties of this object will be used to determine how the split is conducted.</td></tr></table><h4 class=CHeading>Valid options</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>mutual</td><td class=CDLDescription>{Boolean} Split the source geometry in addition to the target geometry.&nbsp;  Default is false.</td></tr><tr><td class=CDLEntry>edge</td><td class=CDLDescription>{Boolean} Allow splitting when only edges intersect.&nbsp;  Default is true.&nbsp;  If false, a vertex on the source must be within the tolerance distance of the intersection to be considered a split.</td></tr><tr><td class=CDLEntry>tolerance</td><td class=CDLDescription>{Number} If a non-null value is provided, intersections within the tolerance distance of an existing vertex on the source will be assumed to occur at the vertex.</td></tr></table><h4 class=CHeading>Returns</h4><p>{Array} A list of geometries (of this same type as the target) that result from splitting the target with the source geometry.&nbsp;  The source and target geometry will remain unmodified.&nbsp;  If no split results, null will be returned.&nbsp;  If mutual is true and a split results, return will be an array of two arrays - the first will be all geometries that result from splitting the source geometry and the second will be all geometries that result from splitting the target geometry.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.LineString.getVertices"></a>getVertices</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>getVertices: function(</td><td class="PParameter  prettyprint " nowrap>nodes</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Return a list of all points in this geometry.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>nodes</td><td class=CDLDescription>{Boolean} For lines, only return vertices that are endpoints.&nbsp;  If false, for lines, only vertices that are not endpoints will be returned.&nbsp;  If not provided, all vertices will be returned.</td></tr></table><h4 class=CHeading>Returns</h4><p>{Array} A list of all vertices in the geometry.</p></div></div></div>

	<div class="CClass"><div class=CTopic><h2 class=CTitle><a name="ZOO.Geometry.LinearRing"></a>ZOO.<wbr>Geometry.<wbr>LinearRing</h2><div class=CBody><p>A Linear Ring is a special LineString which is closed.&nbsp; It closes itself automatically on every addPoint/removePoint by adding a copy of the first point as the last point.</p><p>Also, as it is the first in the line family to close itself, a getArea() function is defined to calculate the enclosed area of the linearRing</p><h4 class=CHeading>Inherits</h4><ul><li><a href="#ZOO.Geometry.LineString" class=LClass id=link459 onMouseOver="ShowTip(event, 'tt52', 'link459')" onMouseOut="HideTip('tt52')">ZOO.Geometry.LineString</a></li></ul><!--START_ND_SUMMARY--><div class=Summary><div class=STitle>Summary</div><div class=SBorder><table border=0 cellspacing=0 cellpadding=0 class=STable><tr class="SGroup"><td class=SEntry><a href="#ZOO.Geometry.LinearRing.Properties" >Properties</a></td><td class=SDescription></td></tr><tr class="SProperty SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Geometry.LinearRing.componentTypes" >componentTypes</a></td><td class=SDescription>{Array(String)} An array of class names representing the types of components that the collection can include. </td></tr><tr class="SGroup"><td class=SEntry><a href="#ZOO.Geometry.LinearRing.Functions" >Functions</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Geometry.LinearRing.ZOO.Geometry.LinearRing" >ZOO.<wbr>Geometry.<wbr>LinearRing</a></td><td class=SDescription>Linear rings are constructed with an array of points. </td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Geometry.LinearRing.addComponent" id=link449 onMouseOver="ShowTip(event, 'tt128', 'link449')" onMouseOut="HideTip('tt128')">addComponent</a></td><td class=SDescription>Adds a point to geometry components. </td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Geometry.LinearRing.move" id=link450 onMouseOver="ShowTip(event, 'tt129', 'link450')" onMouseOut="HideTip('tt129')">move</a></td><td class=SDescription>Moves a geometry by the given displacement along positive x and y axes. </td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Geometry.LinearRing.rotate" id=link451 onMouseOver="ShowTip(event, 'tt130', 'link451')" onMouseOut="HideTip('tt130')">rotate</a></td><td class=SDescription>Rotate a geometry around some origin</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Geometry.LinearRing.resize" id=link452 onMouseOver="ShowTip(event, 'tt131', 'link452')" onMouseOut="HideTip('tt131')">resize</a></td><td class=SDescription>Resize a geometry relative to some origin. </td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Geometry.LinearRing.transform" id=link453 onMouseOver="ShowTip(event, 'tt132', 'link453')" onMouseOut="HideTip('tt132')">transform</a></td><td class=SDescription>Reproject the components geometry from source to dest.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Geometry.LinearRing.getCentroid" id=link454 onMouseOver="ShowTip(event, 'tt133', 'link454')" onMouseOut="HideTip('tt133')">getCentroid</a></td><td class=SDescription>{<a href="#ZOO.Geometry.Point" class=LClass id=link455 onMouseOver="ShowTip(event, 'tt50', 'link455')" onMouseOut="HideTip('tt50')">ZOO.Geometry.Point</a>} The centroid of the ring</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Geometry.LinearRing.getArea" id=link456 onMouseOver="ShowTip(event, 'tt134', 'link456')" onMouseOut="HideTip('tt134')">getArea</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Geometry.LinearRing.getGeodesicArea" id=link457 onMouseOver="ShowTip(event, 'tt135', 'link457')" onMouseOut="HideTip('tt135')">getGeodesicArea</a></td><td class=SDescription>Calculate the approximate area of the polygon were it projected onto the earth. </td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Geometry.LinearRing.containsPoint" id=link458 onMouseOver="ShowTip(event, 'tt136', 'link458')" onMouseOut="HideTip('tt136')">containsPoint</a></td><td class=SDescription>Test if a point is inside a linear ring. </td></tr></table></div></div><!--END_ND_SUMMARY--></div></div></div>

	<div class="CGroup"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.LinearRing.Properties"></a>Properties</h3></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.LinearRing.componentTypes"></a>componentTypes</h3><div class=CBody><p>{Array(String)} An array of class names representing the types of components that the collection can include.&nbsp;  A null value means the component types are not restricted.</p></div></div></div>

	<div class="CGroup"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.LinearRing.Functions"></a>Functions</h3></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.LinearRing.ZOO.Geometry.LinearRing"></a>ZOO.<wbr>Geometry.<wbr>LinearRing</h3><div class=CBody><p>Linear rings are constructed with an array of points.&nbsp;  This array can represent a closed or open ring.&nbsp;  If the ring is open (the last point does not equal the first point), the constructor will close the ring.&nbsp;  If the ring is already closed (the last point does equal the first point), it will be left closed.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>points</td><td class=CDLDescription>{Array(<a href="#ZOO.Geometry.Point" class=LClass id=link460 onMouseOver="ShowTip(event, 'tt50', 'link460')" onMouseOut="HideTip('tt50')">ZOO.Geometry.Point</a>)} points</td></tr></table></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.LinearRing.addComponent"></a>addComponent</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>addComponent: function(</td><td class="PParameter  prettyprint " nowrap>point,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>index</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Adds a point to geometry components.&nbsp;  If the point is to be added to the end of the components array and it is the same as the last point already in that array, the duplicate point is not added.&nbsp;  This has the effect of closing the ring if it is not already closed, and doing the right thing if it is already closed.&nbsp;  This behavior can be overridden by calling the method with a non-null index as the second argument.</p><h4 class=CHeading>Parameter</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>point</td><td class=CDLDescription>{<a href="#ZOO.Geometry.Point" class=LClass id=link461 onMouseOver="ShowTip(event, 'tt50', 'link461')" onMouseOut="HideTip('tt50')">ZOO.Geometry.Point</a>}</td></tr><tr><td class=CDLEntry>index</td><td class=CDLDescription>{Integer} Index into the array to insert the component</td></tr></table><h4 class=CHeading>Returns</h4><p>{Boolean} Was the Point successfully added?</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.LinearRing.move"></a>move</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>move: function(</td><td class="PParameter  prettyprint " nowrap>x,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>y</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Moves a geometry by the given displacement along positive x and y axes.&nbsp; This modifies the position of the geometry and clears the cached bounds.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>x</td><td class=CDLDescription>{Float} Distance to move geometry in positive x direction.</td></tr><tr><td class=CDLEntry>y</td><td class=CDLDescription>{Float} Distance to move geometry in positive y direction.</td></tr></table></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.LinearRing.rotate"></a>rotate</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>rotate: function(</td><td class="PParameter  prettyprint " nowrap>angle,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>origin</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Rotate a geometry around some origin</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>angle</td><td class=CDLDescription>{Float} Rotation angle in degrees (measured counterclockwise from the positive x-axis)</td></tr><tr><td class=CDLEntry>origin</td><td class=CDLDescription>{<a href="#ZOO.Geometry.Point" class=LClass id=link462 onMouseOver="ShowTip(event, 'tt50', 'link462')" onMouseOut="HideTip('tt50')">ZOO.Geometry.Point</a>} Center point for the rotation</td></tr></table></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.LinearRing.resize"></a>resize</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>resize: function(</td><td class="PParameter  prettyprint " nowrap>scale,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>origin,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>ratio</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Resize a geometry relative to some origin.&nbsp;  Use this method to apply a uniform scaling to a geometry.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>scale</td><td class=CDLDescription>{Float} Factor by which to scale the geometry.&nbsp;  A scale of 2 doubles the size of the geometry in each dimension (lines, for example, will be twice as long, and polygons will have four times the area).</td></tr><tr><td class=CDLEntry>origin</td><td class=CDLDescription>{<a href="#ZOO.Geometry.Point" class=LClass id=link463 onMouseOver="ShowTip(event, 'tt50', 'link463')" onMouseOut="HideTip('tt50')">ZOO.Geometry.Point</a>} Point of origin for resizing</td></tr><tr><td class=CDLEntry>ratio</td><td class=CDLDescription>{Float} Optional x:y ratio for resizing.&nbsp;  Default ratio is 1.</td></tr></table><h4 class=CHeading>Returns</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>{ZOO.Geometry}</td><td class=CDLDescription>The current geometry.</td></tr></table></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.LinearRing.transform"></a>transform</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>transform: function(</td><td class="PParameter  prettyprint " nowrap>source,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>dest</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Reproject the components geometry from source to dest.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>source</td><td class=CDLDescription>{<a href="#ZOO.Projection" class=LClass id=link464 onMouseOver="ShowTip(event, 'tt31', 'link464')" onMouseOut="HideTip('tt31')">ZOO.Projection</a>}</td></tr><tr><td class=CDLEntry>dest</td><td class=CDLDescription>{<a href="#ZOO.Projection" class=LClass id=link465 onMouseOver="ShowTip(event, 'tt31', 'link465')" onMouseOut="HideTip('tt31')">ZOO.Projection</a>}</td></tr></table><h4 class=CHeading>Returns</h4><p>{<a href="#ZOO.Geometry" class=LClass id=link466 onMouseOver="ShowTip(event, 'tt49', 'link466')" onMouseOut="HideTip('tt49')">ZOO.Geometry</a>}</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.LinearRing.getCentroid"></a>getCentroid</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">getCentroid: function()</td></tr></table></blockquote><h4 class=CHeading>Returns</h4><p>{<a href="#ZOO.Geometry.Point" class=LClass id=link467 onMouseOver="ShowTip(event, 'tt50', 'link467')" onMouseOut="HideTip('tt50')">ZOO.Geometry.Point</a>} The centroid of the ring</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.LinearRing.getArea"></a>getArea</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">getArea: function()</td></tr></table></blockquote><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>Note</td><td class=CDLDescription>The area is positive if the ring is oriented CW, otherwise it will be negative.</td></tr></table><h4 class=CHeading>Returns</h4><p>{Float} The signed area for a ring.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.LinearRing.getGeodesicArea"></a>getGeodesicArea</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>getGeodesicArea: function(</td><td class="PParameter  prettyprint " nowrap>projection</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Calculate the approximate area of the polygon were it projected onto the earth.&nbsp;  Note that this area will be positive if ring is oriented clockwise, otherwise it will be negative.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>projection</td><td class=CDLDescription>{<a href="#ZOO.Projection" class=LClass id=link468 onMouseOver="ShowTip(event, 'tt31', 'link468')" onMouseOut="HideTip('tt31')">ZOO.Projection</a>} The spatial reference system for the geometry coordinates.&nbsp;  If not provided, Geographic/WGS84 is assumed.</td></tr></table><h4 class=CHeading>Reference</h4><p>Robert.&nbsp; G. Chamberlain and William H.&nbsp; Duquette, &ldquo;Some Algorithms for Polygons on a Sphere&rdquo;, JPL Publication 07-03, Jet Propulsion Laboratory, Pasadena, CA, June 2007 <a href="http://trs-new.jpl.nasa.gov/dspace/handle/2014/40409" class=LURL target=_top>http://trs-new.jpl.nasa.gov<wbr>/dspace<wbr>/handle<wbr>/2014<wbr>/40409</a></p><h4 class=CHeading>Returns</h4><p>{float} The approximate signed geodesic area of the polygon in square meters.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.LinearRing.containsPoint"></a>containsPoint</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>containsPoint: function(</td><td class="PParameter  prettyprint " nowrap>point</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Test if a point is inside a linear ring.&nbsp;  For the case where a point is coincident with a linear ring edge, returns 1.&nbsp;  Otherwise, returns boolean.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>point</td><td class=CDLDescription>{<a href="#ZOO.Geometry.Point" class=LClass id=link469 onMouseOver="ShowTip(event, 'tt50', 'link469')" onMouseOut="HideTip('tt50')">ZOO.Geometry.Point</a>}</td></tr></table><h4 class=CHeading>Returns</h4><p>{Boolean | Number} The point is inside the linear ring.&nbsp;  Returns 1 if the point is coincident with an edge.&nbsp;  Returns boolean otherwise.</p></div></div></div>

	<div class="CClass"><div class=CTopic><h2 class=CTitle><a name="ZOO.Geometry.MultiLineString"></a>ZOO.<wbr>Geometry.<wbr>MultiLineString</h2><div class=CBody><p>A MultiLineString is a geometry with multiple <a href="#ZOO.Geometry.LineString" class=LClass id=link470 onMouseOver="ShowTip(event, 'tt52', 'link470')" onMouseOut="HideTip('tt52')">ZOO.Geometry.LineString</a> components.</p><h4 class=CHeading>Inherits from</h4><ul><li><a href="#ZOO.Geometry.Collection" class=LClass id=link471 onMouseOver="ShowTip(event, 'tt149', 'link471')" onMouseOut="HideTip('tt149')">ZOO.Geometry.Collection</a></li></ul><!--START_ND_SUMMARY--><div class=Summary><div class=STitle>Summary</div><div class=SBorder><table border=0 cellspacing=0 cellpadding=0 class=STable><tr class="SGroup"><td class=SEntry><a href="#ZOO.Geometry.MultiLineString.Functions" >Functions</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Geometry.MultiLineString.ZOO.Geometry.MultiLineString" >ZOO.<wbr>Geometry.<wbr>MultiLineString</a></td><td class=SDescription>Constructor for a MultiLineString Geometry.</td></tr></table></div></div><!--END_ND_SUMMARY--></div></div></div>

	<div class="CGroup"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.MultiLineString.Functions"></a>Functions</h3></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.MultiLineString.ZOO.Geometry.MultiLineString"></a>ZOO.<wbr>Geometry.<wbr>MultiLineString</h3><div class=CBody><p>Constructor for a MultiLineString Geometry.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>components</td><td class=CDLDescription>{Array(<a href="#ZOO.Geometry.LineString" class=LClass id=link472 onMouseOver="ShowTip(event, 'tt52', 'link472')" onMouseOut="HideTip('tt52')">ZOO.Geometry.LineString</a>)}</td></tr></table></div></div></div>

	<div class="CClass"><div class=CTopic><h2 class=CTitle><a name="ZOO.Geometry.Polygon"></a>ZOO.<wbr>Geometry.<wbr>Polygon</h2><div class=CBody><p>Polygon is a collection of <a href="#ZOO.Geometry.LinearRing" class=LClass id=link476 onMouseOver="ShowTip(event, 'tt137', 'link476')" onMouseOut="HideTip('tt137')">ZOO.Geometry.LinearRing</a>.</p><h4 class=CHeading>Inherits from</h4><ul><li><a href="#ZOO.Geometry.Collection" class=LClass id=link477 onMouseOver="ShowTip(event, 'tt149', 'link477')" onMouseOut="HideTip('tt149')">ZOO.Geometry.Collection</a></li></ul><!--START_ND_SUMMARY--><div class=Summary><div class=STitle>Summary</div><div class=SBorder><table border=0 cellspacing=0 cellpadding=0 class=STable><tr class="SGroup"><td class=SEntry><a href="#ZOO.Geometry.Polygon.Functions" >Functions</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Geometry.Polygon.ZOO.Geometry.Polygon" >ZOO.<wbr>Geometry.<wbr>Polygon</a></td><td class=SDescription>Constructor for a Polygon geometry. </td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Geometry.Polygon.getArea" id=link473 onMouseOver="ShowTip(event, 'tt138', 'link473')" onMouseOut="HideTip('tt138')">getArea</a></td><td class=SDescription>Calculated by subtracting the areas of the internal holes from the area of the outer hole.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Geometry.Polygon.containsPoint" id=link474 onMouseOver="ShowTip(event, 'tt139', 'link474')" onMouseOut="HideTip('tt139')">containsPoint</a></td><td class=SDescription>Test if a point is inside a polygon. </td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Geometry.Polygon.createRegularPolygon" id=link475 onMouseOver="ShowTip(event, 'tt140', 'link475')" onMouseOut="HideTip('tt140')">createRegularPolygon</a></td><td class=SDescription>Create a regular polygon around a radius. </td></tr></table></div></div><!--END_ND_SUMMARY--></div></div></div>

	<div class="CGroup"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Polygon.Functions"></a>Functions</h3></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Polygon.ZOO.Geometry.Polygon"></a>ZOO.<wbr>Geometry.<wbr>Polygon</h3><div class=CBody><p>Constructor for a Polygon geometry.&nbsp; The first ring (this.component[0])is the outer bounds of the polygon and all subsequent rings (this.component[1-n]) are internal holes.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>components</td><td class=CDLDescription>{Array(<a href="#ZOO.Geometry.LinearRing" class=LClass id=link478 onMouseOver="ShowTip(event, 'tt137', 'link478')" onMouseOut="HideTip('tt137')">ZOO.Geometry.LinearRing</a>)}</td></tr></table></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Polygon.getArea"></a>getArea</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">getArea: function()</td></tr></table></blockquote><p>Calculated by subtracting the areas of the internal holes from the area of the outer hole.</p><h4 class=CHeading>Returns</h4><p>{float} The area of the geometry</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Polygon.containsPoint"></a>containsPoint</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>containsPoint: function(</td><td class="PParameter  prettyprint " nowrap>point</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Test if a point is inside a polygon.&nbsp;  Points on a polygon edge are considered inside.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>point</td><td class=CDLDescription>{<a href="#ZOO.Geometry.Point" class=LClass id=link479 onMouseOver="ShowTip(event, 'tt50', 'link479')" onMouseOut="HideTip('tt50')">ZOO.Geometry.Point</a>}</td></tr></table><h4 class=CHeading>Returns</h4><p>{Boolean | Number} The point is inside the polygon.&nbsp;  Returns 1 if the point is on an edge.&nbsp;  Returns boolean otherwise.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.Polygon.createRegularPolygon"></a>createRegularPolygon</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>ZOO.Geometry.Polygon.createRegularPolygon = function(</td><td class="PParameter  prettyprint " nowrap>origin,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>radius,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>sides,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>rotation</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Create a regular polygon around a radius.&nbsp; Useful for creating circles and the like.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>origin</td><td class=CDLDescription>{<a href="#ZOO.Geometry.Point" class=LClass id=link480 onMouseOver="ShowTip(event, 'tt50', 'link480')" onMouseOut="HideTip('tt50')">ZOO.Geometry.Point</a>} center of polygon.</td></tr><tr><td class=CDLEntry>radius</td><td class=CDLDescription>{Float} distance to vertex, in map units.</td></tr><tr><td class=CDLEntry>sides</td><td class=CDLDescription>{Integer} Number of sides.&nbsp; 20 approximates a circle.</td></tr><tr><td class=CDLEntry>rotation</td><td class=CDLDescription>{Float} original angle of rotation, in degrees.</td></tr></table></div></div></div>

	<div class="CClass"><div class=CTopic><h2 class=CTitle><a name="ZOO.Geometry.MultiPolygon"></a>ZOO.<wbr>Geometry.<wbr>MultiPolygon</h2><div class=CBody><p>MultiPolygon is a geometry with multiple <a href="#ZOO.Geometry.Polygon" class=LClass id=link481 onMouseOver="ShowTip(event, 'tt54', 'link481')" onMouseOut="HideTip('tt54')">ZOO.Geometry.Polygon</a> components.&nbsp;  Create a new instance with the <a href="#ZOO.Geometry.MultiPolygon.ZOO.Geometry.MultiPolygon" class=LFunction id=link482 onMouseOver="ShowTip(event, 'tt159', 'link482')" onMouseOut="HideTip('tt159')">ZOO.Geometry.MultiPolygon</a> constructor.</p><h4 class=CHeading>Inherits from</h4><ul><li><a href="#ZOO.Geometry.Collection" class=LClass id=link483 onMouseOver="ShowTip(event, 'tt149', 'link483')" onMouseOut="HideTip('tt149')">ZOO.Geometry.Collection</a></li></ul><!--START_ND_SUMMARY--><div class=Summary><div class=STitle>Summary</div><div class=SBorder><table border=0 cellspacing=0 cellpadding=0 class=STable><tr class="SGroup"><td class=SEntry><a href="#ZOO.Geometry.MultiPolygon.Functions" >Functions</a></td><td class=SDescription></td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Geometry.MultiPolygon.ZOO.Geometry.MultiPolygon" >ZOO.<wbr>Geometry.<wbr>MultiPolygon</a></td><td class=SDescription>Create a new MultiPolygon geometry</td></tr></table></div></div><!--END_ND_SUMMARY--></div></div></div>

	<div class="CGroup"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.MultiPolygon.Functions"></a>Functions</h3></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Geometry.MultiPolygon.ZOO.Geometry.MultiPolygon"></a>ZOO.<wbr>Geometry.<wbr>MultiPolygon</h3><div class=CBody><p>Create a new MultiPolygon geometry</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>components</td><td class=CDLDescription>{Array(<a href="#ZOO.Geometry.Polygon" class=LClass id=link484 onMouseOver="ShowTip(event, 'tt54', 'link484')" onMouseOut="HideTip('tt54')">ZOO.Geometry.Polygon</a>)} An array of polygons used to generate the MultiPolygon</td></tr></table></div></div></div>

	<div class="CClass"><div class=CTopic><h2 class=CTitle><a name="ZOO.Process"></a>ZOO.<wbr>Process</h2><div class=CBody><p>Used to query OGC WPS process defined by its URL and its identifier.&nbsp; Usefull for chaining localhost process.</p><!--START_ND_SUMMARY--><div class=Summary><div class=STitle>Summary</div><div class=SBorder><table border=0 cellspacing=0 cellpadding=0 class=STable><tr class="SGroup"><td class=SEntry><a href="#ZOO.Process.Properties_and_Functions" >Properties and Functions</a></td><td class=SDescription></td></tr><tr class="SProperty SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Process.schemaLocation" >schemaLocation</a></td><td class=SDescription>{String} Schema location for a particular minor version.</td></tr><tr class="SProperty SIndent1"><td class=SEntry><a href="#ZOO.Process.namespaces" >namespaces</a></td><td class=SDescription>{Object} Mapping of namespace aliases to namespace URIs.</td></tr><tr class="SProperty SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Process.url" >url</a></td><td class=SDescription>{String} The OGC&rsquo;s Web PRocessing Service URL, default is <a href="http://localhost/zoo" class=LURL target=_top>http://localhost/zoo</a>.</td></tr><tr class="SProperty SIndent1"><td class=SEntry><a href="#ZOO.Process.identifier" >identifier</a></td><td class=SDescription>{String} Process identifier in the OGC&rsquo;s Web Processing Service.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Process.ZOO.Process" >ZOO.<wbr>Process</a></td><td class=SDescription>Create a new Process</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Process.Execute" id=link485 onMouseOver="ShowTip(event, 'tt141', 'link485')" onMouseOut="HideTip('tt141')">Execute</a></td><td class=SDescription>Query the OGC&rsquo;s Web PRocessing Servcie to Execute the process.</td></tr><tr class="SProperty SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Process.buildInput" >buildInput</a></td><td class=SDescription>Object containing methods to build WPS inputs.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Process.buildInput.complex" >buildInput.<wbr>complex</a></td><td class=SDescription>Given an E4XElement representing the WPS complex data input.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Process.buildInput.reference" >buildInput.<wbr>reference</a></td><td class=SDescription>Given an E4XElement representing the WPS reference input.</td></tr><tr class="SFunction SIndent1"><td class=SEntry><a href="#ZOO.Process.buildInput.literal" >buildInput.<wbr>literal</a></td><td class=SDescription>Given an E4XElement representing the WPS literal data input.</td></tr><tr class="SFunction SIndent1 SMarked"><td class=SEntry><a href="#ZOO.Process.buildDataInputsNode" id=link486 onMouseOver="ShowTip(event, 'tt142', 'link486')" onMouseOut="HideTip('tt142')">buildDataInputsNode</a></td><td class=SDescription>Method to build the WPS DataInputs element.</td></tr></table></div></div><!--END_ND_SUMMARY--></div></div></div>

	<div class="CGroup"><div class=CTopic><h3 class=CTitle><a name="ZOO.Process.Properties_and_Functions"></a>Properties and Functions</h3></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Process.schemaLocation"></a>schemaLocation</h3><div class=CBody><p>{String} Schema location for a particular minor version.</p></div></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Process.namespaces"></a>namespaces</h3><div class=CBody><p>{Object} Mapping of namespace aliases to namespace URIs.</p></div></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Process.url"></a>url</h3><div class=CBody><p>{String} The OGC&rsquo;s Web PRocessing Service URL, default is <a href="http://localhost/zoo" class=LURL target=_top>http://localhost/zoo</a>.</p></div></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Process.identifier"></a>identifier</h3><div class=CBody><p>{String} Process identifier in the OGC&rsquo;s Web Processing Service.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Process.ZOO.Process"></a>ZOO.<wbr>Process</h3><div class=CBody><p>Create a new Process</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>url</td><td class=CDLDescription>{String} The OGC&rsquo;s Web Processing Service URL.</td></tr><tr><td class=CDLEntry>identifier</td><td class=CDLDescription>{String} The process identifier in the OGC&rsquo;s Web Processing Service.</td></tr></table></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Process.Execute"></a>Execute</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>Execute: function(</td><td class="PParameter  prettyprint " nowrap>inputs</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Query the OGC&rsquo;s Web PRocessing Servcie to Execute the process.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>inputs</td><td class=CDLDescription>{Object}</td></tr></table><h4 class=CHeading>Returns</h4><p>{String} The OGC&rsquo;s Web processing Service XML response.&nbsp; The result needs to be interpreted.</p></div></div></div>

	<div class="CProperty"><div class=CTopic><h3 class=CTitle><a name="ZOO.Process.buildInput"></a>buildInput</h3><div class=CBody><p>Object containing methods to build WPS inputs.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Process.buildInput.complex"></a>buildInput.<wbr>complex</h3><div class=CBody><p>Given an E4XElement representing the WPS complex data input.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>identifier</td><td class=CDLDescription>{String} the input indetifier</td></tr><tr><td class=CDLEntry>data</td><td class=CDLDescription>{Object} A WPS complex data input.</td></tr></table><h4 class=CHeading>Returns</h4><p>{E4XElement} A WPS Input node.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Process.buildInput.reference"></a>buildInput.<wbr>reference</h3><div class=CBody><p>Given an E4XElement representing the WPS reference input.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>identifier</td><td class=CDLDescription>{String} the input indetifier</td></tr><tr><td class=CDLEntry>data</td><td class=CDLDescription>{Object} A WPS reference input.</td></tr></table><h4 class=CHeading>Returns</h4><p>{E4XElement} A WPS Input node.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Process.buildInput.literal"></a>buildInput.<wbr>literal</h3><div class=CBody><p>Given an E4XElement representing the WPS literal data input.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>identifier</td><td class=CDLDescription>{String} the input indetifier</td></tr><tr><td class=CDLEntry>data</td><td class=CDLDescription>{Object} A WPS literal data input.</td></tr></table><h4 class=CHeading>Returns</h4><p>{E4XElement} The WPS Input node.</p></div></div></div>

	<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="ZOO.Process.buildDataInputsNode"></a>buildDataInputsNode</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>buildDataInputsNode:function(</td><td class="PParameter  prettyprint " nowrap>inputs</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Method to build the WPS DataInputs element.</p><h4 class=CHeading>Parameters</h4><table border=0 cellspacing=0 cellpadding=0 class=CDescriptionList><tr><td class=CDLEntry>inputs</td><td class=CDLDescription>{Object}</td></tr></table><h4 class=CHeading>Returns</h4><p>{E4XElement} The WPS DataInputs node for Execute query.</p></div></div></div>

	</div><!--Content-->



	<!--START_ND_TOOLTIPS-->
	<div class=CToolTip id="tt1"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>removeItem: function(</td><td class="PParameter  prettyprint " nowrap>array,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>item</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Remove an object from an array. </div></div><div class=CToolTip id="tt2"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>indexOf: function(</td><td class="PParameter  prettyprint " nowrap>array,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>obj</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote></div></div><div class=CToolTip id="tt3"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>extend: function(</td><td class="PParameter  prettyprint " nowrap>destination,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>source</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Copy all properties of a source object to a destination object. </div></div><div class=CToolTip id="tt4"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>rad: function(</td><td class="PParameter  prettyprint " nowrap>x</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote></div></div><div class=CToolTip id="tt5"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>distVincenty: function(</td><td class="PParameter  prettyprint " nowrap>p1,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>p2</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Given two objects representing points with geographic coordinates, this calculates the distance between those points on the surface of an ellipsoid.</div></div><div class=CToolTip id="tt6"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">Class: function()</td></tr></table></blockquote>Method used to create ZOO classes. </div></div><div class=CToolTip id="tt7"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>UpdateStatus: function(</td><td class="PParameter  prettyprint " nowrap>env,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>value</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Method used to update the status of the process</div></div><div class=CToolTip id="tt8"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>startsWith: function(</td><td class="PParameter  prettyprint " nowrap>str,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>sub</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Test whether a string starts with another string.</div></div><div class=CToolTip id="tt9"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>contains: function(</td><td class="PParameter  prettyprint " nowrap>str,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>sub</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Test whether a string contains another string.</div></div><div class=CToolTip id="tt10"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>trim: function(</td><td class="PParameter  prettyprint " nowrap>str</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Removes leading and trailing whitespace characters from a string.</div></div><div class=CToolTip id="tt11"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>camelize: function(</td><td class="PParameter  prettyprint " nowrap>str</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Camel-case a hyphenated string. </div></div><div class=CToolTip id="tt12"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>isNumeric: function(</td><td class="PParameter  prettyprint " nowrap>value</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Determine whether a string contains only a numeric value.</div></div><div class=CToolTip id="tt13"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>numericIf: function(</td><td class="PParameter  prettyprint " nowrap>value</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Converts a string that appears to be a numeric value into a number.</div></div><div class=CToolTip id="tt14"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">clone:function()</td></tr></table></blockquote>Create a cloned instance of this bounds.</div></div><div class=CToolTip id="tt15"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>equals:function(</td><td class="PParameter  prettyprint " nowrap>bounds</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Test a two bounds for equivalence.</div></div><div class=CToolTip id="tt16"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">toString:function()</td></tr></table></blockquote>{String} String representation of bounds object. </div></div><div class=CToolTip id="tt17"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>toBBOX:function(</td><td class="PParameter  prettyprint " nowrap>decimal</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote></div></div><div class=CToolTip id="tt18"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">toGeometry: function()</td></tr></table></blockquote>Create a new polygon geometry based on this bounds.</div></div><div class=CToolTip id="tt19"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">getWidth:function()</td></tr></table></blockquote>{Float} The width of the bounds</div></div><div class=CToolTip id="tt20"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">getHeight:function()</td></tr></table></blockquote>{Float} The height of the bounds (top minus bottom).</div></div><div class=CToolTip id="tt21"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>add:function(</td><td class="PParameter  prettyprint " nowrap>x,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>y</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote></div></div><div class=CToolTip id="tt22"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>extend:function(</td><td class="PParameter  prettyprint " nowrap>object</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Extend the bounds to include the point, lonlat, or bounds specified. </div></div><div class=CToolTip id="tt23"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>intersectsBounds:function(</td><td class="PParameter  prettyprint " nowrap>bounds,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>inclusive</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Determine whether the target bounds intersects this bounds. </div></div><div class=CToolTip id="tt24"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>containsBounds:function(</td><td class="PParameter  prettyprint " nowrap>bounds,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>partial,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>inclusive</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Determine whether the target bounds is contained within this bounds.</div></div><div class=CToolTip id="tt25"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">getCode: function()</td></tr></table></blockquote>Get the string SRS code.</div></div><div class=CToolTip id="tt26"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">getUnits: function()</td></tr></table></blockquote>Get the units string for the projection -- returns null if zoo-proj4js is not available.</div></div><div class=CToolTip id="tt27"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">toString: function()</td></tr></table></blockquote>Convert projection to string (getCode wrapper).</div></div><div class=CToolTip id="tt28"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>equals: function(</td><td class="PParameter  prettyprint " nowrap>projection</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Test equality of two projection instances. </div></div><div class=CToolTip id="tt29"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">destroy: function()</td></tr></table></blockquote>Destroy projection object.</div></div><div class=CToolTip id="tt30"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>ZOO.Projection.transform = function(</td><td class="PParameter  prettyprint " nowrap>point,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>source,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>dest</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Transform a point coordinate from one projection to another. </div></div><div class=CToolTip id="tt31"><div class=CClass>Class for coordinate transforms between coordinate systems. </div></div><div class=CToolTip id="tt32"><div class=CProperty>{Object} Maintain a reference (data) to the most recently read data. </div></div><div class=CToolTip id="tt33"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>read: function(</td><td class="PParameter  prettyprint " nowrap>data</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Read data from a string, and return an object whose type depends on the subclass.</div></div><div class=CToolTip id="tt34"><div class=CProperty>{Object} When keepData is true, this is the parsed string sent to read.</div></div><div class=CToolTip id="tt35"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">destroy: function()</td></tr></table></blockquote>Clean up.</div></div><div class=CToolTip id="tt36"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>write: function(</td><td class="PParameter  prettyprint " nowrap>data</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Accept an object, and return a string.</div></div><div class=CToolTip id="tt37"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>read: function(</td><td class="PParameter  prettyprint " nowrap>wkt</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Deserialize a WKT string and return a vector feature or an array of vector features. </div></div><div class=CToolTip id="tt38"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>write: function(</td><td class="PParameter  prettyprint " nowrap>features</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Serialize a feature or array of features into a WKT string.</div></div><div class=CToolTip id="tt39"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>read: function(</td><td class="PParameter  prettyprint " nowrap>json,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>filter</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Deserialize a json string.</div></div><div class=CToolTip id="tt40"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>write: function(</td><td class="PParameter  prettyprint " nowrap>value,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>pretty</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Serialize an object into a JSON string.</div></div><div class=CToolTip id="tt41"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">writeIndent: function()</td></tr></table></blockquote>Output an indentation string depending on the indentation level.</div></div><div class=CToolTip id="tt42"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">writeNewline: function()</td></tr></table></blockquote>Output a string representing a newline if in pretty printing mode.</div></div><div class=CToolTip id="tt43"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">writeSpace: function()</td></tr></table></blockquote>Output a string representing a space if in pretty printing mode.</div></div><div class=CToolTip id="tt44"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>read: function(</td><td class="PParameter  prettyprint " nowrap>json,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>type,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>filter</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Deserialize a GeoJSON string.</div></div><div class=CToolTip id="tt45"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>isValidType: function(</td><td class="PParameter  prettyprint " nowrap>obj,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>type</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Check if a GeoJSON object is a valid representative of the given type.</div></div><div class=CToolTip id="tt46"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>parseFeature: function(</td><td class="PParameter  prettyprint " nowrap>obj</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Convert a feature object from GeoJSON into an ZOO.Feature.</div></div><div class=CToolTip id="tt47"><div class=CClass>Vector features use the ZOO.Geometry classes as geometry description. </div></div><div class=CToolTip id="tt48"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>parseGeometry: function(</td><td class="PParameter  prettyprint " nowrap>obj</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Convert a geometry object from GeoJSON into an ZOO.Geometry.</div></div><div class=CToolTip id="tt49"><div class=CClass>A Geometry is a description of a geographic object. </div></div><div class=CToolTip id="tt50"><div class=CClass>Point geometry class.</div></div><div class=CToolTip id="tt51"><div class=CClass>MultiPoint is a collection of Points. </div></div><div class=CToolTip id="tt52"><div class=CClass>A LineString is a Curve which, once two points have been added to it, can never be less than two points long.</div></div><div class=CToolTip id="tt53"><div class=CClass>A MultiLineString is a geometry with multiple ZOO.Geometry.LineString components.</div></div><div class=CToolTip id="tt54"><div class=CClass>Polygon is a collection of ZOO.Geometry.LinearRing.</div></div><div class=CToolTip id="tt55"><div class=CClass>MultiPolygon is a geometry with multiple ZOO.Geometry.Polygon components. </div></div><div class=CToolTip id="tt56"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>write: function(</td><td class="PParameter  prettyprint " nowrap>obj,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>pretty</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Serialize a feature, geometry, array of features into a GeoJSON string.</div></div><div class=CToolTip id="tt57"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>createCRSObject: function(</td><td class="PParameter  prettyprint " nowrap>object</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Create the CRS object for an object.</div></div><div class=CToolTip id="tt58"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>parseFeatures: function(</td><td class="PParameter  prettyprint " nowrap>nodes</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Loop through all Placemark nodes and parse them. </div></div><div class=CToolTip id="tt59"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>parseFeature: function(</td><td class="PParameter  prettyprint " nowrap>node</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>This function is the core of the KML parsing code in ZOO. </div></div><div class=CToolTip id="tt60"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>parseAttributes: function(</td><td class="PParameter  prettyprint " nowrap>node</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote></div></div><div class=CToolTip id="tt61"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>parseExtendedData: function(</td><td class="PParameter  prettyprint " nowrap>node</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Parse ExtendedData from KML. </div></div><div class=CToolTip id="tt62"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>write: function(</td><td class="PParameter  prettyprint " nowrap>features</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Accept Feature Collection, and return a string.</div></div><div class=CToolTip id="tt63"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>createPlacemark: function(</td><td class="PParameter  prettyprint " nowrap>feature</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Creates and returns a KML placemark node representing the given feature.</div></div><div class=CToolTip id="tt64"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>buildGeometryNode: function(</td><td class="PParameter  prettyprint " nowrap>geometry</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Builds and returns a KML geometry node with the given geometry.</div></div><div class=CToolTip id="tt65"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>buildCoordinatesNode: function(</td><td class="PParameter  prettyprint " nowrap>geometry</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Builds and returns the KML coordinates node with the given geometry coordinates...&lt;/coordinates&gt;</div></div><div class=CToolTip id="tt66"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>read: function(</td><td class="PParameter  prettyprint " nowrap>data</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Read data from a string, and return a list of features.</div></div><div class=CToolTip id="tt67"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>parseFeature: function(</td><td class="PParameter  prettyprint " nowrap>node</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>This function is the core of the GML parsing code in ZOO. </div></div><div class=CToolTip id="tt68"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>parseAttributes: function(</td><td class="PParameter  prettyprint " nowrap>node</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote></div></div><div class=CToolTip id="tt69"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>write: function(</td><td class="PParameter  prettyprint " nowrap>features</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Generate a GML document string given a list of features.</div></div><div class=CToolTip id="tt70"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>createFeature: function(</td><td class="PParameter  prettyprint " nowrap>feature</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Accept an ZOO.Feature, and build a GML node for it.</div></div><div class=CToolTip id="tt71"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>buildGeometryNode: function(</td><td class="PParameter  prettyprint " nowrap>geometry</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote></div></div><div class=CToolTip id="tt72"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>buildCoordinatesNode: function(</td><td class="PParameter  prettyprint " nowrap>geometry</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>builds the coordinates XmlNode</div></div><div class=CToolTip id="tt73"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>read:function(</td><td class="PParameter  prettyprint " nowrap>data</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote></div></div><div class=CToolTip id="tt74"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>parseExecuteResponse: function(</td><td class="PParameter  prettyprint " nowrap>node</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote></div></div><div class=CToolTip id="tt75"><div class=CClass>Instances of this class represent bounding boxes. </div></div><div class=CToolTip id="tt76"><div class=CClass>Base class for format reading/writing a variety of formats. </div></div><div class=CToolTip id="tt77"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">destroy: function()</td></tr></table></blockquote>nullify references to prevent circular references and memory leaks</div></div><div class=CToolTip id="tt78"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">clone: function ()</td></tr></table></blockquote>Create a clone of this vector feature. </div></div><div class=CToolTip id="tt79"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>move: function(</td><td class="PParameter  prettyprint " nowrap>x,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>y</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Moves the feature and redraws it at its new location</div></div><div class=CToolTip id="tt80"><div class=CFunction>Creates a geometry object.</div></div><div class=CToolTip id="tt81"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">destroy: function()</td></tr></table></blockquote>Destroy this geometry.</div></div><div class=CToolTip id="tt82"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">clone: function()</td></tr></table></blockquote>Create a clone of this geometry. </div></div><div class=CToolTip id="tt83"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>extendBounds: function(</td><td class="PParameter  prettyprint " nowrap>newBounds</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Extend the existing bounds to include the new bounds. </div></div><div class=CToolTip id="tt84"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">clearBounds: function()</td></tr></table></blockquote>Nullify this components bounds and that of its parent as well.</div></div><div class=CToolTip id="tt85"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">getBounds: function()</td></tr></table></blockquote>Get the bounds for this Geometry. </div></div><div class=CToolTip id="tt86"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">calculateBounds: function()</td></tr></table></blockquote>Recalculate the bounds for the geometry.</div></div><div class=CToolTip id="tt87"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">toString: function()</td></tr></table></blockquote>Returns the Well-Known Text representation of a geometry</div></div><div class=CToolTip id="tt88"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>ZOO.Geometry.fromWKT = function(</td><td class="PParameter  prettyprint " nowrap>wkt</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Generate a geometry given a Well-Known Text string.</div></div><div class=CToolTip id="tt89"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">destroy: function ()</td></tr></table></blockquote>Destroy this geometry.</div></div><div class=CToolTip id="tt90"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">clone: function()</td></tr></table></blockquote>Clone this geometry.</div></div><div class=CToolTip id="tt91"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">getComponentsString: function()</td></tr></table></blockquote>Get a string representing the components for this collection</div></div><div class=CToolTip id="tt92"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">calculateBounds: function()</td></tr></table></blockquote>Recalculate the bounds by iterating through the components and calling calling extendBounds() on each item.</div></div><div class=CToolTip id="tt93"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>addComponent: function(</td><td class="PParameter  prettyprint " nowrap>component,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>index</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Add a new component (geometry) to the collection. </div></div><div class=CToolTip id="tt94"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>removeComponents: function(</td><td class="PParameter  prettyprint " nowrap>components</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Remove components from this geometry.</div></div><div class=CToolTip id="tt95"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>removeComponent: function(</td><td class="PParameter  prettyprint " nowrap>component</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Remove a component from this geometry.</div></div><div class=CToolTip id="tt96"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">getLength: function()</td></tr></table></blockquote>Calculate the length of this geometry</div></div><div class=CToolTip id="tt97"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">getCentroid: function()</td></tr></table></blockquote>{ZOO.Geometry.Point} The centroid of the collection</div></div><div class=CToolTip id="tt98"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>getGeodesicLength: function(</td><td class="PParameter  prettyprint " nowrap>projection</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Calculate the approximate length of the geometry were it projected onto the earth.</div></div><div class=CToolTip id="tt99"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>move: function(</td><td class="PParameter  prettyprint " nowrap>x,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>y</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Moves a geometry by the given displacement along positive x and y axes. </div></div><div class=CToolTip id="tt100"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>rotate: function(</td><td class="PParameter  prettyprint " nowrap>angle,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>origin</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Rotate a geometry around some origin</div></div><div class=CToolTip id="tt101"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>resize: function(</td><td class="PParameter  prettyprint " nowrap>scale,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>origin,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>ratio</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Resize a geometry relative to some origin. </div></div><div class=CToolTip id="tt102"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>equals: function(</td><td class="PParameter  prettyprint " nowrap>geometry</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Determine whether another geometry is equivalent to this one. </div></div><div class=CToolTip id="tt103"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>transform: function(</td><td class="PParameter  prettyprint " nowrap>source,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>dest</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Reproject the components geometry from source to dest.</div></div><div class=CToolTip id="tt104"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>intersects: function(</td><td class="PParameter  prettyprint " nowrap>geometry</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Determine if the input geometry intersects this one.</div></div><div class=CToolTip id="tt105"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>getVertices: function(</td><td class="PParameter  prettyprint " nowrap>nodes</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Return a list of all points in this geometry.</div></div><div class=CToolTip id="tt106"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>clone: function(</td><td class="PParameter  prettyprint " nowrap>obj</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>{ZOO.Geometry.Point} An exact clone of this ZOO.Geometry.Point</div></div><div class=CToolTip id="tt107"><div class=CFunction>Construct a point geometry.</div></div><div class=CToolTip id="tt108"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">calculateBounds: function ()</td></tr></table></blockquote>Create a new Bounds based on the x/y</div></div><div class=CToolTip id="tt109"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>equals: function(</td><td class="PParameter  prettyprint " nowrap>geom</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Determine whether another geometry is equivalent to this one. </div></div><div class=CToolTip id="tt110"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">toShortString: function()</td></tr></table></blockquote>{String} Shortened String representation of Point object. </div></div><div class=CToolTip id="tt111"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>move: function(</td><td class="PParameter  prettyprint " nowrap>x,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>y</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Moves a geometry by the given displacement along positive x and y axes. </div></div><div class=CToolTip id="tt112"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>rotate: function(</td><td class="PParameter  prettyprint " nowrap>angle,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>origin</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Rotate a point around another.</div></div><div class=CToolTip id="tt113"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">getCentroid: function()</td></tr></table></blockquote>{ZOO.Geometry.Point} The centroid of the collection</div></div><div class=CToolTip id="tt114"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>resize: function(</td><td class="PParameter  prettyprint " nowrap>scale,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>origin,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>ratio</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Resize a point relative to some origin. </div></div><div class=CToolTip id="tt115"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>intersects: function(</td><td class="PParameter  prettyprint " nowrap>geometry</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Determine if the input geometry intersects this one.</div></div><div class=CToolTip id="tt116"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>transform: function(</td><td class="PParameter  prettyprint " nowrap>source,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>dest</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Translate the x,y properties of the point from source to dest.</div></div><div class=CToolTip id="tt117"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>getVertices: function(</td><td class="PParameter  prettyprint " nowrap>nodes</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Return a list of all points in this geometry.</div></div><div class=CToolTip id="tt118"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>addPoint: function(</td><td class="PParameter  prettyprint " nowrap>point,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>index</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Wrapper for ZOO.Geometry.Collection.addComponent</div></div><div class=CToolTip id="tt119"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>removePoint: function(</td><td class="PParameter  prettyprint " nowrap>point</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Wrapper for ZOO.Geometry.Collection.removeComponent</div></div><div class=CToolTip id="tt120"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">getLength: function()</td></tr></table></blockquote>{Float} The length of the curve</div></div><div class=CToolTip id="tt121"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>removeComponent: function(</td><td class="PParameter  prettyprint " nowrap>point</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Only allows removal of a point if there are three or more points in the linestring. </div></div><div class=CToolTip id="tt122"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>intersects: function(</td><td class="PParameter  prettyprint " nowrap>geometry</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Test for instersection between two geometries. </div></div><div class=CToolTip id="tt123"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">getSortedSegments: function()</td></tr></table></blockquote>{Array} An array of segment objects. </div></div><div class=CToolTip id="tt124"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>splitWithSegment: function(</td><td class="PParameter  prettyprint " nowrap>seg,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>options</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Split this geometry with the given segment.</div></div><div class=CToolTip id="tt125"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>split: function(</td><td class="PParameter  prettyprint " nowrap>target,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>options</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Use this geometry (the source) to attempt to split a target geometry.</div></div><div class=CToolTip id="tt126"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>splitWith: function(</td><td class="PParameter  prettyprint " nowrap>geometry,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>options</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Split this geometry (the target) with the given geometry (the source).</div></div><div class=CToolTip id="tt127"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>getVertices: function(</td><td class="PParameter  prettyprint " nowrap>nodes</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Return a list of all points in this geometry.</div></div><div class=CToolTip id="tt128"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>addComponent: function(</td><td class="PParameter  prettyprint " nowrap>point,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>index</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Adds a point to geometry components. </div></div><div class=CToolTip id="tt129"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>move: function(</td><td class="PParameter  prettyprint " nowrap>x,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>y</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Moves a geometry by the given displacement along positive x and y axes. </div></div><div class=CToolTip id="tt130"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>rotate: function(</td><td class="PParameter  prettyprint " nowrap>angle,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>origin</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Rotate a geometry around some origin</div></div><div class=CToolTip id="tt131"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>resize: function(</td><td class="PParameter  prettyprint " nowrap>scale,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>origin,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>ratio</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Resize a geometry relative to some origin. </div></div><div class=CToolTip id="tt132"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>transform: function(</td><td class="PParameter  prettyprint " nowrap>source,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>dest</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Reproject the components geometry from source to dest.</div></div><div class=CToolTip id="tt133"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">getCentroid: function()</td></tr></table></blockquote>{ZOO.Geometry.Point} The centroid of the ring</div></div><div class=CToolTip id="tt134"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">getArea: function()</td></tr></table></blockquote></div></div><div class=CToolTip id="tt135"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>getGeodesicArea: function(</td><td class="PParameter  prettyprint " nowrap>projection</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Calculate the approximate area of the polygon were it projected onto the earth. </div></div><div class=CToolTip id="tt136"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>containsPoint: function(</td><td class="PParameter  prettyprint " nowrap>point</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Test if a point is inside a linear ring. </div></div><div class=CToolTip id="tt137"><div class=CClass>A Linear Ring is a special LineString which is closed. </div></div><div class=CToolTip id="tt138"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td class="prettyprint">getArea: function()</td></tr></table></blockquote>Calculated by subtracting the areas of the internal holes from the area of the outer hole.</div></div><div class=CToolTip id="tt139"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>containsPoint: function(</td><td class="PParameter  prettyprint " nowrap>point</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Test if a point is inside a polygon. </div></div><div class=CToolTip id="tt140"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>ZOO.Geometry.Polygon.createRegularPolygon = function(</td><td class="PParameter  prettyprint " nowrap>origin,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>radius,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>sides,</td></tr><tr><td></td><td class="PParameter  prettyprint " nowrap>rotation</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Create a regular polygon around a radius. </div></div><div class=CToolTip id="tt141"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>Execute: function(</td><td class="PParameter  prettyprint " nowrap>inputs</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Query the OGC&rsquo;s Web PRocessing Servcie to Execute the process.</div></div><div class=CToolTip id="tt142"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>buildDataInputsNode:function(</td><td class="PParameter  prettyprint " nowrap>inputs</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Method to build the WPS DataInputs element.</div></div><div class=CToolTip id="tt143"><div class=CFunction>Construct a new bounds object.</div></div><div class=CToolTip id="tt144"><div class=CFunction>This class offers several methods for interacting with a wrapped zoo-pro4js projection object.</div></div><div class=CToolTip id="tt145"><div class=CFunction>Create a new parser for WKT</div></div><div class=CToolTip id="tt146"><div class=CFunction>Create a new parser for JSON.</div></div><div class=CToolTip id="tt147"><div class=CFunction>Create a new parser for GeoJSON.</div></div><div class=CToolTip id="tt148"><div class=CClass>A parser to read/write JSON safely. </div></div><div class=CToolTip id="tt149"><div class=CClass>A Collection is exactly what it sounds like: A collection of different Geometries. </div></div><div class=CToolTip id="tt150"><div class=CFunction>Create a new parser for KML.</div></div><div class=CToolTip id="tt151"><div class=CFunction>Create a new parser for GML.</div></div><div class=CToolTip id="tt152"><div class=CClass>Read/Write WPS. </div></div><div class=CToolTip id="tt153"><div class=CProperty>{Object} This object holds arbitrary properties that describe the feature.</div></div><div class=CToolTip id="tt154"><div class=CFunction>Create a vector feature.</div></div><div class=CToolTip id="tt155"><div class=CProperty>{Array(ZOO.Geometry)} The component parts of this geometry</div></div><div class=CToolTip id="tt156"><div class=CFunction>Creates a Geometry Collection -- a list of geoms.</div></div><div class=CToolTip id="tt157"><div class=CFunction>Create a new MultiPoint Geometry</div></div><div class=CToolTip id="tt158"><div class=CClass>A Curve is a MultiPoint, whose points are assumed to be connected. </div></div><div class=CToolTip id="tt159"><div class=CFunction>Create a new MultiPolygon geometry</div></div><!--END_ND_TOOLTIPS-->